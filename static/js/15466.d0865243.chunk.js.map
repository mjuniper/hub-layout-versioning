{"version":3,"file":"static/js/15466.d0865243.chunk.js","mappings":"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","sources":["../.yalc/@esri/hub-components/dist/esm/arcgis-hub-file-upload-manager.entry.js","../.yalc/@esri/hub-components/dist/esm/fail-safe-1c23dad8.js","../.yalc/@esri/hub-components/dist/esm/get-portal-06f7947b.js","../.yalc/@esri/hub-components/dist/esm/get-with-default-6db049d8.js","../.yalc/@esri/hub-components/dist/esm/getPortalBaseFromOrgUrl-6a5781aa.js","../.yalc/@esri/hub-components/dist/esm/is-update-group-e7478ed8.js","../.yalc/@esri/hub-components/dist/esm/tslib.es6-e75776ba.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-0d95d9d4.js';\nimport { b as bind } from './context-7d8f7366.js';\nimport { i as intlManager } from './intl-manager-821aea3b.js';\nimport { I as ItemType, F as FileExtension } from './types-84000059.js';\nimport { A as ArcGISContextManager } from './ArcGISContextManager-546abc28.js';\nimport { i as isBBox, d as bboxToString, c as getGeographicOrgExtent } from './extent-0f42acfc.js';\nimport { s as searchItems } from './search-3af9e278.js';\nimport { _ as __rest } from './tslib.es6-e75776ba.js';\nimport { c as createItem } from './create-7cf3c372.js';\nimport { _ as __assign, a as __spreadArrays } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { d as determineOwner, s as serializeItem, j as getItemStatus } from './get-f2cd18e7.js';\nimport { a as appendCustomParams } from './append-custom-params-fd9b7e72.js';\nimport { r as request } from './request-c15cc2af.js';\nimport { g as getUserMembership, s as setItemAccess } from './access-c6f01a39.js';\nimport { i as isUpdateGroup } from './is-update-group-e7478ed8.js';\nimport { f as failSafe } from './fail-safe-1c23dad8.js';\nimport { a as getUser } from './getPortalBaseFromOrgUrl-6a5781aa.js';\nimport './index-4e91769f.js';\nimport './get-prop-d82e4fa6.js';\nimport './get-with-default-6db049d8.js';\nimport './logger-0c7a68de.js';\nimport './util-2150bd9e.js';\nimport './get-portal-06f7947b.js';\nimport './generic-search-069e22da.js';\nimport './clean-url-be7c0879.js';\nimport './get-859a2960.js';\n\n/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { addItemPart } from \"@esri/arcgis-rest-portal\";\n * //\n * addItemPart({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   file: data,\n *   partNum: 1,\n *   authentication\n * })\n *   .then(response)\n * ```\n * Add Item Part allows the caller to upload a file part when doing an add or update item operation in multipart mode. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item-part.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add the item part status.\n */\nfunction addItemPart(requestOptions) {\n    var partNum = requestOptions.partNum;\n    if (!Number.isInteger(partNum) || partNum < 1 || partNum > 10000) {\n        return Promise.reject(new Error('The part number must be an integer between 1 to 10000, inclusive.'));\n    }\n    return determineOwner(requestOptions).then(function (owner) {\n        // AGO adds the \"partNum\" parameter in the query string, not in the body\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/addPart?partNum=\" + partNum;\n        var options = appendCustomParams(requestOptions, [\"file\"], { params: __assign({}, requestOptions.params) });\n        return request(url, options);\n    });\n}\n/**\n * ```js\n * import { commitItemUpload } from \"@esri/arcgis-rest-portal\";\n * //\n * commitItemUpload({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n * Commit is called once all parts are uploaded during a multipart Add Item or Update Item operation. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/commit.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get the commit result.\n */\nfunction commitItemUpload(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/commit\";\n        var options = appendCustomParams(requestOptions, [], {\n            params: __assign(__assign({}, requestOptions.params), serializeItem(requestOptions.item))\n        });\n        return request(url, options);\n    });\n}\n/**\n * ```js\n * import { cancelItemUpload } from \"@esri/arcgis-rest-portal\";\n * //\n * cancelItemUpload({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n * Cancels a multipart upload on an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/cancel.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get the commit result.\n */\nfunction cancelItemUpload(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/cancel\";\n        return request(url, requestOptions);\n    });\n}\n\n/* Copyright (c) 2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nfunction chunk(array, size) {\n    if (array.length === 0) {\n        return [];\n    }\n    var chunks = [];\n    for (var i = 0; i < array.length; i += size) {\n        chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n}\n\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { addGroupUsers } from \"@esri/arcgis-rest-portal\";\n * //\n * addGroupUsers({\n *   id: groupId,\n *   users: [\"username1\", \"username2\"],\n *   admins: [\"username3\"],\n *   authentication\n * })\n * .then(response);\n * ```\n * Add users to a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-users-to-group.htm) for more information.\n *\n * @param requestOptions  - Options for the request\n * @returns A Promise\n */\nfunction addGroupUsers(requestOptions) {\n    var id = requestOptions.id;\n    var url = getPortalUrl(requestOptions) + \"/community/groups/\" + id + \"/addUsers\";\n    var baseOptions = Object.assign({}, requestOptions, {\n        admins: undefined,\n        users: undefined\n    });\n    var batchRequestOptions = __spreadArrays(_prepareRequests(\"users\", requestOptions.users, baseOptions), _prepareRequests(\"admins\", requestOptions.admins, baseOptions));\n    var promises = batchRequestOptions.map(function (options) {\n        return _sendSafeRequest(url, options);\n    });\n    return Promise.all(promises).then(_consolidateRequestResults);\n}\nfunction _prepareRequests(type, usernames, baseOptions) {\n    if (!usernames || usernames.length < 1) {\n        return [];\n    }\n    // the ArcGIS REST API only allows to add no more than 25 users per request,\n    // see https://developers.arcgis.com/rest/users-groups-and-items/add-users-to-group.htm\n    var userChunks = chunk(usernames, 25);\n    return userChunks.map(function (users) {\n        return _generateRequestOptions(type, users, baseOptions);\n    });\n}\nfunction _generateRequestOptions(type, usernames, baseOptions) {\n    var _a, _b;\n    return Object.assign({}, baseOptions, (_a = {},\n        _a[type] = usernames,\n        _a.params = __assign(__assign({}, baseOptions.params), (_b = {}, _b[type] = usernames, _b)),\n        _a));\n}\n// this request is safe since the request error will be handled\nfunction _sendSafeRequest(url, requestOptions) {\n    return request(url, requestOptions).catch(function (error) {\n        return {\n            errors: [error]\n        };\n    });\n}\nfunction _consolidateRequestResults(results) {\n    var notAdded = results\n        .filter(function (result) { return result.notAdded; })\n        .reduce(function (collection, result) { return collection.concat(result.notAdded); }, []);\n    var errors = results\n        .filter(function (result) { return result.errors; })\n        .reduce(function (collection, result) { return collection.concat(result.errors); }, []);\n    var consolidated = { notAdded: notAdded };\n    if (errors.length > 0) {\n        consolidated.errors = errors;\n    }\n    return consolidated;\n}\n\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { removeGroupUsers } from \"@esri/arcgis-rest-portal\";\n * //\n * removeGroupUsers({\n *   id: groupId,\n *   users: [\"username1\", \"username2\"],\n *   authentication\n * })\n * .then(response);\n * ```\n * Add users to a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/remove-users-from-group.htm) for more information.\n *\n * @param requestOptions  - Options for the request\n * @returns A Promise\n */\nfunction removeGroupUsers(requestOptions) {\n    var id = requestOptions.id, usersToRemove = requestOptions.users;\n    var url = getPortalUrl(requestOptions) + \"/community/groups/\" + id + \"/removeUsers\";\n    var safeSend = function (users) {\n        var options = __assign(__assign({}, requestOptions), { users: users, params: { users: users } });\n        return request(url, options)\n            .catch(function (error) { return ({ errors: [error] }); });\n    };\n    // the ArcGIS REST API only allows to add no more than 25 users per request,\n    // see https://developers.arcgis.com/rest/users-groups-and-items/remove-users-from-group.htm\n    var promises = chunk(usersToRemove, 25).map(function (usersChunk) { return safeSend(usersChunk); });\n    return Promise.all(promises)\n        .then(function (results) {\n        var filtered = function (propName) { return results\n            .filter(function (result) { return result[propName]; })\n            .reduce(function (collection, result) { return collection.concat(result[propName]); }, []); };\n        var errors = filtered('errors');\n        var consolidated = { notRemoved: filtered('notRemoved') };\n        return errors.length ? __assign(__assign({}, consolidated), { errors: errors }) : consolidated;\n    });\n}\n\n/**\n * ```js\n * import { updateUserMemberships } from \"@esri/arcgis-rest-portal\";\n * //\n * updateUserMemberships({\n *   id: groupId,\n *   admins: [\"username3\"],\n *   authentication\n * })\n * .then(response);\n * ```\n * Change the user membership levels of existing users in a group\n *\n * @param requestOptions  - Options for the request\n * @returns A Promise\n */\nfunction updateUserMemberships(requestOptions) {\n    var url = getPortalUrl(requestOptions) + \"/community/groups/\" + requestOptions.id + \"/updateUsers\";\n    var opts = {\n        authentication: requestOptions.authentication,\n        params: {}\n    };\n    // add the correct params depending on the type of membership we are changing to\n    if (requestOptions.newMemberType === \"admin\") {\n        opts.params.admins = requestOptions.users;\n    }\n    else {\n        opts.params.users = requestOptions.users;\n    }\n    // make the request\n    return request(url, opts);\n}\n\n/**\n * ```js\n * import { isItemSharedWithGroup } from \"@esri/arcgis-rest-portal\";\n * //\n * isItemSharedWithGroup({\n *   groupId: 'bc3,\n *   itemId: 'f56,\n *   authentication\n * })\n * .then(isShared => {})\n * ```\n * Find out whether or not an item is already shared with a group.\n *\n * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n * @returns Promise that will resolve with true/false\n */\nfunction isItemSharedWithGroup(requestOptions) {\n    var searchOpts = {\n        q: \"id: \" + requestOptions.id + \" AND group: \" + requestOptions.groupId,\n        start: 1,\n        num: 10,\n        sortField: \"title\",\n        authentication: requestOptions.authentication,\n        httpMethod: \"POST\"\n    };\n    return searchItems(searchOpts).then(function (searchResponse) {\n        var result = false;\n        if (searchResponse.total > 0) {\n            result = searchResponse.results.some(function (itm) {\n                return itm.id === requestOptions.id;\n            });\n            return result;\n        }\n    });\n}\n\n/**\n * ```js\n * import { shareItemWithGroup } from '@esri/arcgis-rest-portal';\n * //\n * shareItemWithGroup({\n *   id: \"abc123\",\n *   groupId: \"xyz987\",\n *   owner: \"some-owner\",\n *   authentication\n * })\n * ```\n * Share an item with a group, either as an\n * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-item-owner-.htm),\n * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-group-admin-.htm) or\n * organization admin.\n *\n * Note: Sharing the item as an Admin will use the `/content/users/:ownername/items/:itemid/share` end-point\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the data from the response.\n */\nfunction shareItemWithGroup(requestOptions) {\n    return isItemSharedWithGroup(requestOptions)\n        .then(function (isShared) {\n        if (isShared) {\n            // already shared, exit early with success response\n            return {\n                itemId: requestOptions.id,\n                shortcut: true,\n                notSharedWith: [],\n            };\n        }\n        var username = requestOptions.authentication.username, owner = requestOptions.owner, confirmItemControl = requestOptions.confirmItemControl;\n        var itemOwner = owner || username;\n        // non-item owner\n        if (itemOwner !== username) {\n            // need to track if the user is an admin\n            var isAdmin_1 = false;\n            // track if the admin & owner are in the same org\n            var isCrossOrgSharing_1 = false;\n            // next perform any necessary membership adjustments for\n            // current user and/or item owner\n            return Promise.all([\n                getUser({\n                    username: username,\n                    authentication: requestOptions.authentication,\n                }),\n                getUser({\n                    username: itemOwner,\n                    authentication: requestOptions.authentication,\n                }),\n                getUserMembership(requestOptions),\n            ])\n                .then(function (_a) {\n                var currentUser = _a[0], ownerUser = _a[1], membership = _a[2];\n                var isSharedEditingGroup = !!confirmItemControl;\n                isAdmin_1 = currentUser.role === \"org_admin\" && !currentUser.roleId;\n                isCrossOrgSharing_1 = currentUser.orgId !== ownerUser.orgId;\n                return getMembershipAdjustments(currentUser, isSharedEditingGroup, membership, isAdmin_1, ownerUser, requestOptions);\n            })\n                .then(function (membershipAdjustments) {\n                var _a = membershipAdjustments[0], revert = (_a === void 0 ? {\n                    promise: Promise.resolve({ notAdded: [] }),\n                    revert: function (sharingResults) {\n                        return Promise.resolve(sharingResults);\n                    },\n                } : _a).revert;\n                // perform all membership adjustments\n                return Promise.all(membershipAdjustments.map(function (_a) {\n                    var promise = _a.promise;\n                    return promise;\n                }))\n                    .then(function () {\n                    // then attempt the share\n                    return shareToGroup(requestOptions, isAdmin_1, isCrossOrgSharing_1);\n                })\n                    .then(function (sharingResults) {\n                    // lastly, if the admin user was added to the group,\n                    // remove them from the group. this is a no-op that\n                    // immediately resolves the sharingResults when no\n                    // membership adjustment was needed\n                    return revert(sharingResults);\n                });\n            });\n        }\n        // item owner, let it call through\n        return shareToGroup(requestOptions);\n    })\n        .then(function (sharingResponse) {\n        if (sharingResponse.notSharedWith.length) {\n            throw Error(\"Item \" + requestOptions.id + \" could not be shared to group \" + requestOptions.groupId + \".\");\n        }\n        else {\n            // all is well\n            return sharingResponse;\n        }\n    });\n}\nfunction getMembershipAdjustments(currentUser, isSharedEditingGroup, membership, isAdmin, ownerUser, requestOptions) {\n    var membershipGuarantees = [];\n    if (requestOptions.groupId !== currentUser.favGroupId) {\n        if (isSharedEditingGroup) {\n            if (!isAdmin) {\n                // abort and reject promise\n                throw Error(\"This item can not be shared to shared editing group \" + requestOptions.groupId + \" by \" + currentUser.username + \" as they not the item owner or org admin.\");\n            }\n            membershipGuarantees.push(\n            // admin user must be a group member to share, should be reverted afterwards\n            ensureMembership(currentUser, currentUser, false, \"Error adding \" + currentUser.username + \" as member to edit group \" + requestOptions.groupId + \". Consequently item \" + requestOptions.id + \" was not shared to the group.\", requestOptions), \n            // item owner must be a group admin\n            ensureMembership(currentUser, ownerUser, true, membership === \"none\"\n                ? \"Error adding user \" + ownerUser.username + \" to edit group \" + requestOptions.groupId + \". Consequently item \" + requestOptions.id + \" was not shared to the group.\"\n                : \"Error promoting user \" + ownerUser.username + \" to admin in edit group \" + requestOptions.groupId + \". Consequently item \" + requestOptions.id + \" was not shared to the group.\", requestOptions));\n        }\n        else if (isAdmin) {\n            // admin user must be a group member to share, should be reverted afterwards\n            membershipGuarantees.push(ensureMembership(currentUser, currentUser, false, \"Error adding \" + currentUser.username + \" as member to view group \" + requestOptions.groupId + \". Consequently item \" + requestOptions.id + \" was not shared to the group.\", requestOptions));\n        }\n        else if (membership === \"none\") {\n            // all other non-item owners must be a group member\n            throw new Error(\"This item can not be shared by \" + currentUser.username + \" as they are not a member of the specified group \" + requestOptions.groupId + \".\");\n        }\n    }\n    return membershipGuarantees;\n}\nfunction shareToGroup(requestOptions, isAdmin, isCrossOrgSharing) {\n    if (isAdmin === void 0) { isAdmin = false; }\n    if (isCrossOrgSharing === void 0) { isCrossOrgSharing = false; }\n    var username = requestOptions.authentication.username;\n    var itemOwner = requestOptions.owner || username;\n    // decide what url to use\n    // default to the non-owner url...\n    var url = getPortalUrl(requestOptions) + \"/content/items/\" + requestOptions.id + \"/share\";\n    // but if they are the owner, or org_admin, use this route\n    // Note: When using this end-point as an admin, apparently the admin does not need to be a member of the group (the itemOwner does)\n    // Note: Admin's can only use this route when the item is in the same org they are admin for\n    if (itemOwner === username || (isAdmin && !isCrossOrgSharing)) {\n        url = getPortalUrl(requestOptions) + \"/content/users/\" + itemOwner + \"/items/\" + requestOptions.id + \"/share\";\n    }\n    // now its finally time to do the sharing\n    requestOptions.params = {\n        groups: requestOptions.groupId,\n        confirmItemControl: requestOptions.confirmItemControl,\n    };\n    return request(url, requestOptions);\n}\nfunction ensureMembership(currentUser, ownerUser, shouldPromote, errorMessage, requestOptions) {\n    var _a;\n    var ownerGroups = ownerUser.groups || [];\n    var group = ownerGroups.find(function (g) {\n        return g.id === requestOptions.groupId;\n    });\n    // if they are in different orgs, eject\n    if (currentUser.orgId !== ownerUser.orgId) {\n        throw Error(\"User \" + ownerUser.username + \" is not a member of the same org as \" + currentUser.username + \". Consequently they can not be added added to group \" + requestOptions.groupId + \" nor can item \" + requestOptions.id + \" be shared to the group.\");\n    }\n    // if owner is not a member, and has 512 groups\n    if (!group && ownerGroups.length > 511) {\n        throw Error(\"User \" + ownerUser.username + \" already has 512 groups, and can not be added to group \" + requestOptions.groupId + \". Consequently item \" + requestOptions.id + \" can not be shared to the group.\");\n    }\n    var promise;\n    var revert;\n    // decide if we need to add them or upgrade them\n    if (group) {\n        // they are in the group...\n        // check member type\n        if (shouldPromote && group.userMembership.memberType === \"member\") {\n            // promote them\n            promise = updateUserMemberships({\n                id: requestOptions.groupId,\n                users: [ownerUser.username],\n                newMemberType: \"admin\",\n                authentication: requestOptions.authentication,\n            })\n                .then(function (results) {\n                // convert the result into the right type\n                var notAdded = results.results.reduce(function (acc, entry) {\n                    if (!entry.success) {\n                        acc.push(entry.username);\n                    }\n                    return acc;\n                }, []);\n                // and return it\n                return Promise.resolve({ notAdded: notAdded });\n            })\n                .catch(function () { return ({ notAdded: [ownerUser.username] }); });\n            revert = function (sharingResults) {\n                return updateUserMemberships({\n                    id: requestOptions.groupId,\n                    users: [ownerUser.username],\n                    newMemberType: \"member\",\n                    authentication: requestOptions.authentication,\n                })\n                    .then(function () { return sharingResults; })\n                    .catch(function () { return sharingResults; });\n            };\n        }\n        else {\n            // they are already an admin in the group\n            // return the same response the API would if we added them\n            promise = Promise.resolve({ notAdded: [] });\n            revert = function (sharingResults) { return Promise.resolve(sharingResults); };\n        }\n    }\n    else {\n        // attempt to add user to group\n        var userType = shouldPromote ? \"admins\" : \"users\";\n        // can't currently determine if the group is within the admin's\n        // org without performing a search, so attempt to add and handle\n        // the api error\n        promise = addGroupUsers((_a = {\n                id: requestOptions.groupId\n            },\n            _a[userType] = [ownerUser.username],\n            _a.authentication = requestOptions.authentication,\n            _a))\n            .then(function (results) {\n            // results.errors includes an ArcGISAuthError when the group\n            // is in a different org, but notAdded is empty, throw here\n            // to normalize the results in below catch\n            if (results.errors && results.errors.length) {\n                throw results.errors[0];\n            }\n            return results;\n        })\n            .catch(function () { return ({ notAdded: [ownerUser.username] }); });\n        revert = function (sharingResults) {\n            return removeGroupUsers({\n                id: requestOptions.groupId,\n                users: [ownerUser.username],\n                authentication: requestOptions.authentication,\n            }).then(function () {\n                // always resolves, suppress any resolved errors\n                return sharingResults;\n            });\n        };\n    }\n    return {\n        promise: promise.then(function (membershipResponse) {\n            if (membershipResponse.notAdded.length) {\n                throw new Error(errorMessage);\n            }\n            return membershipResponse;\n        }),\n        revert: revert,\n    };\n}\n\n/**\n * Helper to split a large number of calls into\n * smaller batches of concurrent calls.\n * @param {Array} values Any array of values with which to invoke fn\n * @param {Function} fn The function that will be invoked with each value\n * @param {number} [batchSize=5] The number of concurrent calls to fn, defaults to 5\n * @returns {Promise<IBatch[]>}\n */\nfunction batch(values, fn, batchSize = 5) {\n    const toBatches = (_batches, value) => {\n        let _batch = _batches[_batches.length - 1];\n        if (!_batch || _batch.length === batchSize) {\n            _batch = [];\n            _batches.push(_batch);\n        }\n        _batch.push(value);\n        return _batches;\n    };\n    const toSerialBatchChain = (promise, batchOfValues) => {\n        const executeBatch = (prevResults) => {\n            const batchResults = batchOfValues.map(id => fn(id));\n            return Promise.all(batchResults).then(results => prevResults.concat(results));\n        };\n        return promise.then(executeBatch);\n    };\n    // split values into batches of values\n    const batches = values.reduce(toBatches, []);\n    // batches are processed serially, however\n    // all calls within a batch are concurrent\n    return batches.reduce(toSerialBatchChain, Promise.resolve([]));\n}\n\n/**\n * Takes a file, file owner, and file AGO item id along with a size limit\n * Then chunks the file up based on that file limit.\n * The chunks are added to addItemPart calls and added to a queue array.\n *\n * @export\n * @param {*} file File to be uploaded\n * @param {string} owner file owner\n * @param {string} id file ID from AGO\n * @param {number} sizeLimit How large should the chunks be?\n * @param {IUserRequestOptions} requestOptions\n * @return {*}  {IBatch}\n */\nfunction _prepareUploadRequests(file, owner, id, sizeLimit, requestOptions) {\n    const queue = [];\n    // part number starts from 1\n    let partIndex = 1;\n    let sizeIndex = 0;\n    // Slice the file data and create an upload request for each part\n    while (sizeIndex < file.size) {\n        queue.push(Object.assign({ file: file.slice(sizeIndex, sizeIndex + sizeLimit, file.type), owner,\n            id, partNum: partIndex }, requestOptions));\n        partIndex += 1;\n        sizeIndex += sizeLimit;\n    }\n    return queue.reverse();\n}\n\n/**\n * Creates an item in online from a local file/item.\n * Upload is multithreaded as the item is chunked up.\n *\n * @export\n * @param {IItemAdd} item Item to be uploaded into online.\n * @param {IUserRequestOptions} requestOptions\n * @return {*}  {Promise<string>} Newly created item id\n */\nasync function createItemFromFile(item, requestOptions) {\n    // Grab a reference to the file.\n    const file = item.file;\n    // make a shadow copy of the item parameter and remove the file object\n    // so that it won't trigger the direct upload at the createContent\n    // request\n    item = Object.assign({}, item);\n    delete item.file;\n    // Create the item in online so we have an id\n    const createResult = await createItem(Object.assign({ item, filename: file.name, async: true, multipart: true, overwrite: true }, requestOptions));\n    // get the items id\n    const itemId = createResult.id;\n    try {\n        // AGOL recommends at least 5mb for each file part\n        // to upload so we use 6mb to slice the file.\n        // see https://developers.arcgis.com/rest/users-groups-and-items/add-item-part.htm\n        const sizeLimit = 6 * 1000 * 1000;\n        // Create queue of upload requests.\n        const uploadQueue = _prepareUploadRequests(file, item.owner, itemId, sizeLimit, requestOptions);\n        // execute up to 5 concurrent requests\n        await batch(uploadQueue, \n        // We are doing this to catch individual response failures\n        // and throwing them to stop further xhr's\n        async (opts) => {\n            const resp = await addItemPart(opts);\n            // If the response did not return with success then throw an error\n            if (!resp.success) {\n                throw new Error(\"addItemPart failed\");\n            }\n        }, 5);\n        // update item extent to string\n        if (item.extent && isBBox(item.extent)) {\n            item.extent = bboxToString(item.extent);\n        }\n        // Commit is called once all parts are uploaded during a multipart add item or update item operation.\n        await commitItemUpload(Object.assign({ id: itemId, item, owner: item.owner }, requestOptions));\n    }\n    catch (e) {\n        // If an error is thrown then cancel item upload\n        await cancelItemUpload(Object.assign({ id: itemId, owner: item.owner }, requestOptions));\n        throw e;\n    }\n    return createResult;\n}\n\n/**\n * Create AGO item from a URL\n *\n * @export\n * @param {IItemAdd} item Item to be uploaded into online.\n * @param {IUserRequestOptions} requestOptions\n * @return {*}  {Promise<string>} Newly created item ID\n */\nasync function createItemFromUrl(item, requestOptions) {\n    // Fire off createItem call\n    const createResult = await createItem(Object.assign({ item, owner: item.owner, file: item.file, dataUrl: item.dataUrl, text: item.text, multipart: item.multipart, async: item.async }, requestOptions));\n    // return the newly created item id\n    return createResult;\n}\n\nfunction delay(milliseconds) {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n/**\n * Helper function which takes an itemId and checks the status\n * of the item every 2 seconds until it is either complete or failed.\n *\n * @export\n * @param {string} itemId AGO item id\n * @param {IUserRequestOptions} requestOptions\n */\nasync function _waitForItemReady(itemId, requestOptions, milliseconds) {\n    let statusResult;\n    do {\n        await delay(milliseconds || /* istanbul ignore next: slows down tests */ 2000);\n        statusResult = await getItemStatus(Object.assign({ id: itemId }, requestOptions));\n        if (statusResult.status === \"failed\") {\n            throw new Error(statusResult.statusMessage);\n        }\n    } while (statusResult.status !== \"completed\");\n}\n\n/**\n * Creates an item in online from either url or file.\n * Once created we wait for the item to be ready (or throw an error if creation failed)\n * If access is not private then we make a call to update that.\n *\n * @export\n * @param {ICreateItemFromUrlOrFileOptions} createItemFromUrlOrFileOptions Input params (item, groups?, requestoptions)\n * @return {*}  {\n *     title: string,\n *     createdItem: ICreateItemResponse,\n *     itemAccessResponse: ISharingResponse,\n *     itemSharingResponse: ISharingResponse[]\n *   } Responses from createdItem, changing item access, and item Sharing to group\n */\nasync function createItemFromUrlOrFile(createItemFromUrlOrFileOptions) {\n    const { item, groups } = createItemFromUrlOrFileOptions, userRequestOptions = __rest(createItemFromUrlOrFileOptions, [\"item\", \"groups\"]);\n    // Is there a file or data url?\n    const shouldWaitForItemReady = item.dataUrl || item.file;\n    let createdItem;\n    let itemAccessResponse;\n    let itemSharingResponse;\n    // If there is a file then we create the item and chunk the file\n    // while multithread uploading it\n    if (item.file) {\n        createdItem = await createItemFromFile(item, userRequestOptions);\n        // Otherwise it's being created from a url.\n    }\n    else {\n        createdItem = await createItemFromUrl(item, userRequestOptions);\n    }\n    // If there is a file or data url we want to check to see if / when the item is ready.\n    if (shouldWaitForItemReady) {\n        await _waitForItemReady(createdItem.id, userRequestOptions);\n    }\n    // If the item access is NOT private (which is the sharing access level by default)\n    // We subsequently update the items access level.\n    if (item.access !== \"private\") {\n        itemAccessResponse = await setItemAccess(Object.assign({ id: createdItem.id, owner: item.owner, access: item.access }, userRequestOptions));\n    }\n    // If group ids were passedd in then make share calls to each.\n    if (groups === null || groups === void 0 ? void 0 : groups.length) {\n        const failSafeShare = failSafe(shareItemWithGroup);\n        itemSharingResponse = await Promise.all(groups.map((group) => failSafeShare(Object.assign({ id: createdItem.id, owner: item.owner, groupId: group.id, confirmItemControl: isUpdateGroup(group) }, userRequestOptions))));\n    }\n    return {\n        title: item.title,\n        createdItem,\n        itemAccessResponse,\n        itemSharingResponse,\n    };\n}\n\nconst arcgisHubFileUploadManagerCss = \":host{display:flex;width:80%;flex-direction:column}.button-container{margin-top:0.5rem;display:flex;width:100%;flex-direction:row;justify-content:flex-end;padding-top:1.25rem}calcite-button:first-child{margin-right:4px}.separator{display:flex;align-items:center;text-align:center}.separator::before,.separator::after{flex:1 1 0%;border-width:1px;border-top-width:0px;border-right-width:0px;border-left-width:0px;border-style:solid;border-color:var(--calcite-ui-border-input);--tw-content:'';content:var(--tw-content)}.separator:not(:empty)::before{margin-right:0.25rem}.separator:not(:empty)::after{margin-left:0.25rem}arcgis-hub-file-select{margin-bottom:1rem}arcgis-hub-url-content-form{margin-top:2rem}arcgis-hub-groups-sharing{margin-top:1.25rem}.hide{display:none}.duplicate-file-name{margin-top:40px;display:flex;flex-direction:column;align-items:center;gap:0.25rem}.duplicate-file-name-span{width:80%;font-size:18px;margin-top:40px;margin-bottom:50px}calcite-icon{height:75px;width:75px;color:var(--calcite-ui-danger)}\";\n\n// ENUM for what stage we are currently on.\nvar STAGE;\n(function (STAGE) {\n  STAGE[\"ITEM\"] = \"item\";\n  STAGE[\"METADATA\"] = \"metadata\";\n  STAGE[\"SHARING\"] = \"sharing\";\n  STAGE[\"CREATING\"] = \"creating\";\n  STAGE[\"COMPLETE\"] = \"complete\"; // Completion state\n})(STAGE || (STAGE = {}));\nconst ArcgisHubFileUploadManager = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.arcgisHubItemCreationState = createEvent(this, \"arcgisHubItemCreationState\", 7);\n    this.arcgisHubFileUploadManagerStageChange = createEvent(this, \"arcgisHubFileUploadManagerStageChange\", 7);\n    this.arcgisHubFileOrUrlValid = createEvent(this, \"arcgisHubFileOrUrlValid\", 7);\n    /**\n     * Portal url. If `context` is not passed in,\n     * then a `context` will be created using the portal\n     * value.\n     * Should not have /sharing/rest on the end\n     * defaults to https://www.arcgis.com\n     */\n    this.portal = \"https://www.arcgis.com\";\n    /**\n     * File types that the file picker allows. By default we use the below, but it can be overridden\n     * if needed.\n     *\n     * @type {IAllowedFileTypes}\n     * @memberof ArcgisHubFileUploadManager\n     */\n    this.allowedFileTypes = {\n      types: [ItemType.Image, ItemType[\"Microsoft Word\"], ItemType[\"Microsoft Excel\"], ItemType[\"Microsoft Powerpoint\"]],\n      extensions: [FileExtension.pdf, FileExtension.csv]\n    };\n    /**\n     * Should Back/Next/Save be shown or no?\n     * If no then utilize methods for going back/forward in stages and\n     * to save/create the item\n     *\n     * @memberof ArcgisHubFileUploadManager\n     */\n    this.showButtons = false;\n    /**\n     * Tracks what stage we are on.\n     *\n     * @type {STAGE}\n     * @memberof ArcgisHubFileUploadManager\n     */\n    this.stage = STAGE.ITEM;\n    // Internal tracking of metadata values.\n    this.metadataValues = {};\n    // Has the second stage been completed or not?\n    this.secondStageComplete = false;\n    // Should the third stage be disabled or no?\n    this.thirdStageDisabled = true;\n    bind(this, 'setStepperEl', 'setFileSelectEl', '_moveToNextStage', 'nextStage', '_moveToPreviousStage', 'previousStage');\n  }\n  async componentWillLoad() {\n    // attach intl\n    this.intl = await intlManager.loadIntlForComponent(this.el);\n    // create a default context from the portal property\n    // this allows us to get other props. Note that we don't store\n    // the context itself, just it's state, which is an IArcGISContextState\n    if (!this.context && this.portal) {\n      const ctx = await ArcGISContextManager.create({ portalUrl: this.portal });\n      this.context = ctx.context;\n    }\n  }\n  async componentWillRender() {\n    // get and set the default extent in the proper projection if it's not already set\n    if ((this.context && this.context.portal) && !this.defaultExtent) {\n      this.defaultExtent = await getGeographicOrgExtent(this.context.hubRequestOptions);\n    }\n  }\n  async onPortalChange() {\n    // Update the context by creating a context manager and getting the context\n    const ctx = await ArcGISContextManager.create({ portalUrl: this.portal });\n    this.context = ctx.context;\n    // changing the context should fire the watch for that property thus re-running the search\n  }\n  async onStageChange() {\n    // If we are going back to the first stage\n    // AND we have a file selected\n    // We want to clear it out\n    if (this.stage === STAGE.ITEM && this.itemSource === 'file') {\n      // clear out selected item\n      this.selectedItem = undefined;\n      this.fileSelectElement.clearSelectedFile();\n      // clear out item source\n      this.itemSource = undefined;\n      // mark second stage incomplete\n      this.secondStageComplete = false;\n      // disable third stage\n      this.thirdStageDisabled = true;\n      // reset duplicate file id\n      this.duplicateFileId = undefined;\n    }\n    // If we are on the second stage && there's a file.\n    if (this.stage === STAGE.METADATA && this.selectedItem.file) {\n      // Get the item\n      const item = this.selectedItem;\n      // check name dupe\n      const existingFileResults = await searchItems({\n        q: `owner:${this.context.currentUser.username} ownerfolder:root type:${item.type}`,\n        // We need to replace spaces with underscores otherwise it will not work\n        // We double quote the name for characters such as (. Double quotes still do not allow spaces in the filename.\n        filter: `item:\"${item.file.name.split(' ').join('_')}\"`,\n        authentication: this.context.session\n      });\n      // if there's any results... then a file with the same name exists\n      if (existingFileResults.results.length) {\n        // set duplicate file id\n        this.duplicateFileId = existingFileResults.results[0].id;\n        // disable third stage\n        this.thirdStageDisabled = true;\n        // Emit out a invalid file state\n        this.arcgisHubFileOrUrlValid.emit({ valid: false, source: 'file' });\n      }\n      else {\n        // Otherwise enable third stage.\n        this.thirdStageDisabled = false;\n      }\n    }\n    this.arcgisHubFileUploadManagerStageChange.emit(this.stage);\n  }\n  handleCalciteStepperChangeEvent(event) {\n    // DO NOT stop propogation of event. It will cause issues with the stepper\n    // internally setting the step / prevent nextStep && prevStep from working\n    // event.stopPropagation();\n    // Get position out of event\n    const { detail: { position } } = event;\n    // Translate position to Stage.\n    switch (position) {\n      case 0:\n        this.stage = STAGE.ITEM;\n        break;\n      case 1:\n        this.stage = STAGE.METADATA;\n        break;\n      case 2:\n        this.stage = STAGE.SHARING;\n    }\n  }\n  handleFileSelected(event) {\n    // Stop propogation\n    event.stopPropagation();\n    // Get item\n    const item = event.detail;\n    // assign item to state\n    this.selectedItem = item;\n    // note it came from file.\n    this.itemSource = 'file';\n    // set metadata values\n    this.metadataValues = { title: item.title };\n    // move to next step\n    setTimeout(this._moveToNextStage, 100);\n    // emit file status\n    this.arcgisHubFileOrUrlValid.emit({ valid: true, source: 'file' });\n  }\n  handleUrlValidation(event) {\n    // Stop propogation\n    event.stopPropagation();\n    // get item from event\n    const item = event.detail;\n    // If there's a type...\n    if (item.type) {\n      this.selectedItem = item;\n      // note it came from url\n      this.itemSource = 'url';\n      // set metadata values\n      this.metadataValues = { title: item.title };\n      // emit url status\n      this.arcgisHubFileOrUrlValid.emit({ valid: true, source: 'url' });\n    }\n    else {\n      // emit url invalid status\n      this.arcgisHubFileOrUrlValid.emit({ valid: false, source: 'url' });\n    }\n  }\n  handleItemTypeSelection(event) {\n    // Stop propogation\n    event.stopPropagation();\n    // get item from event\n    const item = event.detail;\n    // assign item to state\n    this.selectedItem = item;\n    // Note it came from url\n    this.itemSource = 'url';\n    // set metadata values\n    this.metadataValues = { title: item.title };\n    // emit url status\n    this.arcgisHubFileOrUrlValid.emit({ valid: true, source: 'url' });\n  }\n  mergeMetadataValuesWithItem(event) {\n    // Stop propogation\n    event.stopPropagation();\n    // get values/valid/item\n    const { values, valid } = event.detail;\n    const item = this.selectedItem;\n    // If valid..\n    if (valid) {\n      // merge in changes\n      this.selectedItem = Object.assign({}, item, values);\n      // activate third stage if we are on the right stage\n      this.thirdStageDisabled = false;\n      // mark second stage complete\n      this.secondStageComplete = true;\n      // emit valid/invalid status\n      this.arcgisHubFileOrUrlValid.emit({ valid: true, source: this.itemSource });\n    }\n    else {\n      // ensure they can't move on to the third stage\n      this.thirdStageDisabled = true;\n      // emit valid/invalid status\n      this.arcgisHubFileOrUrlValid.emit({ valid: false, source: this.itemSource });\n    }\n  }\n  updateSelectedGroups(event) {\n    // Stop propogation\n    event.stopPropagation();\n    // extract groups\n    const groups = event.detail.share;\n    // updated selected groups\n    this.selectedGroups = groups;\n  }\n  updateAccessLevel(event) {\n    // Stop propogation\n    event.stopPropagation();\n    // extract access level\n    const accessLevel = event.detail;\n    // update item\n    this.selectedItem.access = accessLevel;\n  }\n  /**\n   * Move forward a stage, or create item if we are at the sharing stage.\n   *\n   * @memberof ArcgisHubFileUploadManager\n   */\n  async nextStage() {\n    const { stage, selectedItem, selectedGroups } = this;\n    // Handle basic forward in stepper\n    if (stage === STAGE.ITEM || stage === STAGE.METADATA) {\n      this._moveToNextStage();\n    }\n    // Save / create the item\n    if (stage === STAGE.SHARING) {\n      const typeAccessAndGroups = {\n        type: selectedItem.type,\n        access: selectedItem.access,\n        groups: this.selectedGroups.map(group => group.id)\n      };\n      // Try\n      try {\n        // Shift to creating stage.\n        this.stage = STAGE.CREATING;\n        const authentication = this.context.session;\n        // Create item.\n        const createdItem = await createItemFromUrlOrFile({\n          item: selectedItem,\n          groups: selectedGroups,\n          authentication\n        });\n        // When complete shift to complete stage.\n        this.stage = STAGE.COMPLETE;\n        // Emit the new item\n        this.arcgisHubItemCreationState.emit(Object.assign(Object.assign({}, typeAccessAndGroups), createdItem));\n      }\n      catch (err) {\n        this.stage = STAGE.COMPLETE;\n        this.arcgisHubItemCreationState.emit(Object.assign({ title: selectedItem.title, createdItem: { id: undefined, success: false, folder: undefined }, itemAccessResponse: undefined, itemSharingResponse: undefined }, typeAccessAndGroups));\n      }\n    }\n  }\n  /**\n   * Move back a stage.\n   *\n   * @return {*}  {Promise<void>}\n   * @memberof ArcgisHubFileUploadManager\n   */\n  async previousStage() {\n    // handle basic backwards in stepper\n    if (this.stage === STAGE.METADATA || this.stage === STAGE.SHARING) {\n      this._moveToPreviousStage();\n    }\n  }\n  // Internal back for stepper method\n  _moveToPreviousStage() {\n    this.stepperElement.prevStep();\n  }\n  // Internal forward for stepper method\n  _moveToNextStage() {\n    this.stepperElement.nextStep();\n  }\n  // Input element ref\n  setStepperEl(el) {\n    this.stepperElement = el;\n  }\n  // File Select input\n  setFileSelectEl(el) {\n    this.fileSelectElement = el;\n  }\n  // Render first three stages\n  renderItemStage() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (this.stage !== STAGE.CREATING && this.stage !== STAGE.COMPLETE) {\n      return (h(\"calcite-stepper\", { ref: this.setStepperEl }, h(\"calcite-stepper-item\", {\n        // active\n        complete: !!this.selectedItem, \"item-title\": this.intl.t('firstStepHeader')\n      }, h(\"arcgis-hub-file-select\", { allowedFileTypes: this.allowedFileTypes, defaultExtent: this.defaultExtent, owner: (_a = this.context.currentUser) === null || _a === void 0 ? void 0 : _a.username, portalName: (_b = this.context.portal) === null || _b === void 0 ? void 0 : _b.name, ref: this.setFileSelectEl }), h(\"span\", { class: \"separator\" }, this.intl.t('divider')), h(\"arcgis-hub-url-content-form\", { defaultExtent: this.defaultExtent, owner: (_c = this.context.currentUser) === null || _c === void 0 ? void 0 : _c.username, portalName: (_d = this.context.portal) === null || _d === void 0 ? void 0 : _d.name })), h(\"calcite-stepper-item\", { complete: this.secondStageComplete, disabled: !this.selectedItem, \"item-title\": this.intl.t('secondStepHeader') }, h(\"arcgis-hub-file-metadata-editor\", { class: {\n          hide: !!this.duplicateFileId\n        }, values: this.metadataValues }), h(\"div\", { class: {\n          'duplicate-file-name': !!this.duplicateFileId,\n          hide: !this.duplicateFileId\n        } }, h(\"calcite-icon\", { \"aria-label\": this.intl.t('duplicateFileAriaLabel'), icon: \"x-circle\", scale: \"l\" }), h(\"span\", { class: \"duplicate-file-name-span\" }, this.intl.t('duplicateFileError', { a: (...chunks) => h(\"a\", { href: `${this.context.portalUrl}/home/item.html?id=${this.duplicateFileId}`, target: \"_blank\" }, chunks)\n      })))), h(\"calcite-stepper-item\", { disabled: this.thirdStageDisabled, \"item-title\": this.intl.t('thirdStepHeader') }, h(\"arcgis-hub-access-level-controls\", { \"access-level\": (_e = this.selectedItem) === null || _e === void 0 ? void 0 : _e.access, \"item-type\": (_f = this.selectedItem) === null || _f === void 0 ? void 0 : _f.type, \"org-name\": (_g = this.context.portal) === null || _g === void 0 ? void 0 : _g.name }), h(\"arcgis-hub-groups-sharing\", { groups: this.groups, selectedGroups: this.selectedGroups }))));\n    }\n  }\n  // Render loading state\n  renderCreating() {\n    if (this.stage === STAGE.CREATING) {\n      return (h(\"calcite-loader\", {\n        // active\n        label: this.intl.t('uploading'), scale: \"l\", type: \"indeterminate\"\n      }));\n    }\n  }\n  // Render complete stage slot\n  renderCompleteStage() {\n    if (this.stage === STAGE.COMPLETE) {\n      return (h(\"slot\", null));\n    }\n  }\n  // Render Buttons.\n  renderButtons() {\n    const { selectedItem, showButtons, stage, thirdStageDisabled } = this;\n    if (showButtons && (stage !== STAGE.CREATING && stage !== STAGE.COMPLETE)) {\n      const nextbuttonIntl = stage === STAGE.SHARING ? 'save' : 'next';\n      const nextButtonDisabled = !selectedItem || (stage === STAGE.METADATA && thirdStageDisabled);\n      return (h(\"div\", { class: \"button-container\" }, h(\"calcite-button\", { appearance: \"outline\", disabled: stage === STAGE.ITEM, onClick: this.previousStage }, this.intl.t('back')), h(\"calcite-button\", { appearance: \"solid\", disabled: nextButtonDisabled, onClick: this.nextStage }, this.intl.t(nextbuttonIntl))));\n    }\n  }\n  render() {\n    return (h(Host, null, this.renderItemStage(), this.renderCreating(), this.renderButtons(), this.renderCompleteStage()));\n  }\n  static get assetsDirs() { return [\"locales\"]; }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"portal\": [\"onPortalChange\"],\n    \"stage\": [\"onStageChange\"]\n  }; }\n};\nArcgisHubFileUploadManager.style = arcgisHubFileUploadManagerCss;\n\nexport { ArcgisHubFileUploadManager as arcgis_hub_file_upload_manager };\n","/**\n * Wrap an async function such that it will never reject\n * @param {Function} fn Async Function that we want to never fail\n * @param {Object} resolveWith Object to resolve with in the event of a failure\n */\nfunction failSafe(fn, resolveWith = {}) {\n    return (...args) => {\n        return fn(...args).catch((_) => {\n            return resolveWith;\n        });\n    };\n}\n\nexport { failSafe as f };\n","import { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { r as request } from './request-c15cc2af.js';\n\n/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Get the portal\n * @param requestOptions\n */\nfunction getSelf(requestOptions) {\n    // just delegate to getPortal w/o an id\n    return getPortal(null, requestOptions);\n}\n/**\n * ```js\n * import { getPortal } from \"@esri/arcgis-rest-request\";\n * //\n * getPortal()\n * getPortal(\"fe8\")\n * getPortal(null, { portal: \"https://custom.maps.arcgis.com/sharing/rest/\" })\n * ```\n * Fetch information about the specified portal by id. If no id is passed, portals/self will be called.\n * Note that if you intend to request a portal by id and it is different from the portal specified by options.authentication, you must also pass options.portal.\n * @param id\n * @param requestOptions\n */\nfunction getPortal(id, requestOptions) {\n    // construct the search url\n    var idOrSelf = id ? id : \"self\";\n    var url = getPortalUrl(requestOptions) + \"/portals/\" + idOrSelf;\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    // send the request\n    return request(url, options);\n}\n\nexport { getPortal as a, getSelf as g };\n","import { g as getProp } from './get-prop-d82e4fa6.js';\n\n/**\n * Gets the value of a property from an object with a\n * default if that prop is undefined\n * @param obj\n * @param prop\n * @param def\n */\nfunction getWithDefault(obj, prop, def) {\n    const res = getProp(obj, prop);\n    return res !== undefined ? res : def;\n}\n\nexport { getWithDefault as g };\n","import { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { r as request } from './request-c15cc2af.js';\n\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { getUser } from '@esri/arcgis-rest-portal';\n * //\n * getUser(\"jsmith\")\n *   .then(response)\n * // => { firstName: \"John\", lastName: \"Smith\",tags: [\"GIS Analyst\", \"City of Redlands\"] }\n * ```\n * Get information about a user. This method has proven so generically useful that you can also call [`UserSession.getUser()`](/arcgis-rest-js/api/auth/UserSession#getUser-summary).\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with metadata about the user\n */\nfunction getUser(requestOptions) {\n    var url;\n    var options = { httpMethod: \"GET\" };\n    // if a username is passed, assume ArcGIS Online\n    if (typeof requestOptions === \"string\") {\n        url = \"https://www.arcgis.com/sharing/rest/community/users/\" + requestOptions;\n    }\n    else {\n        // if an authenticated session is passed, default to that user/portal unless another username is provided manually\n        var username = requestOptions.username || requestOptions.authentication.username;\n        url = getPortalUrl(requestOptions) + \"/community/users/\" + encodeURIComponent(username);\n        options = __assign(__assign({}, requestOptions), options);\n    }\n    // send the request\n    return request(url, options);\n}\n\n/**\n * Given an org url, get the portal base url\n *\n * i.e. https://myorg.maps.arcgis.com will return https://www.arcgis.com\n *\n * @param orgUrl\n * @returns\n */\nfunction getPortalBaseFromOrgUrl(orgUrl) {\n    let result = orgUrl;\n    if (orgUrl.match(/(qaext|\\.mapsqa)\\.arcgis.com/)) {\n        result = \"https://qaext.arcgis.com\";\n    }\n    else if (orgUrl.match(/(devext|\\.mapsdevext)\\.arcgis.com/)) {\n        result = \"https://devext.arcgis.com\";\n    }\n    else {\n        /* istanbul ignore else */\n        if (orgUrl.match(/(www|\\.maps)\\.arcgis.com/)) {\n            result = \"https://www.arcgis.com\";\n        }\n    }\n    return result;\n}\n\nexport { getUser as a, getPortalBaseFromOrgUrl as g };\n","/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Determines if a given IGroup is an update group\n * @param {IGroup} group The group to evaluate\n */\nfunction isUpdateGroup(group) {\n    return group.capabilities.includes(\"updateitemcontrol\");\n}\n\nexport { isUpdateGroup as i };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nexport { __rest as _ };\n"],"names":["addItemPart","requestOptions","partNum","Number","isInteger","Promise","reject","Error","determineOwner","then","owner","url","getPortalUrl","id","options","appendCustomParams","params","__assign","request","commitItemUpload","serializeItem","item","cancelItemUpload","chunk","array","size","length","chunks","i","push","slice","addGroupUsers","baseOptions","Object","assign","admins","undefined","users","promises","__spreadArrays","_prepareRequests","map","catch","error","errors","_sendSafeRequest","all","_consolidateRequestResults","type","usernames","_a","_b","_generateRequestOptions","results","notAdded","filter","result","reduce","collection","concat","consolidated","removeGroupUsers","usersToRemove","usersChunk","safeSend","filtered","propName","notRemoved","updateUserMemberships","opts","authentication","newMemberType","shareItemWithGroup","searchOpts","q","groupId","start","num","sortField","httpMethod","searchItems","searchResponse","total","some","itm","isItemSharedWithGroup","isShared","itemId","shortcut","notSharedWith","username","confirmItemControl","itemOwner","isAdmin_1","isCrossOrgSharing_1","getUser","getUserMembership","currentUser","ownerUser","membership","isSharedEditingGroup","role","roleId","orgId","isAdmin","membershipGuarantees","favGroupId","ensureMembership","getMembershipAdjustments","membershipAdjustments","revert","promise","resolve","sharingResults","shareToGroup","sharingResponse","isCrossOrgSharing","groups","shouldPromote","errorMessage","ownerGroups","group","find","g","userMembership","memberType","acc","entry","success","userType","membershipResponse","batch","values","fn","batchSize","toBatches","_batches","value","_batch","toSerialBatchChain","batchOfValues","prevResults","batchResults","batches","_prepareUploadRequests","file","sizeLimit","queue","partIndex","sizeIndex","reverse","createItemFromFile","createItem","filename","name","async","multipart","overwrite","createResult","uploadQueue","extent","isBBox","bboxToString","createItemFromUrl","dataUrl","text","delay","milliseconds","setTimeout","_waitForItemReady","getItemStatus","statusResult","status","statusMessage","createItemFromUrlOrFile","createItemFromUrlOrFileOptions","userRequestOptions","__rest","shouldWaitForItemReady","createdItem","access","setItemAccess","itemAccessResponse","failSafeShare","failSafe","isUpdateGroup","itemSharingResponse","title","STAGE","ArcgisHubFileUploadManager","hostRef","registerInstance","this","arcgisHubItemCreationState","createEvent","arcgisHubFileUploadManagerStageChange","arcgisHubFileOrUrlValid","portal","allowedFileTypes","types","ItemType","extensions","FileExtension","showButtons","stage","ITEM","metadataValues","secondStageComplete","thirdStageDisabled","bind","intlManager","el","intl","context","ArcGISContextManager","portalUrl","ctx","defaultExtent","getGeographicOrgExtent","hubRequestOptions","itemSource","selectedItem","fileSelectElement","clearSelectedFile","duplicateFileId","METADATA","split","join","session","existingFileResults","emit","valid","source","event","detail","position","SHARING","stopPropagation","_moveToNextStage","share","selectedGroups","accessLevel","typeAccessAndGroups","CREATING","COMPLETE","folder","_moveToPreviousStage","stepperElement","prevStep","nextStep","_c","_d","_e","_f","_g","h","ref","setStepperEl","complete","t","portalName","setFileSelectEl","class","disabled","hide","icon","scale","a","href","target","label","nextbuttonIntl","nextButtonDisabled","appearance","onClick","previousStage","nextStage","Host","renderItemStage","renderCreating","renderButtons","renderCompleteStage","getElement","style","resolveWith","_","getSelf","getPortal","idOrSelf","getWithDefault","obj","prop","def","res","getProp","encodeURIComponent","getPortalBaseFromOrgUrl","orgUrl","match","capabilities","includes","s","e","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable"],"sourceRoot":""}