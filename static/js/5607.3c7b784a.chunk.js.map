{"version":3,"file":"static/js/5607.3c7b784a.chunk.js","mappings":"6QAYA,SAASA,IACL,IAAMC,GAAMC,EAAAA,EAAAA,KAWZ,OATAD,EAAIE,KAAK,CAAEC,UAAW,SAAUC,SAAU,gBAC1CJ,EAAIE,KAAK,CAAEC,UAAW,UAAWC,SAAU,iBAC3CJ,EAAIE,KAAK,CAAEC,UAAW,cAAeC,SAAU,qBAC/CJ,EAAIE,KAAK,CACLC,UAAW,eACXC,SAAU,+BAEdJ,EAAIE,KAAK,CAAEC,UAAW,WAAYC,SAAU,kBAC5CJ,EAAIE,KAAK,CAAEC,UAAW,WAAYC,SAAU,kBACrCJ,CACX,CAUA,SAASK,EAAaC,EAAOC,EAAYC,GACrC,IAAIC,EACAC,EACAF,EAAeG,iBAEfD,EADgBF,EAAeG,eACfD,OAYpB,OATAH,EAAWK,cAAeC,EAAAA,EAAAA,GAAoBP,EAAMQ,KAAMN,EAAgBE,GAE1EH,EAAWQ,YAAc,IAAIC,KAAKV,EAAMQ,KAAKG,SAC7CV,EAAWW,kBAAoB,eAC/BX,EAAWY,YAAc,IAAIH,KAAKV,EAAMQ,KAAKM,UAC7Cb,EAAWc,kBAAoB,gBAE/Bd,EAAWe,cAAeC,EAAAA,EAAAA,IAA0D,QAA9Bd,EAAKH,EAAMkB,KAAKC,gBAA6B,IAAPhB,OAAgB,EAASA,EAAGa,eAAiB,CAAC,EAAGI,EAAAA,GAEtInB,CACX,CAGA,SAMeoB,EAAiB,EAAD,kCAoB/B,aADC,OACD,0BApBA,WAAgCpB,EAAYC,GAAc,qGAE9BoB,EAAAA,EAAAA,GAAc,CAAEC,KAAMtB,EAAWsB,KAAMC,WAAYvB,EAAWwB,IAAMvB,GAAe,OAA5F,OAAfD,EAAWsB,KAAO,EAAH,eAEKG,EAAAA,EAAAA,GAASzB,EAAWwB,GAAIvB,GAAe,OAO3D,OAPMF,EAAQ,EAAH,KAEL2B,EAAS,IAAIC,EAAAA,EAAenC,KAI5BoC,EAAgBF,EAAOG,cAAc7B,EAAYD,GACvD,WAC2B+B,EAAAA,EAAAA,GAAYF,EAAe3B,GAAe,QAKrE,OALM8B,EAAe,EAAH,KAEdC,EAAoBN,EAAOO,cAAcF,EAAc/B,GAC3DgC,EAAoBlC,EAAaC,EAAOiC,EAAmB/B,GAE3D,kBACO+B,GAAiB,6CAC3B,sBAOD,SAASE,EAAgBC,EAAYlC,GASjC,QAPImC,EAAAA,EAAAA,GAAOD,IAEGE,EAAAA,EAAAA,GAAQF,EAAYlC,IAGpBqC,EAAAA,EAAAA,GAAcH,EAAYlC,IAEzBsC,MAAK,SAAChC,GACjB,OAAKA,EAKb,SAQuC,EAAD,kCAXvBiC,CAAwBjC,EAAMN,GAD1B,IAEf,GACJ,CASsC,aAKrC,OALqC,0BAAtC,WAAuCM,EAAMN,GAAc,iGACnCwC,EAAAA,EAAAA,GAAmBlC,EAAMN,GAAe,OAEjB,OAFrCF,EAAQ,EAAH,KACL2B,EAAS,IAAIC,EAAAA,EAAenC,KAC5BkD,EAAMhB,EAAOO,cAAclC,EAAO,CAAC,GAAE,kBACpCD,EAAaC,EAAO2C,EAAKzC,IAAe,4CAClD,sB,6HC9GD,IAAMkB,EAAgC,CAClCwB,UAAU,EACVC,SAAS,EACT1B,UAAU,GAQR2B,EAAkC,CACpC,CACIC,OAAQ,aACRC,WAAY,WACZC,YAAa,CAAC,wBAElB,CACIF,OAAQ,aACRC,WAAY,UACZC,YAAa,CAAC,wBAElB,CACIF,OAAQ,aACRC,WAAY,WACZC,YAAa,CAAC,yBAQhBC,EAAwB,CAC1B,wBACA,wBACA,sBACA,uBAMEC,EAA+B,CACjC,CACIC,WAAY,wBACZC,WAAY,CAAC,YACbC,eAAe,EACfC,WAAY,CAAC,0BACbC,SAAU,CAAC,gBAEf,CACIJ,WAAY,sBACZC,WAAY,CAAC,YACbC,eAAe,EACfE,SAAU,CAAC,gBAEf,CACIJ,WAAY,sBACZE,eAAe,EACfD,WAAY,CAAC,YACbI,YAAY,EACZD,SAAU,CAAC,gBAEf,CACIJ,WAAY,wBACZE,eAAe,EACfD,WAAY,CAAC,YACbK,aAAa,EACbF,SAAU,CAAC,gB,kLChCbG,G,kMAAuB,WAC3B,WAAYC,IAAS,gBACnBC,EAAAA,EAAAA,GAAiBC,KAAMF,EACzB,CAuGI,OAvGH,kFACD,mGACoBG,EAAAA,EAAAA,qBAAiCD,KAAKE,SAAQ,OAAvD,OAATF,KAAKG,KAAO,EAAH,cACHH,KAAKI,cAAa,gDACzB,kDAJA,IAKD,kEAKA,yFAC2B,IAArBC,EAAUL,KAAKf,UACHe,KAAK1B,WAAU,gBAEP,GADtB0B,KAAKM,WAAY,EAAK,KACZN,KAAKO,SAAO,sCAAUC,EAAAA,EAAAA,GAAeR,KAAKS,KAAMT,KAAK1B,WAAY0B,KAAKO,SAAQ,0BAAxFF,EAAU,EAAH,UAETL,KAAKM,WAAaN,KAAKO,QACvBP,KAAKK,QAAUA,EAAQ,iDACxB,kDAbD,IAcA,wBAIA,SAAWK,GACT,OAAOV,KAAKG,KAAKQ,WAAWD,EAAM,CAAEE,MAAO,QAASC,IAAK,UAAWC,KAAM,WAC5E,GACA,0BAGA,WACE,IAAIC,EACEC,EAAShB,KAAKK,QAAQW,OAC5B,OAAQA,GACN,IAAK,SACHD,EAAO,QACP,MACF,IAAK,MACHA,EAAO,eACP,MACF,IAAK,SACHA,EAAO,QACP,MACF,IAAK,UACHA,EAAO,OAGX,IAAME,EAAWjB,KAAKG,KAAKe,EAAE,sBAAD,OAAuBF,EAAM,aACnDP,EAAOT,KAAKS,KAAOT,KAAKS,MAAOU,EAAAA,EAAAA,GAAkBnB,KAAKK,SAC5D,MAAO,CACLU,KAAAA,EACAK,MAAOpB,KAAKG,KAAKe,EAAE,gBAAD,OAAiBF,IAGnCK,YAAarB,KAAKG,KAAKe,EAAE,sBAAD,OAAuBF,EAAM,YAAIP,QAAQa,EAAW,CAAEL,SAAAA,IAElF,GACA,6BAGA,WACE,MAAO,CAAEF,KAAM,WACbK,MAAOpB,KAAKW,WAAWX,KAAKK,QAAQ1D,aACpC0E,YAAarB,KAAKG,KAAKe,EAAE,aAE7B,GACA,2BAGA,WACE,MAAO,CAAEH,KAAM,gBACbK,MAAOpB,KAAKW,WAAWX,KAAKK,QAAQtD,aACpCsE,YAAarB,KAAKG,KAAKe,EAAE,eAE7B,GACA,oBAKA,WACE,MAAO,CACLlB,KAAKuB,eACLvB,KAAKwB,kBACLxB,KAAKyB,gBAET,GAAC,4BAMD,SAAeC,GACb,OAAQC,EAAAA,EAAAA,GAAE,gBAAiB,CAAEN,YAAaK,EAASL,YAAaO,QAASF,EAASN,QAASO,EAAAA,EAAAA,GAAE,eAAgB,CAAEZ,KAAMW,EAASX,KAAMc,MAAO,IAAKC,KAAM,SACxJ,GAAC,oBACD,WAAS,WACP,OAAQ9B,KAAKM,WACTqB,EAAAA,EAAAA,GAAE,yBAA0B,CAAEI,QAAQ,EAAMC,MAAO,oBAAqBC,KAAM,EAAG,eAAgB,UACjGN,EAAAA,EAAAA,GAAEO,EAAAA,EAAM,CAAE,eAAgB,mBAAqBlC,KAAK0B,SAAS9F,KAAI,SAAA8F,GAAQ,OAAI,EAAKS,eAAeT,EAAS,IAChH,GAAC,mBAED,WAAgB,OAAOU,EAAAA,EAAAA,GAAWpC,KAAO,IAAC,uBAD1C,WAA0B,MAAO,CAAC,UAAY,GAAC,oBAE/C,WAAwB,MAAO,CAC7B,QAAW,CAAC,eACX,KAAC,EA1GuB,IA4G7BH,EAAwBwC,MA9GW,mF,2OC7BnC,SAMeC,EAAa,EAAD,kCAe3B,aADC,OACD,0BAfA,WAA4BhE,EAAYlC,GAAc,4EAQjD,OAJGmG,GAFAhE,EAAAA,EAAAA,GAAOD,IAEGE,EAAAA,EAAAA,GAAQF,EAAYlC,IAGpBqC,EAAAA,EAAAA,GAAcH,EAAYlC,GACvC,kBACMmG,EAAQ7D,MAAK,SAAChC,GACjB,OAAKA,EAEE8F,EAAqB9F,EAAMN,GADvB,IAEf,KAAE,4CACL,+BAScoG,EAAqB,EAAD,kCASnC,aADC,OACD,0BATA,WAAoC9F,EAAMN,GAAc,iGAChCwC,EAAAA,EAAAA,GAAmBlC,EAAMN,GAAe,OAAjD,OAALF,EAAQ,EAAH,eAEauG,EAAAA,EAAAA,GAAoB/F,EAAMgG,EAAAA,EAAmBtG,GAAe,OAGzC,OAH3CF,EAAMyG,UAAY,EAAH,KAET9E,EAAS,IAAIC,EAAAA,GAAenC,EAAAA,EAAAA,MAC5BkD,EAAMhB,EAAOO,cAAclC,EAAO,CAAC,GAAE,mBACpCD,EAAAA,EAAAA,GAAaC,EAAO2C,EAAKzC,IAAe,4CAClD,+BAScwG,EAA0B,EAAD,iDA+CvC,OA/CuC,0BAAxC,WAAyClG,EAAMmG,EAASzG,GAAc,kFAgCjD,GA9BX0G,EAAS,CACX9B,OAAQtE,EAAKsE,OACbrD,GAAIjB,EAAKiB,GACT8C,KAAM/D,EAAK+D,KACXsC,KAAMrG,EAAK0E,MACX4B,MAAOtG,EAAKsG,MACZC,aAAcvG,EAAKuG,aACnBC,KAAMxG,EAAKwG,KACXC,WAAYzG,EAAKyG,WACjBC,QAAS1G,EAAK2G,SAAW3G,EAAK2E,YAC9B1E,YAAa,IAAIC,KAAKF,EAAKG,SAC3BC,kBAAmB,eACnBC,YAAa,IAAIH,KAAKF,EAAKM,UAC3BC,kBAAmB,gBACnBqG,QAAQC,EAAAA,EAAAA,GAAU7G,EAAK+D,MACvB+C,MAAO,CACHC,KAAM,kBACNC,aAAc,kBACdC,UAAW,oBAMnBd,EAAU,UAFO,IAEO,OAAGA,IAASe,OAAOC,EAAAA,GAErCC,EAAQjB,EAAQjH,IAAImI,EAAAA,GAEpBC,GAAcC,EAAAA,EAAAA,GAAM,aAAcH,GAAOF,OAAOC,EAAAA,GAElDK,EAAW,CAAC,GACZF,EAAYG,OAAQ,CAAF,iCAEDC,EAAAA,EAAAA,GAAqB1H,EAAMsH,EAAa5H,GAAe,OAAxE8H,EAAW,EAAH,aAU6E,OAPzFJ,EAAMO,SAAQ,SAACC,GACXxB,EAAOwB,EAAKC,OAAQC,EAAAA,EAAAA,GAAQN,EAAUI,EAAKG,KAC/C,IAGA3B,EAAOU,MAAMG,WAAYlH,EAAAA,EAAAA,GAAoBC,EAAMN,GACnD0G,EAAOU,MAAMC,MAAOiB,EAAAA,EAAAA,GAAe5B,EAAOnF,GAAIvB,GAC9C0G,EAAOU,MAAME,cAAeiB,EAAAA,EAAAA,GAAkB7B,EAAOrC,KAAMqC,EAAOnF,GAAIjB,EAAKuG,cAAc,kBAClFH,GAAM,6CAChB,sB,kHCrGD,SAOetC,EAAe,EAAD,iDAgB5B,OAhB4B,0BAA7B,WAA8BC,EAAMnC,EAAYiC,GAAO,iFAE3CE,EAAI,OACH,YADG,KACM,EAGT,SAHS,KAGH,EAGN,eAHM,KAGM,GAGZ,SAHY,KAGN,oCARQ6B,EAAAA,EAAAA,GAAahE,EAAYiC,EAAQnE,gBAAe,OAGA,OAGG,QAA5D,OAAN0G,EAAS,EAAH,0BANA,wBAGS8B,EAAAA,EAAAA,GAAUtG,EAAYiC,EAAQsE,mBAAvC,0BAGSxG,EAAAA,EAAAA,GAAgBC,EAAYiC,EAAQnE,gBAA7C,cAGA,IAAI0I,MAAM,6BAA4B,iCAE7ChC,GAAM,6CAChB,sB,uECnBD,SAAS4B,EAAeK,EAAQC,GAC5B,IAAMC,GAAYC,EAAAA,EAAAA,GAAaF,GAC/B,MAAO,GAAP,OAAUC,EAAS,8BAAsBF,EAC7C,C,wBCJA,SAAS5D,EAAkBlC,GACvB,IAAIwB,EACJ,OAAQxB,EAAOwB,MACX,IAAK,uBACL,IAAK,mBACDA,EAAO,OACP,MACJ,IAAK,WACL,IAAK,YACDA,EAAO,OACP,MACJ,IAAK,cACDA,EAAO,UACP,MACJ,IAAK,iBACDA,EAAO,aAGf,OAAOA,CACX,C","sources":["../node_modules/@esri/hub-components/dist/esm/HubInitiatives-caeefcab.js","../node_modules/@esri/hub-components/dist/esm/InitiativeBusinessRules-04858900.js","../node_modules/@esri/hub-components/dist/esm/arcgis-hub-entity-metadata.entry.js","../node_modules/@esri/hub-components/dist/esm/fetch-a8e38b36.js","../node_modules/@esri/hub-components/dist/esm/fetchHubEntity-7424e794.js","../node_modules/@esri/hub-components/dist/esm/get-item-home-url-9ff2898b.js","../node_modules/@esri/hub-components/dist/esm/getTypeFromEntity-332e6f28.js"],"sourcesContent":["import { g as getBasePropertyMap, p as processEntityCapabilities, a as getItemBySlug, f as fetchModelFromItem, P as PropertyMapper, b as getUniqueSlug, c as getModel, d as updateModel } from './getPropertyMap-598a7bb8.js';\nimport { c as InitiativeDefaultCapabilities } from './InitiativeBusinessRules-04858900.js';\nimport { a as getItemThumbnailUrl } from './get-item-thumbnail-url-7e5ae2fd.js';\nimport { i as isGuid } from './is-guid-8127621d.js';\nimport { g as getItem } from './get-f2cd18e7.js';\n\n/**\n * Returns an Array of IPropertyMap objects\n * that define the projection of properties from a IModel to an IHubProject\n * @returns\n * @private\n */\nfunction getPropertyMap() {\n    const map = getBasePropertyMap();\n    // Type specific mappings\n    map.push({ objectKey: \"status\", modelKey: \"data.status\" });\n    map.push({ objectKey: \"catalog\", modelKey: \"data.catalog\" });\n    map.push({ objectKey: \"permissions\", modelKey: \"data.permissions\" });\n    map.push({\n        objectKey: \"capabilities\",\n        modelKey: \"data.settings.capabilities\",\n    });\n    map.push({ objectKey: \"contacts\", modelKey: \"data.contacts\" });\n    map.push({ objectKey: \"timeline\", modelKey: \"data.timeline\" });\n    return map;\n}\n\n/**\n * Given a model and an Initiative, set various computed properties that can't be directly mapped\n * @private\n * @param model\n * @param initiative\n * @param requestOptions\n * @returns\n */\nfunction computeProps(model, initiative, requestOptions) {\n    var _a;\n    let token;\n    if (requestOptions.authentication) {\n        const session = requestOptions.authentication;\n        token = session.token;\n    }\n    // thumbnail url\n    initiative.thumbnailUrl = getItemThumbnailUrl(model.item, requestOptions, token);\n    // Handle Dates\n    initiative.createdDate = new Date(model.item.created);\n    initiative.createdDateSource = \"item.created\";\n    initiative.updatedDate = new Date(model.item.modified);\n    initiative.updatedDateSource = \"item.modified\";\n    // Handle capabilities\n    initiative.capabilities = processEntityCapabilities(((_a = model.data.settings) === null || _a === void 0 ? void 0 : _a.capabilities) || {}, InitiativeDefaultCapabilities);\n    // cast b/c this takes a partial but returns a full object\n    return initiative;\n}\n\n// Note - we separate these imports so we can cleanly spy on things in tests\n/**\n * @private\n * Update a Hub Initiative\n * @param initiative\n * @param requestOptions\n */\nasync function updateInitiative(initiative, requestOptions) {\n    // verify that the slug is unique, excluding the current initiative\n    initiative.slug = await getUniqueSlug({ slug: initiative.slug, existingId: initiative.id }, requestOptions);\n    // get the backing item & data\n    const model = await getModel(initiative.id, requestOptions);\n    // create the PropertyMapper\n    const mapper = new PropertyMapper(getPropertyMap());\n    // Note: Although we are fetching the model, and applying changes onto it,\n    // we are not attempting to handle \"concurrent edit\" conflict resolution\n    // but this is where we would apply that sort of logic\n    const modelToUpdate = mapper.objectToModel(initiative, model);\n    // update the backing item\n    const updatedModel = await updateModel(modelToUpdate, requestOptions);\n    // now map back into an initiative and return that\n    let updatedInitiative = mapper.modelToObject(updatedModel, initiative);\n    updatedInitiative = computeProps(model, updatedInitiative, requestOptions);\n    // the casting is needed because modelToObject returns a `Partial<T>`\n    // where as this function returns a `T`\n    return updatedInitiative;\n}\n/**\n * @private\n * Get a Hub Initiative by id or slug\n * @param identifier item id or slug\n * @param requestOptions\n */\nfunction fetchInitiative(identifier, requestOptions) {\n    let getPrms;\n    if (isGuid(identifier)) {\n        // get item by id\n        getPrms = getItem(identifier, requestOptions);\n    }\n    else {\n        getPrms = getItemBySlug(identifier, requestOptions);\n    }\n    return getPrms.then((item) => {\n        if (!item)\n            return null;\n        return convertItemToInitiative(item, requestOptions);\n    });\n}\n/**\n * @private\n * Convert an Hub Initiative Item into a Hub Initiative, fetching any additional\n * information that may be required\n * @param item\n * @param auth\n * @returns\n */\nasync function convertItemToInitiative(item, requestOptions) {\n    const model = await fetchModelFromItem(item, requestOptions);\n    const mapper = new PropertyMapper(getPropertyMap());\n    const prj = mapper.modelToObject(model, {});\n    return computeProps(model, prj, requestOptions);\n}\n\nexport { fetchInitiative as f, updateInitiative as u };\n","/**\n * Default capabilities for a Initiative. If not listed here, the capability will not be available\n * This hash is combined with the capabilities hash stored in the item data. Regardless of what\n * properties are defined in the item data, only the capabilities defined here will be available\n * @private\n */\nconst InitiativeDefaultCapabilities = {\n    overview: true,\n    details: true,\n    settings: true,\n};\n/**\n * List of all the Initiative Capability Permissions\n * These are considered Hub Business Rules and are not intended\n * to be modified by consumers\n * @private\n */\nconst InitiativeCapabilityPermissions = [\n    {\n        entity: \"initiative\",\n        capability: \"overview\",\n        permissions: [\"hub:initiative:view\"],\n    },\n    {\n        entity: \"initiative\",\n        capability: \"details\",\n        permissions: [\"hub:initiative:edit\"],\n    },\n    {\n        entity: \"initiative\",\n        capability: \"settings\",\n        permissions: [\"hub:initiative:edit\"],\n    },\n];\n/**\n * Initiative Permission Policies\n * These define the requirements any user must meet to perform related actions\n * @private\n */\nconst InitiativePermissions = [\n    \"hub:initiative:create\",\n    \"hub:initiative:delete\",\n    \"hub:initiative:edit\",\n    \"hub:initiative:view\",\n];\n/**\n * Initiative permission policies\n * @private\n */\nconst InitiativePermissionPolicies = [\n    {\n        permission: \"hub:initiative:create\",\n        subsystems: [\"projects\"],\n        authenticated: true,\n        privileges: [\"portal:user:createItem\"],\n        licenses: [\"hub-premium\"],\n    },\n    {\n        permission: \"hub:initiative:view\",\n        subsystems: [\"projects\"],\n        authenticated: false,\n        licenses: [\"hub-premium\"],\n    },\n    {\n        permission: \"hub:initiative:edit\",\n        authenticated: true,\n        subsystems: [\"projects\"],\n        entityEdit: true,\n        licenses: [\"hub-premium\"],\n    },\n    {\n        permission: \"hub:initiative:delete\",\n        authenticated: true,\n        subsystems: [\"projects\"],\n        entityOwner: true,\n        licenses: [\"hub-premium\"],\n    },\n];\n\nexport { InitiativePermissionPolicies as I, InitiativePermissions as a, InitiativeCapabilityPermissions as b, InitiativeDefaultCapabilities as c };\n","import { r as registerInstance, h, H as Host, g as getElement } from './index-0d95d9d4.js';\nimport { i as intlManager } from './intl-manager-821aea3b.js';\nimport { f as fetchHubEntity } from './fetchHubEntity-7424e794.js';\nimport { g as getTypeFromEntity } from './getTypeFromEntity-332e6f28.js';\nimport './index-4e91769f.js';\nimport './HubInitiatives-caeefcab.js';\nimport './getPropertyMap-598a7bb8.js';\nimport './search-3af9e278.js';\nimport './generic-search-069e22da.js';\nimport './get-portal-url-423a76f5.js';\nimport './clean-url-be7c0879.js';\nimport './append-custom-params-fd9b7e72.js';\nimport './request-c15cc2af.js';\nimport './extent-0f42acfc.js';\nimport './get-prop-d82e4fa6.js';\nimport './util-3c40fe6c.js';\nimport './create-7cf3c372.js';\nimport './tslib.es6-3669ad41.js';\nimport './get-f2cd18e7.js';\nimport './get-with-default-6db049d8.js';\nimport './OperationError-85fd80c7.js';\nimport './get-portal-api-url-ccd8fd10.js';\nimport './update-fec93fc5.js';\nimport './fail-safe-1c23dad8.js';\nimport './set-prop-91329c47.js';\nimport './ProjectBusinessRules-bb655b17.js';\nimport './get-item-thumbnail-url-7e5ae2fd.js';\nimport './InitiativeBusinessRules-04858900.js';\nimport './is-guid-8127621d.js';\nimport './fetch-a8e38b36.js';\nimport './_internal-89d3dc92.js';\nimport './helpers-a80c0291.js';\nimport './_enrichments-7716cdcc.js';\nimport './getPortalBaseFromOrgUrl-6a5781aa.js';\nimport './get-portal-06f7947b.js';\nimport './getService-49b539e3.js';\nimport './tslib.es6-b2e8cdb8.js';\nimport './HubSites-95889869.js';\nimport './SiteBusinessRules-05d0a02f.js';\nimport './get-item-home-url-9ff2898b.js';\n\nconst arcgisHubEntityMetadataCss = \":host{display:block}calcite-block{border-block-end-width:0px;margin-bottom:-1rem}\";\n\nconst ArcgisHubEntityMetadata = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  async componentWillLoad() {\n    this.intl = await intlManager.loadIntlForComponent(this.element);\n    await this.fetchEntity();\n  }\n  /**\n   * Fetch entity with the identifier if the entity is not provided\n   * We need to watch the context so when the user is authed we can\n   * fetch again with the available context\n   */\n  async fetchEntity() {\n    let _entity = this.entity;\n    if (!_entity && this.identifier) {\n      this.isLoading = true;\n      _entity = this.context && await fetchHubEntity(this.type, this.identifier, this.context);\n    }\n    this.isLoading = !this.context;\n    this._entity = _entity;\n  }\n  /**\n   * TODO: we should move this to a util instead since it's been used in many places\n   * Convert the date to the \"Month Date, Year\" format\n   */\n  formatDate(date) {\n    return this.intl.formatDate(date, { month: 'short', day: 'numeric', year: 'numeric' });\n  }\n  /**\n   * Get the metadata items for the access metadata field\n   */\n  get accessMetadata() {\n    let icon;\n    const access = this._entity.access;\n    switch (access) {\n      case 'public':\n        icon = 'globe';\n        break;\n      case 'org':\n        icon = 'organization';\n        break;\n      case 'shared':\n        icon = 'users';\n        break;\n      case 'private':\n        icon = 'user';\n        break;\n    }\n    const fallback = this.intl.t(`access.description.${access}.default`);\n    const type = this.type ? this.type : getTypeFromEntity(this._entity);\n    return {\n      icon,\n      title: this.intl.t(`access.label.${access}`),\n      // TODO: once sites and initiatives are decoupled,\n      // make sure the type for initiative is \"initiative\" instead of \"site\"\n      description: this.intl.t(`access.description.${access}.${type}`, undefined, { fallback })\n    };\n  }\n  /**\n   * Get the metadata items for the published date metadata field\n   */\n  get publishedMetadata() {\n    return { icon: 'calendar',\n      title: this.formatDate(this._entity.createdDate),\n      description: this.intl.t('published')\n    };\n  }\n  /**\n   * Get the metadata items for the updated date metadata field\n   */\n  get updatedMetadata() {\n    return { icon: 'clock-forward',\n      title: this.formatDate(this._entity.updatedDate),\n      description: this.intl.t('dateUpdated')\n    };\n  }\n  /**\n   * Build a list of different types of metadata\n   * TODO: in the future we will dynamically build this list based on the view/workspace,\n   * entity types and user preference\n   */\n  get metadata() {\n    return [\n      this.accessMetadata,\n      this.publishedMetadata,\n      this.updatedMetadata\n    ];\n  }\n  ;\n  /**\n   * Render a single metadata item in the metadata field\n   * @param metadata entity medadata\n   */\n  renderMetadata(metadata) {\n    return (h(\"calcite-block\", { description: metadata.description, heading: metadata.title }, h(\"calcite-icon\", { icon: metadata.icon, scale: 'l', slot: \"icon\" })));\n  }\n  render() {\n    return (this.isLoading\n      ? h(\"arcgis-skeleton-loader\", { active: true, class: 'workspace__loader', rows: 3, \"show-heading\": 'true' })\n      : h(Host, { \"data-element\": 'entity-metadata' }, this.metadata.map(metadata => this.renderMetadata(metadata))));\n  }\n  static get assetsDirs() { return [\"locales\"]; }\n  get element() { return getElement(this); }\n  static get watchers() { return {\n    \"context\": [\"fetchEntity\"]\n  }; }\n};\nArcgisHubEntityMetadata.style = arcgisHubEntityMetadataCss;\n\nexport { ArcgisHubEntityMetadata as arcgis_hub_entity_metadata };\n","import { g as getFamily, m as getHubRelativeUrl } from './_internal-89d3dc92.js';\nimport { k as computeProps, a as getItemBySlug, f as fetchModelFromItem, l as fetchModelResources, P as PropertyMapper, h as getPropertyMap, E as EntityResourceMap } from './getPropertyMap-598a7bb8.js';\nimport { f as fetchItemEnrichments } from './_enrichments-7716cdcc.js';\nimport { p as parseInclude } from './HubSites-95889869.js';\nimport { u as unique } from './util-3c40fe6c.js';\nimport { g as getProp } from './get-prop-d82e4fa6.js';\nimport { a as getItemThumbnailUrl } from './get-item-thumbnail-url-7e5ae2fd.js';\nimport { g as getItemHomeUrl } from './get-item-home-url-9ff2898b.js';\nimport { i as isGuid } from './is-guid-8127621d.js';\nimport { g as getItem } from './get-f2cd18e7.js';\nimport { m as mapBy } from './SiteBusinessRules-05d0a02f.js';\n\n/**\n * @private\n * Get a Hub Project by id or slug\n * @param identifier item id or slug\n * @param requestOptions\n */\nasync function fetchProject(identifier, requestOptions) {\n    let getPrms;\n    if (isGuid(identifier)) {\n        // get item by id\n        getPrms = getItem(identifier, requestOptions);\n    }\n    else {\n        getPrms = getItemBySlug(identifier, requestOptions);\n    }\n    return getPrms.then((item) => {\n        if (!item)\n            return null;\n        return convertItemToProject(item, requestOptions);\n    });\n}\n/**\n * @private\n * Convert an Hub Project Item into a Hub Project, fetching any additional\n * information that may be required\n * @param item\n * @param auth\n * @returns\n */\nasync function convertItemToProject(item, requestOptions) {\n    const model = await fetchModelFromItem(item, requestOptions);\n    // Fetch resources based on above obj\n    model.resources = await fetchModelResources(item, EntityResourceMap, requestOptions);\n    // TODO: In the future we will handle the boundary fetching from resource\n    const mapper = new PropertyMapper(getPropertyMap());\n    const prj = mapper.modelToObject(model, {});\n    return computeProps(model, prj, requestOptions);\n}\n/**\n * @private\n * Fetch project specific enrichments\n * @param item\n * @param include\n * @param requestOptions\n * @returns\n */\nasync function enrichProjectSearchResult(item, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: item.access,\n        id: item.id,\n        type: item.type,\n        name: item.title,\n        owner: item.owner,\n        typeKeywords: item.typeKeywords,\n        tags: item.tags,\n        categories: item.categories,\n        summary: item.snippet || item.description,\n        createdDate: new Date(item.created),\n        createdDateSource: \"item.created\",\n        updatedDate: new Date(item.modified),\n        updatedDateSource: \"item.modified\",\n        family: getFamily(item.type),\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // default includes\n    const DEFAULTS = [];\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    if (enrichments.length) {\n        // TODO: Look into caching for the requests in fetchItemEnrichments\n        enriched = await fetchItemEnrichments(item, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    // Handle links\n    // TODO: Link handling should be an enrichment\n    result.links.thumbnail = getItemThumbnailUrl(item, requestOptions);\n    result.links.self = getItemHomeUrl(result.id, requestOptions);\n    result.links.siteRelative = getHubRelativeUrl(result.type, result.id, item.typeKeywords);\n    return result;\n}\n\nexport { enrichProjectSearchResult as e, fetchProject as f };\n","import { f as fetchInitiative } from './HubInitiatives-caeefcab.js';\nimport { f as fetchProject } from './fetch-a8e38b36.js';\nimport { f as fetchSite } from './HubSites-95889869.js';\n\n/**\n * Fetch a Hub entity by identifier (id or slug)\n * @param type\n * @param identifier\n * @param context\n * @returns\n */\nasync function fetchHubEntity(type, identifier, context) {\n    let result;\n    switch (type) {\n        case \"project\":\n            result = await fetchProject(identifier, context.requestOptions);\n            break;\n        case \"site\":\n            result = await fetchSite(identifier, context.hubRequestOptions);\n            break;\n        case \"initiative\":\n            result = await fetchInitiative(identifier, context.requestOptions);\n            break;\n        case \"page\":\n            throw new Error(`FetchPage not implemented`);\n    }\n    return result;\n}\n\nexport { fetchHubEntity as f };\n","import { a as getPortalUrl } from './get-portal-api-url-ccd8fd10.js';\n\n/**\n * Return the URL of the item's page in the Portal Home application\n * @param itemId The item's ID\n * @param portalUrlOrObject a portal base or API URL, a portal object, or request options containing either of those\n * @returns URL to the item's data REST end point, defaults to `https://www.arcgis.com/home/item.html?id={item.id}`\n */\nfunction getItemHomeUrl(itemId, portalUrlOrObject) {\n    const portalUrl = getPortalUrl(portalUrlOrObject);\n    return `${portalUrl}/home/item.html?id=${itemId}`;\n}\n\nexport { getItemHomeUrl as g };\n","// import { HubEntity } from \"./types/HubEntity\";\n// import { HubEntityType } from \"./types/HubEntityType\";\n/**\n * Given a HubEntity, return it's HubEntityType\n * @param entity\n * @returns\n */\nfunction getTypeFromEntity(entity) {\n    let type;\n    switch (entity.type) {\n        case \"Hub Site Application\":\n        case \"Site Application\":\n            type = \"site\";\n            break;\n        case \"Hub Page\":\n        case \"Site Page\":\n            type = \"page\";\n            break;\n        case \"Hub Project\":\n            type = \"project\";\n            break;\n        case \"Hub Initiative\":\n            type = \"initiative\";\n            break;\n    }\n    return type;\n}\n\nexport { getTypeFromEntity as g };\n"],"names":["getPropertyMap","map","getBasePropertyMap","push","objectKey","modelKey","computeProps","model","initiative","requestOptions","_a","token","authentication","thumbnailUrl","getItemThumbnailUrl","item","createdDate","Date","created","createdDateSource","updatedDate","modified","updatedDateSource","capabilities","processEntityCapabilities","data","settings","InitiativeDefaultCapabilities","updateInitiative","getUniqueSlug","slug","existingId","id","getModel","mapper","PropertyMapper","modelToUpdate","objectToModel","updateModel","updatedModel","updatedInitiative","modelToObject","fetchInitiative","identifier","isGuid","getItem","getItemBySlug","then","convertItemToInitiative","fetchModelFromItem","prj","overview","details","InitiativeCapabilityPermissions","entity","capability","permissions","InitiativePermissions","InitiativePermissionPolicies","permission","subsystems","authenticated","privileges","licenses","entityEdit","entityOwner","ArcgisHubEntityMetadata","hostRef","registerInstance","this","intlManager","element","intl","fetchEntity","_entity","isLoading","context","fetchHubEntity","type","date","formatDate","month","day","year","icon","access","fallback","t","getTypeFromEntity","title","description","undefined","accessMetadata","publishedMetadata","updatedMetadata","metadata","h","heading","scale","slot","active","class","rows","Host","renderMetadata","getElement","style","fetchProject","getPrms","convertItemToProject","fetchModelResources","EntityResourceMap","resources","enrichProjectSearchResult","include","result","name","owner","typeKeywords","tags","categories","summary","snippet","family","getFamily","links","self","siteRelative","thumbnail","filter","unique","specs","parseInclude","enrichments","mapBy","enriched","length","fetchItemEnrichments","forEach","spec","prop","getProp","path","getItemHomeUrl","getHubRelativeUrl","fetchSite","hubRequestOptions","Error","itemId","portalUrlOrObject","portalUrl","getPortalUrl"],"sourceRoot":""}