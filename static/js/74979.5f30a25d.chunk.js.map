{"version":3,"file":"static/js/74979.5f30a25d.chunk.js","mappings":"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","sources":["../.yalc/@esri/hub-components/dist/esm/arcgis-hub-new-content.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, F as Fragment, H as Host, g as getElement } from './index-0d95d9d4.js';\nimport { b as bind } from './context-7d8f7366.js';\nimport { i as intlManager } from './intl-manager-821aea3b.js';\nimport { d as dist } from './index-bcc98773.js';\nimport { e as capitalize } from './util-2150bd9e.js';\nimport { c as getGeographicOrgExtent, a as extentToBBox } from './extent-0f42acfc.js';\nimport { c as createProject, g as getHubProjectEditorConfig } from './edit-d086fe2a.js';\nimport './index-4e91769f.js';\nimport './_commonjsHelpers-11ca3be1.js';\nimport './get-prop-d82e4fa6.js';\nimport './request-c15cc2af.js';\nimport './getPropertyMap-7bed72e1.js';\nimport './search-3af9e278.js';\nimport './generic-search-069e22da.js';\nimport './get-portal-url-423a76f5.js';\nimport './clean-url-be7c0879.js';\nimport './append-custom-params-fd9b7e72.js';\nimport './create-7cf3c372.js';\nimport './tslib.es6-3669ad41.js';\nimport './get-f2cd18e7.js';\nimport './get-with-default-6db049d8.js';\nimport './OperationError-85fd80c7.js';\nimport './get-portal-api-url-2391fbac.js';\nimport './update-fec93fc5.js';\nimport './fail-safe-1c23dad8.js';\nimport './set-prop-c51a6d0c.js';\nimport './ProjectBusinessRules-bb655b17.js';\nimport './get-item-thumbnail-url-7608a737.js';\nimport './interpolate-501f9adb.js';\n\nconst arcgisHubNewContentCss = \".sc-arcgis-hub-new-content-h{display:block}.sc-arcgis-hub-new-content-h:not([unthemed]) calcite-dropdown.sc-arcgis-hub-new-content{--calcite-ui-background:#f8f8f8;--calcite-ui-foreground-1:#ffffff;--calcite-ui-foreground-2:#f3f3f3}.sc-arcgis-hub-new-content-h:not([unthemed]) .hub-new-content_dropdown-group.sc-arcgis-hub-new-content{--calcite-ui-brand:var(--calcite-ui-border-1);--calcite-ui-text-1:#151515;--calcite-ui-text-2:#4a4a4a;--calcite-ui-text-3:#6a6a6a;--calcite-ui-border-1:#cacaca;--calcite-ui-border-3:#dfdfdf;--calcite-ui-text-link:#151515;--calcite-link-blue-underline:#151515}.hub-new-content_dropdown-group.sc-arcgis-hub-new-content:not(.mobile){max-width:20rem}.hub-new-content_dropdown-item.sc-arcgis-hub-new-content{display:flex;flex-direction:row;align-items:center;justify-content:space-between;padding-top:0.25rem;padding-bottom:0.25rem}.hub-new-content_dropdown-item--left.sc-arcgis-hub-new-content{display:flex}.hub-new-content_dropdown-item-content.sc-arcgis-hub-new-content{display:flex;flex-direction:column}.hub-new-content_dropdown-item-icon.sc-arcgis-hub-new-content{height:70px;width:70px;margin-right:0.75rem;display:flex;align-items:center;background-color:var(--calcite-ui-background)}.hub-new-content_dropdown-item-icon.sc-arcgis-hub-new-content calcite-icon.sc-arcgis-hub-new-content{width:70px}.hub-new-content_dropdown-item-title.sc-arcgis-hub-new-content,.hub-new-content_dropdown-item-description.sc-arcgis-hub-new-content,calcite-dropdown-item.sc-arcgis-hub-new-content calcite-link.sc-arcgis-hub-new-content{font-family:var(--calcite-sans-family);font-weight:var(--calcite-font-weight-normal);font-size:var(--calcite-font-size--1);line-height:1.375rem;white-space:normal;overflow-wrap:break-word}.hub-new-content_dropdown-item-title.sc-arcgis-hub-new-content{margin-bottom:0.25rem;font-weight:var(--calcite-font-weight-bold);color:var(--calcite-ui-text-1)}.hub-new-content_dropdown-item-description.sc-arcgis-hub-new-content{color:var(--calcite-ui-text-2)}\";\n\nconst ArcgisHubNewContent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.arcgisHubNewContentSuccess = createEvent(this, \"arcgisHubNewContentSuccess\", 7);\n    this.hubTelemetry = createEvent(this, \"hubTelemetry\", 7);\n    /**\n     * array of content entities\n     * @type {IHubNewContentEntity[]}\n     * @memberof ArcgisHubNewContent\n     */\n    this.entities = [];\n    /**\n     * array of resource links to render below\n     * the content create buttons in the dropdown\n     * @type {IHubNewContentResourceLink[]}\n     * @memberof ArcgisHubNewContent\n     */\n    this.resourceLinks = [];\n    /**\n     * optional prop to force button to render as a\n     * dropdown even if there's only a single entity.\n     * If there's more than 1 entity, a dropdown will\n     * render by default\n     * @type {boolean}\n     * @memberof ArcgisHubNewContent\n     */\n    this.renderAsDropdown = false;\n    this.isMobile = false;\n    this.isLoading = false;\n    this.isFormOpen = false;\n    this.isMobileDropdownOpen = false;\n    bind(this, 'onOpenFormButtonClick', 'toggleForm', 'getDynamicProjectConfig', 'createProject', 'onOpenMobileDropdownButtonClick', 'onCloseMobileDropdownButttonClick', 'handleDropdownSelect', 'handleResourceLinkClick', 'handleCalciteDropdownRef');\n  }\n  handleArcgisHubNewContentModalClosed() {\n    this.toggleForm(false);\n    this.selectedEntityIdx = null;\n  }\n  async handleArcgisHubNewContentModalSaved(evt) {\n    let newContent;\n    try {\n      this.isLoading = true;\n      newContent = this.entityFunctions && await this.entityFunctions.create(evt.detail);\n      this.isFormOpen = false;\n      this.arcgisHubNewContentSuccess.emit(newContent);\n      this.hubTelemetry.emit(Object.assign(Object.assign({}, dist.dictionary.category.content.action.create), { response: dist.constants.response.SUCCESS, id: newContent.id, type: newContent.type }));\n    }\n    catch (error) {\n      this.error = error.toString();\n      this.hubTelemetry.emit(Object.assign(Object.assign({}, dist.dictionary.category.content.action.create), { response: dist.constants.response.FAILURE }));\n    }\n    finally {\n      this.isLoading = false;\n    }\n  }\n  get isSingleEntity() {\n    return this.entities.length === 1;\n  }\n  /**\n   * keep track of the selected entity based on what the user\n   * selects from the dropdown menu. Or, if there is only a\n   * single entity, set that as the selected entity\n   */\n  get selectedEntity() {\n    return this.isSingleEntity\n      ? this.entities[0]\n      : this.entities[this.selectedEntityIdx];\n  }\n  get entityKey() {\n    var _a;\n    return (_a = this.selectedEntity) === null || _a === void 0 ? void 0 : _a.key;\n  }\n  /**\n   * returns a collection of entity functions based on the\n   * selected entity. As we continue to support additional\n   * entities in the in-place creation workflow, this\n   * hash will grow\n   */\n  get entityFunctions() {\n    var _a;\n    const entityFunctionMap = {\n      project: {\n        create: this.createProject,\n        getEditorConfig: getHubProjectEditorConfig,\n        getDynamicEditorConfig: this.getDynamicProjectConfig\n      }\n    };\n    return entityFunctionMap[(_a = this.selectedEntity) === null || _a === void 0 ? void 0 : _a.key];\n  }\n  get hasResourceLinks() {\n    return !!this.resourceLinks.length;\n  }\n  async componentWillLoad() {\n    this.intl = await intlManager.loadIntlForComponent(this.element);\n  }\n  handleDropdownSelect(evt) {\n    const el = evt.currentTarget;\n    this.selectedEntityIdx = el.getAttribute('data-index');\n    this.handleSelectedEntity(this.selectedEntity);\n  }\n  handleResourceLinkClick(evt) {\n    const el = evt.currentTarget;\n    const key = el.getAttribute('data-value');\n    const telemetry = dist.dictionary.category.navigation.action.new.label.content.details[key];\n    telemetry && this.hubTelemetry.emit(telemetry);\n  }\n  /**\n   * when an entity is selected from the dropdown, we either\n   * redirect to the entity's provided href, or we open the\n   * creation form in-place\n   */\n  handleSelectedEntity(selectedEntity) {\n    if (selectedEntity.href) {\n      dist.dictionary.category.navigation.action.new.label.content.details[selectedEntity.key]\n        ? this.hubTelemetry.emit(dist.dictionary.category.navigation.action.new.label.content.details[selectedEntity.key])\n        : this.hubTelemetry.emit(dist.dictionary.category.navigation.action.new.label.content);\n    }\n    else {\n      this.toggleForm(true);\n    }\n  }\n  /**\n   * workaround for dropdown scrolling issue. Technically this should be addressed\n   * by passing in the max-items prop to the dropdown, but there are a couple issues\n   * on calcite's end:\n   * https://github.com/Esri/calcite-components/issues/6230\n   * https://github.com/Esri/calcite-components/issues/6242\n   * TODO: remove when calcite issues are addressed\n   */\n  handleCalciteDropdownRef(dropdown) {\n    if (dropdown.shadowRoot && !dropdown.shadowRoot.querySelector('style[data-hub]')) {\n      const style = document.createElement(\"style\");\n      style.dataset.hub = \"\";\n      style.innerHTML = \".calcite-dropdown-content { max-block-size: max-content !important; }\";\n      dropdown.shadowRoot.appendChild(style);\n    }\n  }\n  /**\n   * if an entity has an in-place creation form (rather than a\n   * redirect link), we load and open that form in a modal\n   */\n  async toggleForm(isOpen) {\n    this.isMobileDropdownOpen = false;\n    this.isFormOpen = isOpen;\n    if (isOpen) {\n      try {\n        this.isLoading = true;\n        this.form = await this.loadForm();\n        /**\n         * Note: if we support more entities in this modal workflow,\n         * we will need to add dictionary entries for them that follow\n         * this convension so that we log telemetry when the creation\n         * modal is opened/closed\n         */\n        this.selectedEntity && this.hubTelemetry.emit(isOpen\n          ? dist.dictionary.category.interaction.action.open.label.modal.details[`create${capitalize(this.selectedEntity.key)}`]\n          : dist.dictionary.category.interaction.action.close.label.modal.details[`create${capitalize(this.selectedEntity.key)}`]);\n      }\n      catch (error) {\n        this.error = error.toString();\n      }\n      finally {\n        this.isLoading = false;\n      }\n    }\n  }\n  /**\n   * fetch the entity-specific editor configuration and return\n   * and entity-specific form configuration\n   */\n  async loadForm() {\n    var _a, _b;\n    const { defaults, options } = this.entityFunctions && await this.entityFunctions.getDynamicEditorConfig();\n    const schemas = this.entityFunctions && await this.entityFunctions.getEditorConfig(this.entityKey, 'create', options);\n    const entityFormHash = {\n      project: Object.assign({ title: (_a = this.intl) === null || _a === void 0 ? void 0 : _a.t('project.form.title'), description: (_b = this.intl) === null || _b === void 0 ? void 0 : _b.t('project.form.description'), icon: 'projects', values: Object.assign({}, defaults) }, schemas)\n    };\n    return entityFormHash[this.entityKey];\n  }\n  /**\n   * TODO: I feel like this logic should live on the project class?\n   * i.e. have a ProjectInstance.getEditorConfigOptions and a\n   * ProjectInstance.getEditorDefaults which essentially return\n   * what's returned here. Then we can reference those functions\n   * directly from the entityFunctions like how we call\n   * getEditorConfig directly\n   */\n  async getDynamicProjectConfig() {\n    const defaultExtent = this.context && await getGeographicOrgExtent(this.context.hubRequestOptions);\n    return {\n      defaults: {\n        extent: defaultExtent\n      },\n      options: [\n        {\n          scope: '/properties/extent',\n          options: {\n            sources: [\n              {\n                value: 'none'\n              },\n              {\n                selected: true,\n                value: 'item',\n                label: 'Organizations Extent',\n                graphic: { geometry: Object.assign({ type: 'extent' }, defaultExtent) }\n              }\n            ]\n          }\n        }\n      ]\n    };\n  }\n  onOpenFormButtonClick() {\n    this.toggleForm(true);\n  }\n  onOpenMobileDropdownButtonClick() {\n    this.isMobileDropdownOpen = true;\n  }\n  onCloseMobileDropdownButttonClick() {\n    this.isMobileDropdownOpen = false;\n  }\n  /**\n   * This function encapsulates the logic for creating a project. This does not\n   * yet include any sharing/permissions logic.\n   * Note: when creating this component, there were conflicting opinions on where\n   * this logic should live, i.e. in this component or within the consuming application\n   * (either directly or passed in as part of IHubNewContentEntity). The thought behind having\n   * it live directly within this component was to allow for easier reusability within\n   * opendata-ui; however, this may be something we want to reconsider as we need to scale\n   * this component to accommodate other entities\n   */\n  async createProject(project) {\n    const { extent } = project;\n    project.orgUrlKey = this.context.portal.urlKey;\n    project.extent = extent && extentToBBox(extent);\n    return createProject(project, this.context.userRequestOptions);\n  }\n  /**\n   * render the main \"New\" dropdown button:\n   * - if we're on a mobile device, this will render as a \"+\" button\n   * - if there's only a single entity, and we haven't specified that\n   * it should render as a dropdown, we render a simple calcite button\n   * - if there are multiple entities, we render a calcite dropdown\n   */\n  renderButton(entities, resourceLinks) {\n    let button;\n    if (this.isMobile) {\n      button = h(\"calcite-button\", {\n        // appearance={this.buttonAppearance}\n        // color={this.buttonColor}\n        onClick: this.onOpenMobileDropdownButtonClick, scale: this.buttonScale\n      }, h(\"calcite-icon\", { icon: \"plus\", scale: this.buttonScale }));\n    }\n    else {\n      button = this.isSingleEntity && !this.renderAsDropdown\n        ? h(\"calcite-button\", {\n          // appearance={this.buttonAppearance}\n          // color={this.buttonColor}\n          href: entities[0].href, onClick: this.onOpenFormButtonClick, scale: this.buttonScale\n        }, entities[0].label)\n        : this.renderDropdown(entities, resourceLinks);\n    }\n    return button;\n  }\n  renderDropdown(entities, resourceLinks) {\n    return (h(\"calcite-dropdown\", { ref: this.handleCalciteDropdownRef }, h(\"calcite-button\", { \"icon-end\": \"caret-down\", scale: this.buttonScale, slot: \"dropdown-trigger\" }, this.intl.t('new')), this.renderDropdownContent(entities, resourceLinks)));\n  }\n  renderDropdownContent(entities, resourceLinks) {\n    return (h(Fragment, null, this.renderEntityItems(entities), this.hasResourceLinks && this.renderResourceLinks(resourceLinks)));\n  }\n  renderEntityItems(entities) {\n    return (h(\"calcite-dropdown-group\", { class: { \"hub-new-content_dropdown-group\": true, \"mobile\": this.isMobile }, \"selection-mode\": \"none\" }, entities.map((entity, idx) => this.renderEntityItem(entity, idx))));\n  }\n  renderEntityItem(entity, index) {\n    return (h(\"calcite-dropdown-item\", { \"data-index\": index, \"data-value\": entity.key, href: entity.href, key: entity.key, onClick: this.handleDropdownSelect }, h(\"div\", { class: \"hub-new-content_dropdown-item\" }, h(\"div\", { class: \"hub-new-content_dropdown-item--left\" }, h(\"div\", { class: \"hub-new-content_dropdown-item-icon\" }, h(\"calcite-icon\", { icon: entity.icon, scale: \"l\" })), h(\"div\", { class: \"hub-new-content_dropdown-item-content\" }, h(\"div\", { class: \"hub-new-content_dropdown-item-title\" }, entity.label), h(\"div\", { class: \"hub-new-content_dropdown-item-description\" }, entity.description))))));\n  }\n  renderResourceLinks(resourceLinks) {\n    return (h(\"calcite-dropdown-group\", { class: { \"hub-new-content_dropdown-group\": true, \"mobile\": this.isMobile }, \"selection-mode\": \"none\" }, resourceLinks.map(resourceLink => this.renderResourceLink(resourceLink))));\n  }\n  renderResourceLink(resourceLink) {\n    return (h(\"calcite-dropdown-item\", { \"data-value\": resourceLink.key, href: resourceLink.href, key: resourceLink.label, onClick: this.handleResourceLinkClick }, h(\"calcite-link\", null, resourceLink.label)));\n  }\n  /**\n   * if an entity has an in-place creation form, we render\n   * it in the arcgis-hub-new-content-modal\n   */\n  renderNewContentModal() {\n    return (h(\"arcgis-wormhole\", null, h(\"arcgis-hub-new-content-modal\", { error: this.error, form: this.form, isLoading: this.isLoading, isOpen: this.isFormOpen })));\n  }\n  /**\n   * render the \"dropdown\" modal that opens when a user\n   * is on a mobile device. We render the entities and\n   * resource links in exactly the same way as non-mobile,\n   * we just render them in a modal instead of a dropdown\n   */\n  renderMobileModal(entities, resourceLinks) {\n    return (h(\"calcite-modal\", { onCalciteModalClose: this.onCloseMobileDropdownButttonClick, open: this.isMobileDropdownOpen }, h(\"div\", { slot: \"header\" }, this.intl.t('new')), h(\"div\", { slot: \"content\" }, this.renderDropdownContent(entities, resourceLinks))));\n  }\n  render() {\n    const entity = this.isSingleEntity ? this.entities[0] : this.selectedEntity;\n    return (h(Host, { \"data-element\": \"new-content\" }, !!this.entities.length && this.renderButton(this.entities, this.resourceLinks), entity && this.renderNewContentModal(), this.isMobile && this.renderMobileModal(this.entities, this.resourceLinks)));\n  }\n  static get assetsDirs() { return [\"locales\"]; }\n  get element() { return getElement(this); }\n};\nArcgisHubNewContent.style = arcgisHubNewContentCss;\n\nexport { ArcgisHubNewContent as arcgis_hub_new_content };\n"],"names":["ArcgisHubNewContent","hostRef","registerInstance","this","arcgisHubNewContentSuccess","createEvent","hubTelemetry","entities","resourceLinks","renderAsDropdown","isMobile","isLoading","isFormOpen","isMobileDropdownOpen","bind","toggleForm","selectedEntityIdx","evt","entityFunctions","create","detail","newContent","emit","Object","assign","dist","response","id","type","error","toString","length","isSingleEntity","_a","selectedEntity","key","project","createProject","getEditorConfig","getHubProjectEditorConfig","getDynamicEditorConfig","getDynamicProjectConfig","intlManager","element","intl","el","currentTarget","getAttribute","handleSelectedEntity","telemetry","href","dropdown","shadowRoot","querySelector","style","document","createElement","dataset","hub","innerHTML","appendChild","isOpen","loadForm","form","capitalize","defaults","options","entityKey","schemas","entityFormHash","title","t","description","_b","icon","values","context","getGeographicOrgExtent","hubRequestOptions","defaultExtent","extent","scope","sources","value","selected","label","graphic","geometry","orgUrlKey","portal","urlKey","extentToBBox","userRequestOptions","h","onClick","onOpenMobileDropdownButtonClick","scale","buttonScale","onOpenFormButtonClick","renderDropdown","ref","handleCalciteDropdownRef","slot","renderDropdownContent","Fragment","renderEntityItems","hasResourceLinks","renderResourceLinks","class","map","entity","idx","renderEntityItem","index","handleDropdownSelect","resourceLink","renderResourceLink","handleResourceLinkClick","onCalciteModalClose","onCloseMobileDropdownButttonClick","open","Host","renderButton","renderNewContentModal","renderMobileModal","getElement"],"sourceRoot":""}