{"version":3,"file":"static/js/76183.6cf8c4f6.chunk.js","mappings":"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","sources":["../node_modules/@esri/hub-components/dist/esm/HubInitiatives-caeefcab.js","../node_modules/@esri/hub-components/dist/esm/InitiativeBusinessRules-04858900.js","../node_modules/@esri/hub-components/dist/esm/interpolate-translations-e1ba5ac5.js","../node_modules/@esri/hub-components/dist/esm/arcgis-hub-entity-editor.entry.js","../node_modules/@esri/hub-components/dist/esm/cache-bust-url-1191d1d7.js","../node_modules/@esri/hub-components/dist/esm/context-7d8f7366.js","../node_modules/@esri/hub-components/dist/esm/getTypeFromEntity-332e6f28.js","../node_modules/@esri/hub-components/dist/esm/remove-020c0573.js","../node_modules/@esri/hub-components/dist/esm/types-99c9684a.js"],"sourcesContent":["import { g as getBasePropertyMap, p as processEntityCapabilities, a as getItemBySlug, f as fetchModelFromItem, P as PropertyMapper, b as getUniqueSlug, c as getModel, d as updateModel } from './getPropertyMap-598a7bb8.js';\nimport { c as InitiativeDefaultCapabilities } from './InitiativeBusinessRules-04858900.js';\nimport { a as getItemThumbnailUrl } from './get-item-thumbnail-url-7e5ae2fd.js';\nimport { i as isGuid } from './is-guid-8127621d.js';\nimport { g as getItem } from './get-f2cd18e7.js';\n\n/**\n * Returns an Array of IPropertyMap objects\n * that define the projection of properties from a IModel to an IHubProject\n * @returns\n * @private\n */\nfunction getPropertyMap() {\n    const map = getBasePropertyMap();\n    // Type specific mappings\n    map.push({ objectKey: \"status\", modelKey: \"data.status\" });\n    map.push({ objectKey: \"catalog\", modelKey: \"data.catalog\" });\n    map.push({ objectKey: \"permissions\", modelKey: \"data.permissions\" });\n    map.push({\n        objectKey: \"capabilities\",\n        modelKey: \"data.settings.capabilities\",\n    });\n    map.push({ objectKey: \"contacts\", modelKey: \"data.contacts\" });\n    map.push({ objectKey: \"timeline\", modelKey: \"data.timeline\" });\n    return map;\n}\n\n/**\n * Given a model and an Initiative, set various computed properties that can't be directly mapped\n * @private\n * @param model\n * @param initiative\n * @param requestOptions\n * @returns\n */\nfunction computeProps(model, initiative, requestOptions) {\n    var _a;\n    let token;\n    if (requestOptions.authentication) {\n        const session = requestOptions.authentication;\n        token = session.token;\n    }\n    // thumbnail url\n    initiative.thumbnailUrl = getItemThumbnailUrl(model.item, requestOptions, token);\n    // Handle Dates\n    initiative.createdDate = new Date(model.item.created);\n    initiative.createdDateSource = \"item.created\";\n    initiative.updatedDate = new Date(model.item.modified);\n    initiative.updatedDateSource = \"item.modified\";\n    // Handle capabilities\n    initiative.capabilities = processEntityCapabilities(((_a = model.data.settings) === null || _a === void 0 ? void 0 : _a.capabilities) || {}, InitiativeDefaultCapabilities);\n    // cast b/c this takes a partial but returns a full object\n    return initiative;\n}\n\n// Note - we separate these imports so we can cleanly spy on things in tests\n/**\n * @private\n * Update a Hub Initiative\n * @param initiative\n * @param requestOptions\n */\nasync function updateInitiative(initiative, requestOptions) {\n    // verify that the slug is unique, excluding the current initiative\n    initiative.slug = await getUniqueSlug({ slug: initiative.slug, existingId: initiative.id }, requestOptions);\n    // get the backing item & data\n    const model = await getModel(initiative.id, requestOptions);\n    // create the PropertyMapper\n    const mapper = new PropertyMapper(getPropertyMap());\n    // Note: Although we are fetching the model, and applying changes onto it,\n    // we are not attempting to handle \"concurrent edit\" conflict resolution\n    // but this is where we would apply that sort of logic\n    const modelToUpdate = mapper.objectToModel(initiative, model);\n    // update the backing item\n    const updatedModel = await updateModel(modelToUpdate, requestOptions);\n    // now map back into an initiative and return that\n    let updatedInitiative = mapper.modelToObject(updatedModel, initiative);\n    updatedInitiative = computeProps(model, updatedInitiative, requestOptions);\n    // the casting is needed because modelToObject returns a `Partial<T>`\n    // where as this function returns a `T`\n    return updatedInitiative;\n}\n/**\n * @private\n * Get a Hub Initiative by id or slug\n * @param identifier item id or slug\n * @param requestOptions\n */\nfunction fetchInitiative(identifier, requestOptions) {\n    let getPrms;\n    if (isGuid(identifier)) {\n        // get item by id\n        getPrms = getItem(identifier, requestOptions);\n    }\n    else {\n        getPrms = getItemBySlug(identifier, requestOptions);\n    }\n    return getPrms.then((item) => {\n        if (!item)\n            return null;\n        return convertItemToInitiative(item, requestOptions);\n    });\n}\n/**\n * @private\n * Convert an Hub Initiative Item into a Hub Initiative, fetching any additional\n * information that may be required\n * @param item\n * @param auth\n * @returns\n */\nasync function convertItemToInitiative(item, requestOptions) {\n    const model = await fetchModelFromItem(item, requestOptions);\n    const mapper = new PropertyMapper(getPropertyMap());\n    const prj = mapper.modelToObject(model, {});\n    return computeProps(model, prj, requestOptions);\n}\n\nexport { fetchInitiative as f, updateInitiative as u };\n","/**\n * Default capabilities for a Initiative. If not listed here, the capability will not be available\n * This hash is combined with the capabilities hash stored in the item data. Regardless of what\n * properties are defined in the item data, only the capabilities defined here will be available\n * @private\n */\nconst InitiativeDefaultCapabilities = {\n    overview: true,\n    details: true,\n    settings: true,\n};\n/**\n * List of all the Initiative Capability Permissions\n * These are considered Hub Business Rules and are not intended\n * to be modified by consumers\n * @private\n */\nconst InitiativeCapabilityPermissions = [\n    {\n        entity: \"initiative\",\n        capability: \"overview\",\n        permissions: [\"hub:initiative:view\"],\n    },\n    {\n        entity: \"initiative\",\n        capability: \"details\",\n        permissions: [\"hub:initiative:edit\"],\n    },\n    {\n        entity: \"initiative\",\n        capability: \"settings\",\n        permissions: [\"hub:initiative:edit\"],\n    },\n];\n/**\n * Initiative Permission Policies\n * These define the requirements any user must meet to perform related actions\n * @private\n */\nconst InitiativePermissions = [\n    \"hub:initiative:create\",\n    \"hub:initiative:delete\",\n    \"hub:initiative:edit\",\n    \"hub:initiative:view\",\n];\n/**\n * Initiative permission policies\n * @private\n */\nconst InitiativePermissionPolicies = [\n    {\n        permission: \"hub:initiative:create\",\n        subsystems: [\"projects\"],\n        authenticated: true,\n        privileges: [\"portal:user:createItem\"],\n        licenses: [\"hub-premium\"],\n    },\n    {\n        permission: \"hub:initiative:view\",\n        subsystems: [\"projects\"],\n        authenticated: false,\n        licenses: [\"hub-premium\"],\n    },\n    {\n        permission: \"hub:initiative:edit\",\n        authenticated: true,\n        subsystems: [\"projects\"],\n        entityEdit: true,\n        licenses: [\"hub-premium\"],\n    },\n    {\n        permission: \"hub:initiative:delete\",\n        authenticated: true,\n        subsystems: [\"projects\"],\n        entityOwner: true,\n        licenses: [\"hub-premium\"],\n    },\n];\n\nexport { InitiativePermissionPolicies as I, InitiativePermissions as a, InitiativeCapabilityPermissions as b, InitiativeDefaultCapabilities as c };\n","import { i as interpolate } from './interpolate-501f9adb.js';\n\n/**\n * This is used to translate all the strings that we want to translate in an object\n * (including the inherited properties) and interpolate them back into the same object.\n * Those strings in the object must be in the `{{abc.xyz...:translate}}` format\n * in order to be picked up by interpolate\n * @param intl The intl service\n * @param object Object to be translated\n * @returns An object with translated strings that are intended to be translated\n */\nfunction interpolateTranslations(intl, object) {\n  const transforms = {\n    translate(key) {\n      return intl.t(key);\n    }\n  };\n  return interpolate(object, {}, transforms);\n}\n\nexport { interpolateTranslations as i };\n","import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-0d95d9d4.js';\nimport { b as bind } from './context-7d8f7366.js';\nimport { i as intlManager } from './intl-manager-821aea3b.js';\nimport './types-99c9684a.js';\nimport { i as interpolateTranslations } from './interpolate-translations-e1ba5ac5.js';\nimport { c as cacheBustUrl } from './cache-bust-url-1191d1d7.js';\nimport { b as bBoxToExtent, c as getGeographicOrgExtent, a as extentToBBox } from './extent-0f42acfc.js';\nimport { o as getFamilyTypes } from './_internal-89d3dc92.js';\nimport { c as cloneObject } from './util-3c40fe6c.js';\nimport { H as HubError, u as upsertResource } from './getPropertyMap-598a7bb8.js';\nimport { r as removeItemResource } from './remove-020c0573.js';\nimport { u as updateProject, g as getHubProjectEditorConfig } from './edit-8909959a.js';\nimport { g as getTypeFromEntity } from './getTypeFromEntity-332e6f28.js';\nimport { u as updateInitiative } from './HubInitiatives-caeefcab.js';\nimport { u as updateSite } from './HubSites-95889869.js';\nimport './index-4e91769f.js';\nimport './interpolate-501f9adb.js';\nimport './get-prop-d82e4fa6.js';\nimport './request-c15cc2af.js';\nimport './helpers-a80c0291.js';\nimport './clean-url-be7c0879.js';\nimport './search-3af9e278.js';\nimport './generic-search-069e22da.js';\nimport './get-portal-url-423a76f5.js';\nimport './append-custom-params-fd9b7e72.js';\nimport './create-7cf3c372.js';\nimport './tslib.es6-3669ad41.js';\nimport './get-f2cd18e7.js';\nimport './get-with-default-6db049d8.js';\nimport './OperationError-85fd80c7.js';\nimport './get-portal-api-url-ccd8fd10.js';\nimport './update-fec93fc5.js';\nimport './fail-safe-1c23dad8.js';\nimport './set-prop-91329c47.js';\nimport './ProjectBusinessRules-bb655b17.js';\nimport './get-item-thumbnail-url-7e5ae2fd.js';\nimport './InitiativeBusinessRules-04858900.js';\nimport './is-guid-8127621d.js';\nimport './_enrichments-7716cdcc.js';\nimport './getPortalBaseFromOrgUrl-6a5781aa.js';\nimport './get-portal-06f7947b.js';\nimport './getService-49b539e3.js';\nimport './tslib.es6-b2e8cdb8.js';\nimport './SiteBusinessRules-05d0a02f.js';\n\n/**\n * Removes a resource associated with an item\n *\n * @export\n * @param {string} id item id\n * @param {string} name resource name\n * @param {string} owner item owner\n * @param {IUserRequestOptions} ro request options\n * @return {*}  {Promise<{\n *   success: boolean;\n * }>}\n */\nasync function removeResource(id, name, owner, ro) {\n    try {\n        // Remove item resource\n        const response = await removeItemResource(Object.assign({ id, resource: name, owner }, ro));\n        // if err throw\n        if (!response.success) {\n            throw new HubError(\"Remove Item Resource\", \"Unknown error removing resource.\");\n        }\n        return response;\n    }\n    catch (err) {\n        if (err instanceof Error) {\n            throw new HubError(\"Remove Item Resource\", err.message, err);\n        }\n        else {\n            throw new HubError(\"Remove Item Resource\", \"Unknown error removing resource.\");\n        }\n    }\n}\n\n/**\n * Check if i18nScope is defined and not ending with a \".\", if so add a \".\" at the end.\n * e.g. if the i18nScope is 'project.edit', the path is `${i18nScope}catalog.organization`,\n * we will want \"project.edit.catalog.organization\" instead of \"project.editcatalog.organization\"\n * @param i18nScope\n * @returns i18nScope with a \".\" at the end if it is defined\n */\nfunction dotifyString(i18nScope) {\n    return i18nScope && i18nScope.slice(-1) !== \".\" ? `${i18nScope}.` : i18nScope;\n}\n/** Get a single catalog based on the name, entity type and optional requests\n * @param i18nScope Translation scope to be interpolated into the catalog\n * @param name Name of the catalog requested\n * @param entityType\n * @param options An opitional IGetWellKnownCatalogOptions definition JSON object\n * @returns An IHubCatalog definition JSON object\n */\nfunction getWellKnownCatalog(i18nScope, name, entityType, options) {\n    switch (entityType) {\n        case \"item\":\n            return getWellknownItemCatalog(i18nScope, name, options);\n        /* Add other entity handlers here, e.g. getWellknownEventCatalog */\n        default:\n            throw new Error(`Wellknown catalog not implemented for \"${entityType}\"`);\n    }\n}\n/**\n * Build an IHubCatalog definition JSON object based on the\n * catalog name, predicates and collections we want to use for each catalog\n * @param i18nScope\n * @param name Catalog name\n * @param predicates Predicates for the catalog\n * @param collections Collections to include for the catalog\n * @returns An IHubCatalog definition JSON object\n */\nfunction buildCatalog(i18nScope, name, predicates, collections) {\n    return {\n        schemaVersion: 1,\n        title: `{{${i18nScope}catalog.${name}:translate}}`,\n        scopes: {\n            item: {\n                targetEntity: \"item\",\n                filters: [{ predicates }],\n            },\n        },\n        collections,\n    };\n}\n/**\n * Check if user is available in the passed options, throw an error if not\n * @param name name of the catalog\n * @param options Options that contains user\n */\nfunction checkUser(name, options) {\n    if (!options || !options.user) {\n        throw new Error(`User needed to get \"${name}\" catalog`);\n    }\n}\n/**\n * Get an ITEM catalog based on the name and optional requests\n * @param i18nScope Translation scope to be interpolated into the catalog\n * @param name Name of the catalog requested\n * @param options An opitional IGetWellKnownCatalogOptions definition JSON object\n * @returns An ITEM IHubCatalog definition JSON object\n */\nfunction getWellknownItemCatalog(i18nScope, name, options) {\n    i18nScope = dotifyString(i18nScope);\n    let catalog;\n    const collections = getWellknownCollections(i18nScope, \"item\", options === null || options === void 0 ? void 0 : options.collectionNames);\n    switch (name) {\n        case \"myContent\":\n            checkUser(name, options);\n            catalog = buildCatalog(i18nScope, name, [{ owner: options.user.username }], collections);\n            break;\n        case \"favorites\":\n            checkUser(name, options);\n            catalog = buildCatalog(i18nScope, name, [{ group: options.user.favGroupId }], collections);\n            break;\n        case \"organization\":\n            checkUser(name, options);\n            catalog = buildCatalog(i18nScope, name, [{ orgid: options.user.orgId, access: \"org\" }], collections);\n            break;\n        case \"world\":\n            catalog = buildCatalog(i18nScope, name, [{ access: \"public\" }], collections);\n            break;\n    }\n    return catalog;\n}\n/**\n * Get a complete collections map to use to build a collections list\n * @param i18nScope\n * @param entityType\n * @returns an object that contains properties of all the collections\n */\nfunction getAllCollectionsMap(i18nScope, entityType) {\n    return {\n        appAndMap: {\n            key: \"appAndMap\",\n            label: `{{${i18nScope}collection.appsAndMaps:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [\n                    {\n                        predicates: [\n                            {\n                                type: [...getFamilyTypes(\"app\"), ...getFamilyTypes(\"map\")],\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n        dataset: {\n            key: \"dataset\",\n            label: `{{${i18nScope}collection.dataset:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [{ predicates: [{ type: getFamilyTypes(\"dataset\") }] }],\n            },\n        },\n        document: {\n            key: \"document\",\n            label: `{{${i18nScope}collection.documents:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [{ predicates: [{ type: getFamilyTypes(\"document\") }] }],\n            },\n        },\n        feedback: {\n            key: \"feedback\",\n            label: `{{${i18nScope}collection.feedback:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [{ predicates: [{ type: getFamilyTypes(\"feedback\") }] }],\n            },\n        },\n        site: {\n            key: \"site\",\n            label: `{{${i18nScope}collection.sites:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [\n                    {\n                        predicates: [\n                            {\n                                type: getFamilyTypes(\"site\"),\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n        template: {\n            key: \"template\",\n            label: `{{${i18nScope}collection.templates:translate}}`,\n            targetEntity: entityType,\n            include: [],\n            scope: {\n                targetEntity: entityType,\n                filters: [\n                    {\n                        predicates: [\n                            {\n                                type: getFamilyTypes(\"template\"),\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n    };\n}\n/**\n * Get a list of collection names we want to use to build the default collections if no specific collection names are passed\n * @returns a list of WellKnownCollection definition strings\n */\nfunction getDefaultCollectionNames() {\n    return [\"appAndMap\", \"dataset\", \"document\", \"feedback\", \"site\"];\n}\n/**\n * Get a list of collections based on the entity type and an optional\n * list of collection names, will return a list of default collections if none passed\n * @param i18nScope Translation scope to be interpolated into the collections\n * @param entityType\n * @param collectionNames List of names of the requested collections, optional, if passed in,\n * only those collections will be returned\n * @returns A list of IHubCollection definition JSON objects\n */\nfunction getWellknownCollections(i18nScope, entityType, collectionNames) {\n    i18nScope = dotifyString(i18nScope);\n    const allCollectionsMap = getAllCollectionsMap(i18nScope, entityType);\n    const defaultCollectionNames = getDefaultCollectionNames();\n    // Return a list of collections from the passed collection names or\n    // return the default ones if not passed\n    const names = (collectionNames === null || collectionNames === void 0 ? void 0 : collectionNames.length) ? collectionNames\n        : defaultCollectionNames;\n    return names.reduce((accum, name) => {\n        if (allCollectionsMap[name]) {\n            accum.push(allCollectionsMap[name]);\n        }\n        return accum;\n    }, []);\n}\n\n/***\n *    ######## ######## ##     ## ########\n *       ##    ##       ###   ### ##     ##\n *       ##    ##       #### #### ##     ##\n *       ##    ######   ## ### ## ########\n *       ##    ##       ##     ## ##\n *       ##    ##       ##     ## ##\n *       ##    ######## ##     ## ##\n *    FUNCTIONS IN THIS FILE WILL EVENTUALLY BE HOISTED TO HUB.JS\n */\n/**\n * there are certain parts of the project's editor uiSchema that rely\n * on \"dynamic\" information (e.g. current user, project extent, etc.).\n * This means it can't be hard-coded into the static editor config in\n * hub.js. Instead, we inject this information into the uiSchema when\n * we fetch it\n */\nasync function getHubProjectEditorConfigOptions(project = {}, context, intl) {\n  var _a, _b, _c;\n  // generate dynamic featured image url query params\n  const queryParams = (context === null || context === void 0 ? void 0 : context.isAuthenticated) ? `?token=${context.session.token}` : '';\n  const featuredImageUrl = cacheBustUrl(`${(_a = project.view) === null || _a === void 0 ? void 0 : _a.featuredImageUrl}${queryParams}`);\n  // generate dynamic project extent\n  const useProjectExtent = !!((_b = project.extent) === null || _b === void 0 ? void 0 : _b.length);\n  const extent = await getProjectExtent(project, context);\n  // generate dynamic gallery catalogs and facets\n  const catalogNames = ['myContent', 'favorites', 'organization', 'world'];\n  const catalogs = catalogNames.map((name) => {\n    const opts = {\n      user: context.currentUser\n    };\n    // Get the catalog and its collections\n    const catalog = getWellKnownCatalog('project.fields.featuredContent', name, 'item', opts);\n    // Interpolate the translations in the catalog and its collections\n    return interpolateTranslations(intl, catalog);\n  });\n  const facets = [\n    {\n      label: intl.t('project.fields.featuredContent.facets.type'),\n      key: 'type',\n      display: 'multi-select',\n      field: 'type',\n      options: [],\n      operation: 'OR',\n      aggLimit: 100,\n    },\n    {\n      label: intl.t('project.fields.featuredContent.facets.sharing'),\n      key: 'access',\n      display: 'multi-select',\n      field: 'access',\n      options: [],\n      operation: 'OR',\n    }\n  ];\n  return [\n    {\n      scope: '/properties/extent',\n      options: {\n        sources: [\n          {\n            value: 'none',\n            selected: !useProjectExtent\n          },\n          {\n            selected: useProjectExtent,\n            value: 'item',\n            labelKey: useProjectExtent\n              ? \"{{i18nScope}}.fields.extent.project\"\n              : \"{{i18nScope}}.fields.extent.org\",\n            graphic: { geometry: Object.assign({ type: 'extent' }, extent) }\n          }\n        ]\n      }\n    },\n    {\n      scope: '/properties/view/properties/featuredImage',\n      options: {\n        imgSrc: ((_c = project.view) === null || _c === void 0 ? void 0 : _c.featuredImageUrl) && featuredImageUrl\n      }\n    },\n    {\n      scope: '/properties/view/properties/featuredContentIds',\n      options: {\n        catalogs,\n        facets\n      }\n    }\n  ];\n}\n/**\n * dynamically transform/compute the values to be rendered in the\n * project entity editor\n *\n * in this case, we need to dynamically compute the extent to\n * render by default in the entity editor - if the project\n * entity has an extent defined, we will render that,\n * otherwise we render the org extent\n */\nasync function getHubProjectEditorValues(project, context) {\n  const values = cloneObject(project);\n  values.extent = await getProjectExtent(project, context);\n  return values;\n}\n/**\n * dynamically transform/perform pre-save operations to the\n * editor values before ultimately updating the entity and\n * backing item\n */\nasync function saveHubProjectEntityEditor(project, context) {\n  const values = cloneObject(project);\n  // 1. convert extent to bbox\n  values.extent = extentToBBox(values.extent);\n  // 2. convert featuredImage blob to url and store as resource on project item\n  if (values.view.featuredImage) {\n    let featuredImageUrl;\n    const featuredImage = values.view.featuredImage;\n    delete values.view.featuredImage;\n    if (featuredImage.blob) {\n      featuredImageUrl = await upsertResource(project.id, project.owner, featuredImage.blob, \"featuredImage.png\", context.userRequestOptions);\n    }\n    else {\n      featuredImageUrl = null;\n      await removeResource(project.id, \"featuredImage.png\", project.owner, context.userRequestOptions);\n    }\n    values.view.featuredImageUrl = featuredImageUrl;\n  }\n  return updateProject(values, context.userRequestOptions);\n}\nasync function getProjectExtent(project, context) {\n  var _a;\n  const useProjectExtent = (_a = project.extent) === null || _a === void 0 ? void 0 : _a.length;\n  return useProjectExtent\n    ? bBoxToExtent(project.extent)\n    : await getGeographicOrgExtent(context.hubRequestOptions);\n}\n\n/***\n *    ######## ######## ##     ## ########\n *       ##    ##       ###   ### ##     ##\n *       ##    ##       #### #### ##     ##\n *       ##    ######   ## ### ## ########\n *       ##    ##       ##     ## ##\n *       ##    ##       ##     ## ##\n *       ##    ######## ##     ## ##\n *    FUNCTIONS IN THIS FILE WILL BE IMPLEMENTED IN HUB.JS\n */\n/**\n * TODO: we should hoist this logic to hub.js. Similar to fetchHubEntity\n * (which already lives in hub.js), this functioin calls the appropriate\n * update function based on the entity type. This is used as the fallback\n * function in the saveEntityEditor if a delegation function hasn't been\n * defined\n */\nasync function updateHubEntity(type, entity, context) {\n  let result;\n  switch (type) {\n    case \"project\":\n      result = await updateProject(entity, context.userRequestOptions);\n      break;\n    case \"site\":\n      result = await updateSite(entity, context.hubRequestOptions);\n      break;\n    case \"initiative\":\n      result = await updateInitiative(entity, context.userRequestOptions);\n      break;\n  }\n  return result;\n}\nasync function getEntityEditorConfig(entity, context, intl) {\n  const type = getTypeFromEntity(entity);\n  const entityTypeToEditorConfigFns = {\n    project: {\n      config: getHubProjectEditorConfig,\n      options: getHubProjectEditorConfigOptions\n    }\n  };\n  // add gracefull fallbacks in case the entity editor config fns\n  // are not currently supported\n  const DEFAULT_SCHEMA = { type: 'object', properties: {} };\n  const fallbackFns = {\n    config: () => ({ schema: DEFAULT_SCHEMA }),\n    options: () => ([])\n  };\n  const entityTypeEditorConfigFns = entityTypeToEditorConfigFns[type] || fallbackFns;\n  /**\n   * TODO: in the future, we may want to pass in an additional arg here that\n   * specifies that we only want the options associated with a certain subset\n   * of the schema\n   */\n  const options = await entityTypeEditorConfigFns.options(entity, context, intl);\n  /**\n   * A couple things to note here:\n   * 1. This assumes that the 18nScope for any editor config will always be\n   * the entity type (e.g. \"project\", \"site\")\n   * 2. This function currently defaults to returning the \"edit\" editor config\n   * (which we're currently associating with the \"details\" panel); In the future,\n   * however, we could easily pass in an additional param to this function to\n   * return a different editor config (e.g. \"settings\", \"domains\", etc.)\n   */\n  return entityTypeEditorConfigFns.config(type, \"edit\", options);\n}\nasync function getEntityEditorValues(entity, context) {\n  const type = getTypeFromEntity(entity);\n  const entityTypeToEditorValuesFn = {\n    project: getHubProjectEditorValues\n  };\n  const entityTypeEditorValuesFn = entityTypeToEditorValuesFn[type] || (() => entity);\n  return entityTypeEditorValuesFn(entity, context);\n}\nasync function saveEntityEditor(entity, context) {\n  const type = getTypeFromEntity(entity);\n  const entityTypeToSaveFn = {\n    project: saveHubProjectEntityEditor\n  };\n  const entityTypeSaveFn = entityTypeToSaveFn[type] || updateHubEntity.bind(undefined, type);\n  return entityTypeSaveFn(entity, context);\n}\n\nconst arcgisHubEntityEditorCss = \".sc-arcgis-hub-entity-editor-h{display:block;height:100%}h2[slot=\\\"title\\\"].sc-arcgis-hub-entity-editor{margin:0px;font-size:var(--calcite-font-size-3);line-height:2rem;font-weight:var(--calcite-font-weight-bold)}arcgis-configuration-form.sc-arcgis-hub-entity-editor{--arcgis-configuration-form-footer-bg-color:var(--calcite-ui-foreground-2);--arcgis-configuration-form-footer-negative-margin:2rem}\";\n\nconst ArcgisHubEntityEditor = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.arcgisHubWorkspaceEntityChange = createEvent(this, \"arcgisHubWorkspaceEntityChange\", 7);\n    this.isSaving = false;\n    bind(this, 'translationFunc', 'handleEntityEditorSave', 'handleEntityEditorChange', 'setConfigurationFormEl');\n  }\n  async componentWillLoad() {\n    this.intl = await intlManager.loadIntlForComponent(this.element);\n    try {\n      const { schema, uiSchema } = await getEntityEditorConfig(this.entity, this.context, this.intl);\n      this.schema = schema;\n      this.uiSchema = uiSchema;\n    }\n    catch (error) {\n      console.error(`Could not fetch the editor config:`, error);\n    }\n    const values = await getEntityEditorValues(this.entity, this.context);\n    this.values = values;\n  }\n  setConfigurationFormEl(el) {\n    this.configurationFormEl = el;\n  }\n  translationFunc(key, values, opts) {\n    return this.intl.t(key, values, opts);\n  }\n  handleEntityEditorChange() {\n    this.arcgisHubWorkspaceEntityChange.emit({ isDirty: true, entity: this.entity });\n  }\n  async handleEntityEditorSave(evt) {\n    let updatedEntity = this.entity;\n    try {\n      this.isSaving = true;\n      updatedEntity = await saveEntityEditor(evt.detail, this.context);\n      this.configurationFormEl.triggerAlert({ kind: 'success', title: this.intl.t('success') });\n    }\n    catch (error) {\n      console.error('Unable to save entity changes:', error);\n      this.configurationFormEl.triggerAlert({ kind: 'danger', title: this.intl.t('error'), message: error.toString() });\n    }\n    finally {\n      this.isSaving = false;\n      this.arcgisHubWorkspaceEntityChange.emit({ isDirty: false, entity: updatedEntity });\n    }\n  }\n  render() {\n    return (h(Host, { \"data-element\": \"entity-editor\" }, h(\"arcgis-hub-workspace-panel\", null, h(\"h2\", { slot: \"title\" }, this.intl.t('details')), h(\"arcgis-configuration-form\", { context: this.context, isSaving: this.isSaving, onArcgisConfigurationFormChanged: this.handleEntityEditorChange, onArcgisConfigurationFormSaved: this.handleEntityEditorSave, ref: this.setConfigurationFormEl, schema: this.schema, t: this.translationFunc, uiSchema: this.uiSchema, values: this.values }))));\n  }\n  static get assetsDirs() { return [\"locales\"]; }\n  get element() { return getElement(this); }\n};\nArcgisHubEntityEditor.style = arcgisHubEntityEditorCss;\n\nexport { ArcgisHubEntityEditor as arcgis_hub_entity_editor };\n","/**\n * artifically update a query param associated with a url to force\n * the browser to load it from file rather than from cache\n */\nconst cacheBustUrl = (url, param = 'v') => {\n  if (!url) {\n    return url;\n  }\n  const delimiter = url.indexOf('?') > -1 ? '&' : '?';\n  url += `${delimiter}${param}=${new Date().getTime()}`;\n  return url;\n};\n\nexport { cacheBustUrl as c };\n","const bind = (context, ...methodNames) => {\n  methodNames.forEach(methodName => {\n    if (typeof context[methodName] !== 'function') {\n      throw new Error(`Cannot bind context. ${methodName} must be a function`);\n    }\n    context[methodName] = context[methodName].bind(context);\n  });\n};\n\nexport { bind as b };\n","// import { HubEntity } from \"./types/HubEntity\";\n// import { HubEntityType } from \"./types/HubEntityType\";\n/**\n * Given a HubEntity, return it's HubEntityType\n * @param entity\n * @returns\n */\nfunction getTypeFromEntity(entity) {\n    let type;\n    switch (entity.type) {\n        case \"Hub Site Application\":\n        case \"Site Application\":\n            type = \"site\";\n            break;\n        case \"Hub Page\":\n        case \"Site Page\":\n            type = \"page\";\n            break;\n        case \"Hub Project\":\n            type = \"project\";\n            break;\n        case \"Hub Initiative\":\n            type = \"initiative\";\n            break;\n    }\n    return type;\n}\n\nexport { getTypeFromEntity as g };\n","import { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { d as determineOwner } from './get-f2cd18e7.js';\nimport { r as request } from './request-c15cc2af.js';\n\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { removeItem } from \"@esri/arcgis-rest-portal\";\n * //\n * removeItem({\n *   id: \"3ef\",\n *   authentication\n * })\n * ```\n * Delete an item from the portal. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes an item.\n */\nfunction removeItem(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/delete\";\n        return request(url, requestOptions);\n    });\n}\n/**\n * Remove a resource associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes an item resource.\n */\nfunction removeItemResource(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/removeResources\";\n        // mix in user supplied params\n        requestOptions.params = __assign(__assign({}, requestOptions.params), { resource: requestOptions.resource });\n        // only override the deleteAll param specified previously if it is passed explicitly\n        if (typeof requestOptions.deleteAll !== \"undefined\") {\n            requestOptions.params.deleteAll = requestOptions.deleteAll;\n        }\n        return request(url, requestOptions);\n    });\n}\n\nexport { removeItem as a, removeItemResource as r };\n","var PANEL_ICONS;\n(function (PANEL_ICONS) {\n  PANEL_ICONS[\"overview\"] = \"home\";\n  PANEL_ICONS[\"details\"] = \"edit-attributes\";\n  PANEL_ICONS[\"settings\"] = \"gear\";\n})(PANEL_ICONS || (PANEL_ICONS = {}));\nvar ENTITY_ICONS;\n(function (ENTITY_ICONS) {\n  ENTITY_ICONS[\"project\"] = \"projects\";\n  ENTITY_ICONS[\"site\"] = \"web\";\n  ENTITY_ICONS[\"initiative\"] = \"initiative\";\n})(ENTITY_ICONS || (ENTITY_ICONS = {}));\n\nexport { ENTITY_ICONS as E, PANEL_ICONS as P };\n"],"names":["getPropertyMap","map","getBasePropertyMap","push","objectKey","modelKey","computeProps","model","initiative","requestOptions","_a","token","authentication","thumbnailUrl","getItemThumbnailUrl","item","createdDate","Date","created","createdDateSource","updatedDate","modified","updatedDateSource","capabilities","processEntityCapabilities","data","settings","InitiativeDefaultCapabilities","updateInitiative","getUniqueSlug","slug","existingId","id","getModel","mapper","PropertyMapper","modelToUpdate","objectToModel","updateModel","updatedModel","updatedInitiative","modelToObject","fetchInitiative","identifier","isGuid","getItem","getItemBySlug","then","convertItemToInitiative","fetchModelFromItem","prj","overview","details","InitiativeCapabilityPermissions","entity","capability","permissions","InitiativePermissions","InitiativePermissionPolicies","permission","subsystems","authenticated","privileges","licenses","entityEdit","entityOwner","interpolateTranslations","intl","object","transforms","translate","key","t","interpolate","removeResource","name","owner","ro","removeItemResource","Object","assign","resource","response","success","HubError","Error","message","dotifyString","i18nScope","slice","getWellKnownCatalog","entityType","options","catalog","collections","collectionNames","allCollectionsMap","appAndMap","label","targetEntity","include","scope","filters","predicates","type","getFamilyTypes","dataset","document","feedback","site","template","getAllCollectionsMap","defaultCollectionNames","length","reduce","accum","getWellknownCollections","checkUser","buildCatalog","user","username","group","favGroupId","orgid","orgId","access","getWellknownItemCatalog","schemaVersion","title","scopes","getHubProjectEditorConfigOptions","project","context","queryParams","isAuthenticated","session","featuredImageUrl","cacheBustUrl","view","useProjectExtent","_b","extent","getProjectExtent","catalogs","currentUser","facets","display","field","operation","aggLimit","sources","value","selected","labelKey","graphic","geometry","imgSrc","_c","getHubProjectEditorValues","values","cloneObject","saveHubProjectEntityEditor","extentToBBox","featuredImage","blob","upsertResource","userRequestOptions","updateProject","bBoxToExtent","getGeographicOrgExtent","hubRequestOptions","updateHubEntity","result","updateSite","getEntityEditorConfig","getTypeFromEntity","entityTypeToEditorConfigFns","config","getHubProjectEditorConfig","DEFAULT_SCHEMA","properties","fallbackFns","schema","entityTypeEditorConfigFns","getEntityEditorValues","entityTypeEditorValuesFn","saveEntityEditor","entityTypeSaveFn","bind","undefined","ArcgisHubEntityEditor","hostRef","registerInstance","this","arcgisHubWorkspaceEntityChange","createEvent","isSaving","intlManager","element","uiSchema","console","error","el","configurationFormEl","opts","emit","isDirty","evt","updatedEntity","detail","triggerAlert","kind","toString","h","Host","slot","onArcgisConfigurationFormChanged","handleEntityEditorChange","onArcgisConfigurationFormSaved","handleEntityEditorSave","ref","setConfigurationFormEl","translationFunc","getElement","style","url","param","delimiter","indexOf","getTime","methodNames","forEach","methodName","removeItem","determineOwner","getPortalUrl","request","params","__assign","deleteAll","PANEL_ICONS","ENTITY_ICONS"],"sourceRoot":""}