{"version":3,"file":"static/js/48103.1c8adaff.chunk.js","mappings":"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","sources":["../node_modules/@esri/hub-components/dist/esm/ProjectBusinessRules-bb655b17.js","../node_modules/@esri/hub-components/dist/esm/create-7cf3c372.js","../node_modules/@esri/hub-components/dist/esm/fail-safe-1c23dad8.js","../node_modules/@esri/hub-components/dist/esm/generic-search-069e22da.js","../node_modules/@esri/hub-components/dist/esm/getPropertyMap-598a7bb8.js","../node_modules/@esri/hub-components/dist/esm/search-3af9e278.js","../node_modules/@esri/hub-components/dist/esm/set-prop-91329c47.js","../node_modules/@esri/hub-components/dist/esm/update-fec93fc5.js"],"sourcesContent":["/**\n * Default capabilities for a Project. If not listed here, the capability will not be available\n * This hash is combined with the capabilities hash stored in the item data. Regardless of what\n * properties are defined in the item data, only the capabilities defined here will be available\n * @private\n */\nconst ProjectDefaultCapabilities = {\n    overview: true,\n    details: true,\n    settings: true,\n};\n/**\n * List of all the Project Capability Permissions\n * These are considered Hub Business Rules and are not intended\n * to be modified by consumers\n * @private\n */\nconst ProjectCapabilityPermissions = [\n    {\n        entity: \"project\",\n        capability: \"overview\",\n        permissions: [\"hub:project:view\"],\n    },\n    {\n        entity: \"project\",\n        capability: \"details\",\n        permissions: [\"hub:project:edit\"],\n    },\n    {\n        entity: \"project\",\n        capability: \"settings\",\n        permissions: [\"hub:project:edit\"],\n    },\n];\n/**\n * Project Permission Policies\n * These define the requirements any user must meet to perform related actions\n * @private\n */\nconst ProjectPermissions = [\n    \"hub:project:create\",\n    \"hub:project:delete\",\n    \"hub:project:edit\",\n    \"hub:project:view\",\n];\n/**\n * Project permission policies\n * @private\n */\nconst ProjectPermissionPolicies = [\n    {\n        permission: \"hub:project:create\",\n        subsystems: [\"projects\"],\n        authenticated: true,\n        privileges: [\"portal:user:createItem\"],\n        licenses: [\"hub-premium\"],\n    },\n    {\n        permission: \"hub:project:view\",\n        subsystems: [\"projects\"],\n        authenticated: false,\n        licenses: [\"hub-premium\"],\n    },\n    {\n        permission: \"hub:project:edit\",\n        authenticated: true,\n        subsystems: [\"projects\"],\n        entityEdit: true,\n        licenses: [\"hub-premium\"],\n    },\n    {\n        permission: \"hub:project:delete\",\n        authenticated: true,\n        subsystems: [\"projects\"],\n        entityOwner: true,\n        licenses: [\"hub-premium\"],\n    },\n];\n\nexport { ProjectPermissionPolicies as P, ProjectPermissions as a, ProjectCapabilityPermissions as b, ProjectDefaultCapabilities as c };\n","import { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { d as determineOwner, s as serializeItem, i as isBBox, b as bboxToString } from './get-f2cd18e7.js';\nimport { a as appendCustomParams } from './append-custom-params-fd9b7e72.js';\nimport { r as request } from './request-c15cc2af.js';\n\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { createFolder } from \"@esri/arcgis-rest-portal\";\n * //\n * createFolder({\n *   title: 'Map Collection',\n *   authentication: userSession\n * })\n *   .then(response)\n * ```\n * Create a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/create-folder.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with folder details once the folder has been created\n */\nfunction createFolder(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var baseUrl = getPortalUrl(requestOptions) + \"/content/users/\" + owner;\n        var url = baseUrl + \"/createFolder\";\n        requestOptions.params = __assign({ title: requestOptions.title }, requestOptions.params);\n        return request(url, requestOptions);\n    });\n}\n/**\n * ```js\n * import { createItemInFolder } from \"@esri/arcgis-rest-portal\";\n * //\n * createItemInFolder({\n *   item: {\n *     title: \"The Amazing Voyage\",\n *     type: \"Web Map\"\n *   },\n *   folderId: 'fe8',\n *   authentication\n * })\n * ```\n * Create an item in a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.\n *\n * @param requestOptions = Options for the request\n */\nfunction createItemInFolder(requestOptions) {\n    if (requestOptions.multipart && !requestOptions.filename) {\n        return Promise.reject(new Error(\"The filename is required for a multipart request.\"));\n    }\n    return determineOwner(requestOptions).then(function (owner) {\n        var baseUrl = getPortalUrl(requestOptions) + \"/content/users/\" + owner;\n        var url = baseUrl + \"/addItem\";\n        if (requestOptions.folderId) {\n            url = baseUrl + \"/\" + requestOptions.folderId + \"/addItem\";\n        }\n        requestOptions.params = __assign(__assign({}, requestOptions.params), serializeItem(requestOptions.item));\n        // convert extent, if present, into a string from bbox\n        // processParams was previously doing this sort of work,\n        // however now we need to let array of arrays through\n        // Thus for extents we need to move this logic here\n        if (requestOptions.params.extent && isBBox(requestOptions.params.extent)) {\n            requestOptions.params.extent = bboxToString(requestOptions.params.extent);\n        }\n        // serialize the item into something Portal will accept\n        var options = appendCustomParams(requestOptions, [\n            \"owner\",\n            \"folderId\",\n            \"file\",\n            \"dataUrl\",\n            \"text\",\n            \"async\",\n            \"multipart\",\n            \"filename\",\n            \"overwrite\"\n        ], {\n            params: __assign({}, requestOptions.params)\n        });\n        return request(url, options);\n    });\n}\n/**\n * ```js\n * import { createItem } from \"@esri/arcgis-rest-portal\";\n * //\n * createItem({\n *   item: {\n *     title: \"The Amazing Voyage\",\n *     type: \"Web Map\"\n *   },\n *   authentication\n * })\n * ```\n * Create an Item in the user's root folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that creates an item.\n */\nfunction createItem(requestOptions) {\n    // delegate to createItemInFolder placing in the root of the filestore\n    var options = __assign({ folderId: null }, requestOptions);\n    return createItemInFolder(options);\n}\n\nexport { createFolder as a, createItem as c };\n","/**\n * Wrap an async function such that it will never reject\n * @param {Function} fn Async Function that we want to never fail\n * @param {Object} resolveWith Object to resolve with in the event of a failure\n */\nfunction failSafe(fn, resolveWith = {}) {\n    return (...args) => {\n        return fn(...args).catch((_) => {\n            return resolveWith;\n        });\n    };\n}\n\nexport { failSafe as f };\n","import { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { a as appendCustomParams } from './append-custom-params-fd9b7e72.js';\nimport { r as request } from './request-c15cc2af.js';\n\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Method used internally to surface messages to developers.\n */\nfunction warn(message) {\n    if (console && console.warn) {\n        console.warn.apply(console, [message]);\n    }\n}\n\n/* Copyright (c) 2018-2021 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * `SearchQueryBuilder` can be used to construct the `q` param for\n * [`searchItems`](/arcgis-rest-js/api/portal/searchItems#searchItems-search) or\n * [`searchGroups`](/arcgis-rest-js/api/portal/searchGroups#searchGroups-search).\n * By chaining methods, it helps build complex search queries.\n *\n * ```js\n * const startDate = new Date(\"2020-01-01\");\n * const endDate = new Date(\"2020-09-01\");\n * const query = new SearchQueryBuilder()\n *  .match(\"Patrick\")\n *  .in(\"owner\")\n *  .and()\n *  .from(startDate)\n *  .to(endDate)\n *  .in(\"created\")\n *  .and()\n *  .startGroup()\n *    .match(\"Web Mapping Application\")\n *    .in(\"type\")\n *    .or()\n *    .match(\"Mobile Application\")\n *    .in(\"type\")\n *    .or()\n *    .match(\"Application\")\n *    .in(\"type\")\n *  .endGroup()\n *  .and()\n *  .match(\"Demo App\");\n *\n * searchItems(query).then((res) => {\n *   console.log(res.results);\n * });\n * ```\n *\n * Will search for items matching\n * ```\n * \"owner: Patrick AND created:[1577836800000 TO 1598918400000] AND (type:\"Web Mapping Application\" OR type:\"Mobile Application\" OR type:Application) AND Demo App\"\n * ```\n */\nvar SearchQueryBuilder = /** @class */ (function () {\n    /**\n     * @param q An existing query string to start building from.\n     */\n    function SearchQueryBuilder(q) {\n        if (q === void 0) { q = \"\"; }\n        this.termStack = [];\n        this.rangeStack = [];\n        this.openGroups = 0;\n        this.q = q;\n    }\n    /**\n     * Defines strings to search for.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"My Layer\")\n     * ```\n     *\n     * @param terms strings to search for.\n     */\n    SearchQueryBuilder.prototype.match = function () {\n        var terms = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            terms[_i] = arguments[_i];\n        }\n        this.termStack = this.termStack.concat(terms);\n        return this;\n    };\n    /**\n     * Defines fields to search in. You can pass `\"*\"` or call this method without arguments to search a default set of fields\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"My Layer\")\n     *   .in(\"title\")\n     * ```\n     *\n     * @param field The field to search for the previous match in.\n     */\n    SearchQueryBuilder.prototype.in = function (field) {\n        var fn = \"`in(\" + (field ? \"\\\"\" + field + \"\\\"\" : \"\") + \")`\";\n        if (!this.hasRange && !this.hasTerms) {\n            warn(\n            // apparently-p-rettier-ignore causes some\n            fn + \" was called with no call to `match(...)` or `from(...)`/`to(...)`. Your query was not modified.\");\n            return this;\n        }\n        if (field && field !== \"*\") {\n            this.q += field + \":\";\n        }\n        return this.commit();\n    };\n    /**\n     * Starts a new search group.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .startGroup()\n     *     .match(\"Lakes\")\n     *     .in(\"title\")\n     *   .endGroup()\n     *   .or()\n     *   .startGroup()\n     *     .match(\"Rivers\")\n     *     .in(\"title\")\n     *   .endGroup()\n     * ```\n     */\n    SearchQueryBuilder.prototype.startGroup = function () {\n        this.commit();\n        if (this.openGroups > 0) {\n            this.q += \" \";\n        }\n        this.openGroups++;\n        this.q += \"(\";\n        return this;\n    };\n    /**\n     * Ends a search group.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .startGroup()\n     *     .match(\"Lakes\")\n     *     .in(\"title\")\n     *   .endGroup()\n     *   .or()\n     *   .startGroup()\n     *     .match(\"Rivers\")\n     *     .in(\"title\")\n     *   .endGroup()\n     * ```\n     */\n    SearchQueryBuilder.prototype.endGroup = function () {\n        if (this.openGroups <= 0) {\n            warn(\"`endGroup(...)` was called without calling `startGroup(...)` first. Your query was not modified.\");\n            return this;\n        }\n        this.commit();\n        this.openGroups--;\n        this.q += \")\";\n        return this;\n    };\n    /**\n     * Joins two sets of queries with an `AND` clause.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"Lakes\")\n     *   .in(\"title\")\n     *   .and()\n     *   .match(\"Rivers\")\n     *   .in(\"title\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.and = function () {\n        return this.addModifier(\"and\");\n    };\n    /**\n     * Joins two sets of queries with an `OR` clause.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"Lakes\")\n     *   .in(\"title\")\n     *   .or()\n     *   .match(\"Rivers\")\n     *   .in(\"title\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.or = function () {\n        return this.addModifier(\"or\");\n    };\n    /**\n     * Joins two sets of queries with a `NOT` clause. Another option for filtering results is the [prohibit operator '-'](https://developers.arcgis.com/rest/users-groups-and-items/search-reference.htm#ESRI_SECTION1_5C6C35DB9E4A4F4492C5B937BDA2BF67).\n     *\n     * ```js\n     * // omit results with \"Rivers\" in their title\n     * const query = new SearchQueryBuilder()\n     *   .not()\n     *   .match(\"Rivers\")\n     *   .in(\"title\")\n     *\n     * // equivalent\n     * const query = new SearchQueryBuilder()\n     *   .match(\"Rivers\")\n     *   .in(\"-title\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.not = function () {\n        return this.addModifier(\"not\");\n    };\n    /**\n     * Begins a new range query.\n     *\n     * ```js\n     *\n     * const NEWYEARS = new Date(\"2020-01-01\")\n     * const TODAY = new Date()\n     *\n     * const query = new SearchQueryBuilder()\n     *   .from(NEWYEARS)\n     *   .to(TODAY)\n     *   .in(\"created\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.from = function (term) {\n        if (this.hasTerms) {\n            warn(\n            // apparently-p*rettier-ignore causes prettier to strip *all* comments O_o\n            \"`from(...)` is not allowed after `match(...)` try using `.from(...).to(...).in(...)`. Optionally, you may see this because dates are incorrectly formatted. Dates should be a primative Date value, aka a number in milliseconds or Date object, ie new Date(\\\"2020-01-01\\\").  Your query was not modified.\");\n            return this;\n        }\n        this.rangeStack[0] = term;\n        return this;\n    };\n    /**\n     * Ends a range query.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .from(yesterdaysDate)\n     *   .to(todaysDate)\n     *   .in(\"created\")\n     * ```\n     */\n    SearchQueryBuilder.prototype.to = function (term) {\n        if (this.hasTerms) {\n            warn(\n            // apparently-p*rettier-ignore causes prettier to strip *all* comments O_o\n            \"`to(...)` is not allowed after `match(...)` try using `.from(...).to(...).in(...)`. Optionally, you may see this because dates are incorrectly formatted. Dates should be a primative Date value, aka a number in milliseconds or Date object, ie new Date(\\\"2020-01-01\\\"). Your query was not modified.\");\n            return this;\n        }\n        this.rangeStack[1] = term;\n        return this;\n    };\n    /**\n     * Boosts the previous term to increase its rank in the results.\n     *\n     * ```js\n     * const query = new SearchQueryBuilder()\n     *   .match(\"Lakes\")\n     *   .in(\"title\")\n     *   .or()\n     *   .match(\"Rivers\")\n     *   .in(\"title\")\n     *   .boost(3)\n     * ```\n     */\n    SearchQueryBuilder.prototype.boost = function (num) {\n        this.commit();\n        this.q += \"^\" + num;\n        return this;\n    };\n    /**\n     * Returns the current query string. Called internally when the request is made.\n     */\n    SearchQueryBuilder.prototype.toParam = function () {\n        this.commit();\n        this.cleanup();\n        return this.q;\n    };\n    /**\n     * Returns a new instance of `SearchQueryBuilder` based on the current instance.\n     */\n    SearchQueryBuilder.prototype.clone = function () {\n        this.commit();\n        this.cleanup();\n        return new SearchQueryBuilder(this.q + \"\");\n    };\n    SearchQueryBuilder.prototype.addModifier = function (modifier) {\n        if (this.currentModifer) {\n            warn(\n            // apparently-p*rettier-ignore causes prettier to strip *all* comments O_o\n            \"You have called `\" + this.currentModifer + \"()` after `\" + modifier + \"()`. Your current query was not modified.\");\n            return this;\n        }\n        this.commit();\n        if (this.q === \"\" && modifier !== \"not\") {\n            warn(\"You have called `\" + modifier + \"()` without calling another method to modify your query first. Try calling `match()` first.\");\n            return this;\n        }\n        this.currentModifer = modifier;\n        this.q += this.q === \"\" ? \"\" : \" \";\n        this.q += modifier.toUpperCase() + \" \";\n        return this;\n    };\n    SearchQueryBuilder.prototype.needsQuotes = function (s) {\n        return /\\s|:/g.test(s);\n    };\n    SearchQueryBuilder.prototype.formatTerm = function (term) {\n        if (term instanceof Date) {\n            return term.getTime();\n        }\n        if (typeof term === \"string\" && this.needsQuotes(term)) {\n            return \"\\\"\" + term + \"\\\"\";\n        }\n        return term;\n    };\n    SearchQueryBuilder.prototype.commit = function () {\n        var _this = this;\n        this.currentModifer = undefined;\n        if (this.hasRange) {\n            this.q += \"[\" + this.formatTerm(this.rangeStack[0]) + \" TO \" + this.formatTerm(this.rangeStack[1]) + \"]\";\n            this.rangeStack = [undefined, undefined];\n        }\n        if (this.hasTerms) {\n            this.q += this.termStack\n                .map(function (term) {\n                return _this.formatTerm(term);\n            })\n                .join(\" \");\n            this.termStack = [];\n        }\n        return this;\n    };\n    Object.defineProperty(SearchQueryBuilder.prototype, \"hasTerms\", {\n        get: function () {\n            return this.termStack.length > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SearchQueryBuilder.prototype, \"hasRange\", {\n        get: function () {\n            return this.rangeStack.length && this.rangeStack[0] && this.rangeStack[1];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SearchQueryBuilder.prototype.cleanup = function () {\n        // end a group if we have started one\n        if (this.openGroups > 0) {\n            warn(\n            // apparently-p*rettier-ignore causes prettier to strip *all* comments O_o\n            \"Automatically closing \" + this.openGroups + \" group(s). You can use `endGroup(...)` to remove this warning.\");\n            while (this.openGroups > 0) {\n                this.q += \")\";\n                this.openGroups--;\n            }\n        }\n        var oldQ = this.q;\n        this.q = oldQ.replace(/( AND ?| NOT ?| OR ?)*$/, \"\");\n        if (oldQ !== this.q) {\n            warn(\"`startGroup(...)` was called without calling `endGroup(...)` first. Your query was not modified.\");\n        }\n        // clear empty groups\n        this.q = this.q.replace(/(\\(\\))*/, \"\");\n    };\n    return SearchQueryBuilder;\n}());\n\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nfunction genericSearch(search, searchType) {\n    var options;\n    if (typeof search === \"string\" || search instanceof SearchQueryBuilder) {\n        options = {\n            httpMethod: \"GET\",\n            params: {\n                q: search,\n            },\n        };\n    }\n    else {\n        // searchUserAccess has one (knonw) valid value: \"groupMember\"\n        options = appendCustomParams(search, [\n            \"q\",\n            \"num\",\n            \"start\",\n            \"sortField\",\n            \"sortOrder\",\n            \"searchUserAccess\",\n            \"searchUserName\",\n            \"filter\",\n            \"countFields\",\n            \"countSize\",\n            \"categories\",\n            \"categoryFilters\",\n        ], {\n            httpMethod: \"GET\",\n        });\n    }\n    var path;\n    switch (searchType) {\n        case \"item\":\n            path = \"/search\";\n            break;\n        case \"group\":\n            path = \"/community/groups\";\n            break;\n        case \"groupContent\":\n            // Need to have groupId property to do group contents search,\n            // cso filter out all but ISearchGroupContentOptions\n            if (typeof search !== \"string\" &&\n                !(search instanceof SearchQueryBuilder) &&\n                search.groupId) {\n                path = \"/content/groups/\" + search.groupId + \"/search\";\n            }\n            else {\n                return Promise.reject(new Error(\"you must pass a `groupId` option to `searchGroupContent`\"));\n            }\n            break;\n        default:\n            // \"users\"\n            path = \"/portals/self/users/search\";\n            break;\n    }\n    var url = getPortalUrl(options) + path;\n    // send the request\n    return request(url, options).then(function (r) {\n        if (r.nextStart && r.nextStart !== -1) {\n            r.nextPage = function () {\n                var newOptions;\n                if (typeof search === \"string\" ||\n                    search instanceof SearchQueryBuilder) {\n                    newOptions = {\n                        q: search,\n                        start: r.nextStart,\n                    };\n                }\n                else {\n                    newOptions = search;\n                    newOptions.start = r.nextStart;\n                }\n                return genericSearch(newOptions, searchType);\n            };\n        }\n        return r;\n    });\n}\n\nexport { SearchQueryBuilder as S, genericSearch as g };\n","import { s as searchItems } from './search-3af9e278.js';\nimport { d as bboxToString } from './extent-0f42acfc.js';\nimport { c as cloneObject } from './util-3c40fe6c.js';\nimport { c as createItem } from './create-7cf3c372.js';\nimport { d as determineOwner, f as getItemResources, g as getItem, c as getItemData, h as getItemResource } from './get-f2cd18e7.js';\nimport { g as getWithDefault } from './get-with-default-6db049d8.js';\nimport { O as OperationError } from './OperationError-85fd80c7.js';\nimport { g as getPortalApiUrl } from './get-portal-api-url-ccd8fd10.js';\nimport { a as updateItemResource, u as updateItem } from './update-fec93fc5.js';\nimport { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { r as request } from './request-c15cc2af.js';\nimport { f as failSafe } from './fail-safe-1c23dad8.js';\nimport { s as setProp, d as deepSet } from './set-prop-91329c47.js';\nimport { g as getProp } from './get-prop-d82e4fa6.js';\nimport { c as ProjectDefaultCapabilities } from './ProjectBusinessRules-bb655b17.js';\nimport { a as getItemThumbnailUrl } from './get-item-thumbnail-url-7e5ae2fd.js';\n\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { addItemResource } from \"@esri/arcgis-rest-portal\";\n * //\n * // Add a file resource\n * addItemResource({\n *   id: '3ef',\n *   resource: file,\n *   name: 'bigkahuna.jpg',\n *   authentication\n * })\n *   .then(response)\n * //\n * // Add a text resource\n * addItemResource({\n *   id: '4fg',\n *   content: \"Text content\",\n *   name: 'bigkahuna.txt',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Add a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-resources.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nfunction addItemResource(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/addResources\";\n        requestOptions.params = __assign({ file: requestOptions.resource, fileName: requestOptions.name, resourcesPrefix: requestOptions.prefix, text: requestOptions.content, access: requestOptions.private ? \"private\" : \"inherit\" }, requestOptions.params);\n        return request(url, requestOptions);\n    });\n}\n\n/**\n * Perform the following operations on a string to make it slug-friendly:\n * 1. trim it\n * 2. convert to lowercase\n * 3. remove any character not a-z, 0-9, or _\n * 4. dasherize it\n * @param {String} value String to slugify\n */\nfunction slugify(value) {\n    if (typeof value === \"string\") {\n        // @ts-ignore\n        return value\n            .trim()\n            .toLowerCase()\n            .replace(/ +/g, \"-\")\n            .replace(/[^\\w-]/g, \"\")\n            .replace(/-+/g, \"-\");\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * Key value pair of IModel resource to resource filename.\n * (used for fetching/creating resources)\n */\nconst EntityResourceMap = {\n    location: \"location.json\",\n};\n\n// TODO: work out how to unify content slug fns\n// https: github.com/Esri/hub.js/blob/master/packages/common/src/content/index.ts#L301-L348\n/**\n * Create a slug, namespaced to an org\n * Typically used to lookup items by a human readable name in urls\n *\n * @param title\n * @param orgKey\n * @returns\n */\nfunction constructSlug(title, orgKey) {\n    return `${orgKey.toLowerCase()}|${slugify(title)}`;\n}\n/**\n * Adds/Updates the slug typekeyword\n * Returns a new array of keywords\n * @param typeKeywords\n * @param slug\n * @returns\n */\nfunction setSlugKeyword(typeKeywords, slug) {\n    // remove slug entry from array\n    const removed = typeKeywords.filter((entry) => {\n        return !entry.startsWith(\"slug|\");\n    });\n    // now add it\n    removed.push(`slug|${slug}`);\n    return removed;\n}\n/**\n * Get an item by searching for items with a typeKeyword like `slug|{slug-value}`\n *\n * For example, if you pass a slug `\"snow-map\"` into this function, it will\n * search for items with `slug|snow-map` in it's typeKeywords array,\n *\n * @param slug\n * @param requestOptions\n * @returns\n */\nfunction getItemBySlug(slug, requestOptions) {\n    return findItemsBySlug({ slug }, requestOptions).then((results) => {\n        if (results.length) {\n            return results[0];\n        }\n        else {\n            return null;\n        }\n    });\n}\n/**\n * Find items by slug typeKeywords.\n *\n * Optional exclude parameter accepts the id of an item we expect to\n * have this particular slug. This is used during update calls\n * where we don't know if the slug specifically has been updated, but we\n * don't want a false-postive from the item we are updating\n *\n * @param slug\n * @param requestOptions\n * @returns\n */\nfunction findItemsBySlug(slugInfo, requestOptions) {\n    const opts = {\n        filter: `typekeywords:\"slug|${slugInfo.slug}\"`,\n    };\n    if (requestOptions.authentication) {\n        opts.authentication = requestOptions.authentication;\n    }\n    else if (requestOptions.portal) {\n        opts.portal = requestOptions.portal;\n    }\n    // We need to check for other items w/ a slug during\n    // the update calls. For those scenarios we are interested\n    // in any _other_ items which may have a specific slug\n    // but not one specific item\n    if (slugInfo.exclude) {\n        opts.q = `NOT id:${slugInfo.exclude}`;\n    }\n    return searchItems(opts)\n        .then((response) => {\n        return response.results;\n    })\n        .catch((e) => {\n        throw e;\n    });\n}\n/**\n * Given a slug, search for items using that slug, incrementing the slug name until\n * a unique value is found\n *\n * For example, if a slug of `\"snow-map\"` into this function and some item exists\n * with that slug, it would return `\"snow-map-1\"`.\n *\n * @param slug\n * @param requestOptions\n * @param step\n * @returns\n */\nfunction getUniqueSlug(slugInfo, requestOptions, step = 0) {\n    let combinedSlug = slugInfo.slug;\n    if (step) {\n        combinedSlug = `${slugInfo.slug}-${step}`;\n    }\n    return findItemsBySlug({ slug: combinedSlug, exclude: slugInfo.existingId }, requestOptions)\n        .then((results) => {\n        if (results.length) {\n            step++;\n            return getUniqueSlug(slugInfo, requestOptions, step);\n        }\n        else {\n            return combinedSlug;\n        }\n    })\n        .catch((e) => {\n        throw Error(`Error in getUniqueSlug ${e}`);\n    });\n}\n\n/**\n * Generic Hub Error with an Error stack as well\n * as an optional serialized OperationStack.\n *\n * Also accepts a `rootCause` Error object\n */\nclass HubError extends OperationError {\n    /**\n     * Creates an instance of HubError.\n     * @param {string} operation\n     * @param {string} [message]\n     * @param {Error} [rootCause]\n     * @memberof HubError\n     */\n    constructor(operation, message, rootCause) {\n        message = message || \"UNKNOWN_ERROR\";\n        // if the rootCause has a .rootCause, use that so we don't deeply nest\n        rootCause = getWithDefault(rootCause, \"rootCause\", rootCause);\n        /* Skip coverage on super(...) as per:\n           https://github.com/Microsoft/TypeScript/issues/13029\n           https://github.com/SitePen/remap-istanbul/issues/106\n        */\n        /* istanbul ignore next */\n        super(operation, message, rootCause);\n        this.name = \"HubError\";\n        // if the original error has a stack use it, otherwise create a new\n        // stack. Note: a new Stack will make it look like the error origninated\n        // in the HubError constructor. This is only an issue in tests but\n        // it can be confusing to debug\n        this.stack = getWithDefault(rootCause, \"stack\", new Error().stack);\n    }\n}\n\n/**\n * Given a string, return it as a blob\n * NOTE: USE objectToJsonBlob if you're saving a JSON resource!!!\n * NOTE: This is not currently supported in Node\n * @param {string} the string\n */\nfunction stringToBlob(s, type = \"application/octet-stream\") {\n    /* istanbul ignore next */\n    if (typeof Blob !== \"undefined\") {\n        const bytes = [];\n        for (let i = 0; i < s.length; i++) {\n            bytes[i] = s.charCodeAt(i);\n        }\n        const encoded = new Uint8Array(bytes);\n        return new Blob([encoded], { type });\n    }\n    else {\n        throw new Error(`stringToBlob is not currently supported on Node`);\n    }\n}\n\n/**\n * Convert an object to a Blob with type  'application/json'\n * @param {*} obj\n * @returns Blob\n */\nfunction objectToJsonBlob(obj) {\n    /* istanbul ignore next */\n    if (typeof Blob !== \"undefined\") {\n        return new Blob([JSON.stringify(obj)], { type: \"application/json\" });\n    }\n    else {\n        throw new Error(`objectToJsonBlob is not currently supported on Node`);\n    }\n}\n\n/**\n * Given an item, and owner, Search for if the resource exists\n * and if does, update it, otherwise add it. Returns a url for the item.\n *\n * @export\n * @param {string} id\n * @param {string} owner\n * @param {*} resource\n * @param {string} name\n * @param {IUserRequestOptions} ro\n * @param {string} [prefix=\"\"]\n * @return {*}  {Promise<string>}\n */\nasync function upsertResource(id, owner, resource, name, ro, prefix = \"\") {\n    try {\n        const extension = name.split(\".\").pop();\n        // Search against the item resources to see if the resource exists\n        const doesResourceExist = await getItemResources(id, ro).then((resp) => {\n            // if the resource exists, return true\n            const foundResource = resp.resources.find((e) => {\n                return e.resource === name;\n            });\n            return !!foundResource;\n        });\n        // if the resource exists, update it, otherwise add it\n        const resourceFunc = doesResourceExist\n            ? updateItemResource\n            : addItemResource;\n        // JSON and text resources have....odd things happen\n        // to them when they are added as resources and NOT\n        // converted to blobs. Thus we convert them to blobs\n        let resourceToUpload = resource;\n        if (extension === \"json\") {\n            resourceToUpload = objectToJsonBlob(resource);\n        }\n        if (extension === \"txt\") {\n            resourceToUpload = stringToBlob(resource);\n        }\n        // Add item resource\n        const response = await resourceFunc(Object.assign({ id,\n            owner, resource: resourceToUpload, name,\n            prefix }, ro));\n        // if err throw\n        if (!response.success) {\n            throw new HubError(\"Add Item Resource\", `Error adding resource ${name} to item ${id}.`);\n        }\n        // return url\n        const portalRestUrl = getPortalApiUrl(ro.portal);\n        const _prefix = prefix ? `${prefix}/` : \"\";\n        return `${portalRestUrl}/content/items/${id}/resources/${_prefix}${name}`;\n    }\n    catch (err) {\n        if (err instanceof Error) {\n            throw new HubError(\"Add Item Resource\", err.message, err);\n        }\n        else {\n            throw new HubError(\"Add Item Resource\", `Error adding resource ${name} to item ${id}.`);\n        }\n    }\n}\n\n/**\n * Gets the full item/data model for an item id\n * @param {string} id\n * @param {Object} requestOptions\n */\nfunction getModel(id, requestOptions) {\n    return Promise.all([\n        getItem(id, requestOptions),\n        getItemData(id, requestOptions),\n    ]).then((result) => {\n        // shape this into a model\n        return {\n            item: result[0],\n            data: result[1],\n        };\n    });\n}\n/**\n * Create an item to back and IModel.\n *\n * @param {IModel}\n * @param {IRequestOptions} requestOptions\n * @returns {Promise<IModel>}\n */\nfunction createModel(model, requestOptions) {\n    // const clone = cloneObject(model) as IModel;\n    const item = cloneObject(model.item);\n    item.data = cloneObject(model.data);\n    // Update extent from bbox to string\n    // TODO: remove below logic once rest.js is fixed.\n    if (item.extent && typeof item.extent !== \"string\") {\n        // THIS IS A HACK TO WORK AROUND REST.JS BUG\n        // and normally should never be done.\n        item.extent = bboxToString(item.extent);\n    }\n    const opts = Object.assign({ item }, requestOptions);\n    return createItem(opts).then((response) => {\n        // re-fetch the model so all the server-set properties\n        // are included in the response\n        return getModel(response.id, requestOptions);\n        // clone.item.created = new Date().getTime();\n        // clone.item.modified = clone.item.created;\n        // return clone as IModel;\n    });\n}\n/**\n * Update an IModel. Generic function that will be used across all\n * type-specific update functions\n *\n * @export\n * @param {IModel} \"model\" object (i.e. `{item:{...}, data:{...}}`)\n * @param {IRequestOptions} requestOptions\n * @returns {Promise<IModel>}\n */\nfunction updateModel(model, requestOptions) {\n    // const clone = cloneObject(model);\n    const item = cloneObject(model.item);\n    item.data = cloneObject(model.data);\n    // Update extent from bbox to string\n    // TODO: remove below logic once rest.js is fixed.\n    if (item.extent && typeof item.extent !== \"string\") {\n        // THIS IS A HACK TO WORK AROUND REST.JS BUG\n        // and normally should never be done.\n        item.extent = bboxToString(item.extent);\n    }\n    // If we have a field we are trying to clear (by making it an empty string like description / snippet)\n    // We need to send clearEmptyFields: true to the updateItem call\n    if (shouldClearEmptyFields(item)) {\n        requestOptions.params = Object.assign(Object.assign({}, requestOptions.params), { clearEmptyFields: true });\n    }\n    const opts = Object.assign({ item }, requestOptions);\n    return updateItem(opts).then(() => {\n        // To ensure we have the exact modified timestamp, we need to\n        // get the item again\n        return getModel(item.id, requestOptions);\n        // // update the modified prop\n        // // this won't be exact, but it will be very close\n        // clone.item.modified = new Date().getTime();\n        // return clone;\n    });\n}\n/**\n * Takes an IModel and an array of resources and upserts them to the\n * backing item. Then searches for the resources that were upserted\n * and attaches them to the model, which is returned.\n *\n * @export\n * @param {IModel} model\n * @param {Array<{\n *     resource: Record<string, any>;\n *     filename: string;\n *   }>} resources\n * @param {IUserRequestOptions} requestOptions\n * @return {*}  {Promise<IModel>}\n */\nasync function upsertModelResources(model, resources, requestOptions) {\n    // Set up promises array\n    const upsertPromises = [];\n    // loop through resources and create them\n    resources.forEach((value) => {\n        upsertPromises.push(upsertResource(model.item.id, model.item.owner, value.resource, value.filename, requestOptions));\n    });\n    // Promise.all to wait for all resources to be created\n    return Promise.all(upsertPromises).then(() => {\n        // Create a new object with the resources\n        const updatedResources = resources.reduce((acc, resource) => {\n            // Get the property name from the resource name\n            const prop = resource.filename.split(\".\").shift();\n            acc[prop] = resource.resource;\n            return acc;\n        }, {});\n        return Object.assign({ resources: updatedResources }, model);\n    });\n}\n/**\n * Given an Item, fetch the data json and return an IModel\n * @param item\n * @param requestOptions\n * @returns\n */\nasync function fetchModelFromItem(item, requestOptions) {\n    const data = await getItemData(item.id, requestOptions);\n    return {\n        item,\n        data,\n    };\n}\n/**\n * Given an item, and a list of resource name/prop pairs,\n * fetch the resources and return as an object for the IModel\n *\n * @export\n * @param {IItem} item\n * @param {{\n *     [key: string]: string\n *   }} resourceNamePairs\n * @param {IRequestOptions} requestOptions\n * @return {*}  {Promise<Record<string, any>>}\n */\nasync function fetchModelResources(item, resourceNamePairs, requestOptions) {\n    // Iterate through the resource name/prop pairs and fetch the resources\n    return Object.entries(resourceNamePairs).reduce(async (acc, [key, value]) => {\n        // failsafe to prevent errors returns falsy if error\n        const failSafeGetResource = failSafe(getItemResource, null);\n        // get the resource\n        const resp = await failSafeGetResource(item.id, Object.assign({ fileName: value, \n            // Must be \"arrayBuffer\" | \"blob\" | \"formData\" | \"json\" | \"text\";\n            readAs: value.split(\".\").pop() }, requestOptions));\n        // if the failsafe succeeds\n        if (resp) {\n            // Update the acc with the prop and resource\n            acc[key] = resp;\n        }\n        return acc;\n    }, {});\n}\n/**\n * Given an Item, determine if there are any fields to be cleared\n *\n * @param {IItem} item\n * @return {*} boolean\n */\nfunction shouldClearEmptyFields(item) {\n    return [\"description\", \"snippet\"].some((field) => item[field] === \"\");\n}\n\n/**\n * @private\n * Manage forward and backward property mappings to\n * streamline conversion between the Hub entities, and\n * the backing IModel\n */\nclass PropertyMapper {\n    /**\n     * Pass in the mappings between the Entity and\n     * it's backing structure (model or otherwise)\n     * @param mappings\n     */\n    constructor(mappings) {\n        this.mappings = mappings;\n    }\n    /**\n     * Map properties from a model on to the entity object.\n     *\n     * Used when constructing an entity can from a fetched model,\n     * in which case the entity should be an empty object (`{}`).\n     *\n     * Can also be used to apply changes to an entity from a model,\n     * in which case an existing entity can be passed in.\n     * @param model\n     * @param object\n     * @returns\n     */\n    modelToObject(model, object) {\n        const obj = mapModelToObject(model, object, this.mappings);\n        // Additional Read-Only Model Level Property Mappings\n        // ------------------------------\n        // canEdit and canDelete\n        // ------------------------------\n        // use setProp to side-step typechecking\n        setProp(\"canEdit\", [\"admin\", \"update\"].includes(model.item.itemControl), obj);\n        setProp(\"canDelete\", model.item.itemControl === \"admin\", obj);\n        return obj;\n    }\n    /**\n     * Map properties from an entity object onto a model.\n     *\n     * Typically the model will already exist, and this\n     * method is used to transfer changes to the model\n     * prior to storage.\n     * @param object\n     * @param model\n     * @returns\n     */\n    objectToModel(object, model) {\n        return mapObjectToModel(object, model, this.mappings);\n    }\n}\n/**\n * Generic function to apply properties from an Object\n * (i.e. IHubProject) onto a Model that can be persisted to an Item\n * @param object\n * @param model\n * @param mappings\n * @returns\n */\nfunction mapObjectToModel(object, model, mappings) {\n    return mapProps(object, \"objectKey\", model, \"modelKey\", mappings);\n}\n/**\n * Generic function to apply properties from a Model\n * onto an Object (i.e. IHubProject etc)\n * @param model\n * @param object\n * @param mappings\n * @returns\n */\nfunction mapModelToObject(model, object, mappings) {\n    return mapProps(model, \"modelKey\", object, \"objectKey\", mappings);\n}\n/**\n * Internal function to map between objects\n * @param source\n * @param sourceKey\n * @param target\n * @param targetKey\n * @param mappings\n * @returns\n */\nfunction mapProps(source, sourceKey, target, targetKey, mappings) {\n    // clone the target\n    const clone = cloneObject(target);\n    // walk the property map array\n    mappings.forEach((entry) => {\n        // Verbose b/c typescript hates the use of property indexing with generics\n        // i.e. entry<T>[sourceKey] make typescript angry\n        const sourcePath = getProp(entry, sourceKey);\n        const targetPath = getProp(entry, targetKey);\n        // get the value from the source\n        const sourceVal = getProp(source, sourcePath);\n        // if it's not null or undefined\n        if (sourceVal !== null && sourceVal !== undefined) {\n            // set it\n            deepSet(clone, targetPath, sourceVal);\n        }\n    });\n    return clone;\n}\n\n/**\n * Returns an Array of IPropertyMap objects\n * that define the standard projection of properties from a IModel an entity interface\n * @returns\n */\nfunction getBasePropertyMap() {\n    const itemProps = [\n        \"access\",\n        \"created\",\n        \"culture\",\n        \"description\",\n        \"extent\",\n        \"id\",\n        \"itemControl\",\n        \"modified\",\n        \"owner\",\n        \"tags\",\n        \"type\",\n        \"typeKeywords\",\n        \"thumbnail\",\n        \"url\",\n    ];\n    const dataProps = [\"display\", \"geometry\", \"view\"];\n    const resourceProps = Object.keys(EntityResourceMap);\n    const map = [];\n    itemProps.forEach((entry) => {\n        map.push({ objectKey: entry, modelKey: `item.${entry}` });\n    });\n    dataProps.forEach((entry) => {\n        map.push({ objectKey: entry, modelKey: `data.${entry}` });\n    });\n    resourceProps.forEach((entry) => {\n        map.push({ objectKey: entry, modelKey: `resources.${entry}` });\n    });\n    // Deeper mappings\n    map.push({\n        objectKey: \"slug\",\n        modelKey: \"item.properties.slug\",\n    });\n    map.push({\n        objectKey: \"summary\",\n        modelKey: \"item.snippet\",\n    });\n    map.push({\n        objectKey: \"schemaVersion\",\n        modelKey: \"item.properties.schemaVersion\",\n    });\n    map.push({\n        objectKey: \"orgUrlKey\",\n        modelKey: \"item.properties.orgUrlKey\",\n    });\n    map.push({\n        objectKey: \"name\",\n        modelKey: \"item.title\",\n    });\n    map.push({\n        objectKey: \"boundary\",\n        modelKey: \"item.properties.boundary\",\n    });\n    return map;\n}\n\n/**\n * Take an entity's capabilities and merge them with the default capabilities ensuring that only the capabilities defined in the business rules are allowed through.\n * @param entityCapabilities\n * @param defaultCapabilities\n * @returns\n */\nfunction processEntityCapabilities(entityCapabilities, defaultCapabilities) {\n    // Extend the default capabilities with the entity capabilities\n    const capabilities = Object.assign(Object.assign({}, defaultCapabilities), entityCapabilities);\n    // Remove any capabilities that are not in the default capabilities hash.\n    // this prevents enabling capabilities that are not defined in hub business rules\n    const defaultKeys = Object.keys(defaultCapabilities);\n    const keysToRemove = Object.keys(capabilities).reduce((acc, key) => {\n        if (!defaultKeys.includes(key)) {\n            acc.push(key);\n        }\n        return acc;\n    }, []);\n    // remove any keys that are not in the default capabilities hash\n    keysToRemove.forEach((key) => {\n        delete capabilities[key];\n    });\n    return capabilities;\n}\n\n/**\n * Given a model and a project, set various computed properties that can't be directly mapped\n * @private\n * @param model\n * @param project\n * @param requestOptions\n * @returns\n */\nfunction computeProps(model, project, requestOptions) {\n    var _a;\n    let token;\n    if (requestOptions.authentication) {\n        const session = requestOptions.authentication;\n        token = session.token;\n    }\n    // thumbnail url\n    project.thumbnailUrl = getItemThumbnailUrl(model.item, requestOptions, token);\n    // Handle Dates\n    project.createdDate = new Date(model.item.created);\n    project.createdDateSource = \"item.created\";\n    project.updatedDate = new Date(model.item.modified);\n    project.updatedDateSource = \"item.modified\";\n    // Handle capabilities\n    project.capabilities = processEntityCapabilities(((_a = model.data.settings) === null || _a === void 0 ? void 0 : _a.capabilities) || {}, ProjectDefaultCapabilities);\n    // cast b/c this takes a partial but returns a full project\n    return project;\n}\n\n/**\n * Returns an Array of IPropertyMap objects\n * that define the projection of properties from a IModel to an IHubProject\n * @returns\n * @private\n */\nfunction getPropertyMap() {\n    const map = getBasePropertyMap();\n    /**\n     * project-specific mappings. Note: we do not need to explicitly map\n     * properties from the project item's data.view into the entity's view\n     * because that mapping is already defined in the base property map\n     */\n    map.push({ objectKey: \"status\", modelKey: \"data.status\" });\n    map.push({ objectKey: \"catalog\", modelKey: \"data.catalog\" });\n    map.push({ objectKey: \"permissions\", modelKey: \"data.permissions\" });\n    map.push({\n        objectKey: \"capabilities\",\n        modelKey: \"data.settings.capabilities\",\n    });\n    return map;\n}\n\nexport { EntityResourceMap as E, HubError as H, PropertyMapper as P, getItemBySlug as a, getUniqueSlug as b, getModel as c, updateModel as d, constructSlug as e, fetchModelFromItem as f, getBasePropertyMap as g, getPropertyMap as h, createModel as i, upsertModelResources as j, computeProps as k, fetchModelResources as l, processEntityCapabilities as p, setSlugKeyword as s, upsertResource as u };\n","import { g as genericSearch } from './generic-search-069e22da.js';\n\n/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { searchItems } from \"@esri/arcgis-rest-portal\";\n * //\n * searchItems('water')\n *   .then(response) // response.total => 355\n * ```\n * Search a portal for items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/search.htm) for more information.\n *\n * @param search - A string or RequestOptions object to pass through to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nfunction searchItems(search) {\n    return genericSearch(search, \"item\");\n}\n\nexport { searchItems as s };\n","import { c as cloneObject } from './util-3c40fe6c.js';\n\n/**\n * Deep set function. Like Ember.set, but smarter as it will create the path\n * @param {Object} target Object we want to set the property on\n * @param {String} path Dotted path to the property we want to set\n * @param {Any} value Value we want to assign to the property\n */\nfunction deepSet(target, path, value = {}) {\n    const parts = path.split(\".\");\n    let worker = target;\n    const lastIdx = parts.length - 1;\n    parts.forEach((p, idx) => {\n        if (!worker.hasOwnProperty(p) || worker[p] == null) {\n            if (idx === lastIdx) {\n                worker[p] = value;\n            }\n            else {\n                // keep building the path\n                worker[p] = {};\n            }\n        }\n        else if (idx === lastIdx) {\n            if (typeof worker[p] === \"object\" && !Array.isArray(worker[p])) {\n                worker[p] = Object.assign(worker[p], cloneObject(value));\n            }\n            else {\n                worker[p] = value;\n            }\n        }\n        worker = worker[p];\n    });\n}\n\n/**\n * Sets a deep object property, constructing the property path as necessary\n *\n * @param path - the path to the property we want to set\n * @param val - the value we want to set it to\n * @param obj - the target object\n */\nfunction setProp(path, val, obj) {\n    if (Array.isArray(path)) {\n        path = path.join(\".\");\n    }\n    deepSet(obj, path, val);\n}\n\nexport { deepSet as d, setProp as s };\n","import { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { d as determineOwner, s as serializeItem, i as isBBox, b as bboxToString } from './get-f2cd18e7.js';\nimport { r as request } from './request-c15cc2af.js';\n\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { updateItem } from \"@esri/arcgis-rest-portal\";\n * //\n * updateItem({\n *   item: {\n *     id: \"3ef\",\n *     description: \"A three hour tour\"\n *   },\n *   authentication\n * })\n *   .then(response)\n * ```\n * Update an Item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that updates an item.\n */\nfunction updateItem(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = requestOptions.folderId\n            ? getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/\" + requestOptions.folderId + \"/items/\" + requestOptions.item.id + \"/update\"\n            : getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.item.id + \"/update\";\n        // serialize the item into something Portal will accept\n        requestOptions.params = __assign(__assign({}, requestOptions.params), serializeItem(requestOptions.item));\n        // convert extent, if present, into a string from bbox\n        // processParams was previously doing this sort of work,\n        // however now we need to let array of arrays through\n        // Thus for extents we need to move this logic here\n        if (requestOptions.params.extent && isBBox(requestOptions.params.extent)) {\n            requestOptions.params.extent = bboxToString(requestOptions.params.extent);\n        }\n        return request(url, requestOptions);\n    });\n}\n/**\n * ```js\n * import { updateItemResource } from \"@esri/arcgis-rest-portal\";\n * //\n * updateItemResource({\n *   id: '3ef',\n *   resource: file,\n *   name: 'bigkahuna.jpg',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Update a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that updates an item resource.\n */\nfunction updateItemResource(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/updateResources\";\n        // mix in user supplied params\n        requestOptions.params = __assign({ file: requestOptions.resource, fileName: requestOptions.name, resourcesPrefix: requestOptions.prefix, text: requestOptions.content }, requestOptions.params);\n        // only override the access specified previously if 'private' is passed explicitly\n        if (typeof requestOptions.private !== \"undefined\") {\n            requestOptions.params.access = requestOptions.private\n                ? \"private\"\n                : \"inherit\";\n        }\n        return request(url, requestOptions);\n    });\n}\n/**\n * ```js\n * import { moveItem } from \"@esri/arcgis-rest-portal\";\n * //\n * moveItem({\n *   itemId: \"3ef\",\n *   folderId: \"7c5\",\n *   authentication: userSession\n * })\n * ```\n * Move an item to a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/move-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with owner and folder details once the move has been completed\n */\nfunction moveItem(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.itemId + \"/move\";\n        var folderId = requestOptions.folderId;\n        if (!folderId) {\n            folderId = \"/\";\n        }\n        requestOptions.params = __assign({ folder: folderId }, requestOptions.params);\n        return request(url, requestOptions);\n    });\n}\n\nexport { updateItemResource as a, moveItem as m, updateItem as u };\n"],"names":["ProjectDefaultCapabilities","overview","details","settings","ProjectCapabilityPermissions","entity","capability","permissions","ProjectPermissions","ProjectPermissionPolicies","permission","subsystems","authenticated","privileges","licenses","entityEdit","entityOwner","createFolder","requestOptions","determineOwner","then","owner","url","getPortalUrl","params","__assign","title","request","createItem","multipart","filename","Promise","reject","Error","baseUrl","folderId","serializeItem","item","extent","isBBox","bboxToString","options","appendCustomParams","createItemInFolder","failSafe","fn","resolveWith","catch","_","warn","message","console","apply","SearchQueryBuilder","q","this","termStack","rangeStack","openGroups","prototype","match","terms","_i","arguments","length","concat","in","field","hasRange","hasTerms","commit","startGroup","endGroup","and","addModifier","or","not","from","term","to","boost","num","toParam","cleanup","clone","modifier","currentModifer","toUpperCase","needsQuotes","s","test","formatTerm","Date","getTime","_this","undefined","map","join","Object","defineProperty","get","enumerable","configurable","oldQ","replace","genericSearch","search","searchType","path","httpMethod","groupId","r","nextStart","nextPage","newOptions","start","addItemResource","id","file","resource","fileName","name","resourcesPrefix","prefix","text","content","access","private","EntityResourceMap","location","constructSlug","orgKey","toLowerCase","value","trim","setSlugKeyword","typeKeywords","slug","removed","filter","entry","startsWith","push","getItemBySlug","findItemsBySlug","results","slugInfo","opts","authentication","portal","exclude","searchItems","response","e","getUniqueSlug","step","combinedSlug","existingId","HubError","operation","rootCause","getWithDefault","stack","OperationError","stringToBlob","type","Blob","bytes","i","charCodeAt","encoded","Uint8Array","objectToJsonBlob","obj","JSON","stringify","upsertResource","ro","extension","split","pop","getItemResources","resp","resources","find","doesResourceExist","resourceFunc","updateItemResource","resourceToUpload","assign","success","portalRestUrl","getPortalApiUrl","_prefix","getModel","all","getItem","getItemData","result","data","createModel","model","cloneObject","updateModel","some","shouldClearEmptyFields","clearEmptyFields","updateItem","upsertModelResources","upsertPromises","forEach","updatedResources","reduce","acc","shift","fetchModelFromItem","fetchModelResources","resourceNamePairs","entries","key","failSafeGetResource","getItemResource","readAs","PropertyMapper","mappings","object","mapProps","mapModelToObject","setProp","includes","itemControl","mapObjectToModel","source","sourceKey","target","targetKey","sourcePath","getProp","targetPath","sourceVal","deepSet","getBasePropertyMap","resourceProps","keys","objectKey","modelKey","processEntityCapabilities","entityCapabilities","defaultCapabilities","capabilities","defaultKeys","computeProps","project","_a","token","thumbnailUrl","getItemThumbnailUrl","createdDate","created","createdDateSource","updatedDate","modified","updatedDateSource","getPropertyMap","parts","worker","lastIdx","p","idx","hasOwnProperty","Array","isArray","val","moveItem","itemId","folder"],"sourceRoot":""}