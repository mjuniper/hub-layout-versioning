{"version":3,"file":"static/js/96027.2ce2b578.chunk.js","mappings":"gOAIMA,EAAc,WAClB,WAAYC,IAAS,gBACnBC,EAAAA,EAAAA,GAAiBC,KAAMF,GAIvBE,KAAKC,OAAS,IAIdD,KAAKE,UAAW,EAIhBF,KAAKG,QAAS,EAIdH,KAAKI,eAAgB,EAIrBJ,KAAKK,gBAAiB,EAItBL,KAAKM,gBAAiB,EAItBN,KAAKO,YAAa,EAIlBP,KAAKQ,aAAc,EAInBR,KAAKS,YAAa,CACpB,CAiDC,OAhDD,4BAGA,WACE,IAAMC,EAAY,GAOlB,IACE,IAAMC,EAAY,IAAIC,IAAIZ,KAAKa,KAAKC,OACpCd,KAAKE,UAAYQ,EAAUK,KAAK,YAAD,OAAaJ,EAAS,MACrDX,KAAKG,QAAUO,EAAUK,KAAK,UAAD,OAAWJ,EAAS,MACjDX,KAAKI,eAAiBM,EAAUK,KAAK,kBAAD,OAAmBJ,EAAS,MAChEX,KAAKK,gBAAkBK,EAAUK,KAAK,mBAAD,OAAoBJ,EAAS,MAClEX,KAAKM,gBAAkBI,EAAUK,KAAK,mBAAD,OAAoBJ,EAAS,MAClEX,KAAKO,YAAcG,EAAUK,KAAK,cAAD,OAAeJ,EAAS,MACzDX,KAAKQ,aAAeE,EAAUK,KAAK,eAAD,OAAgBJ,EAAS,MAC3DX,KAAKS,YAAcC,EAAUK,KAAK,cAAD,OAAeJ,EAAS,KAI3D,CAFA,MAAOK,GACLC,QAAQC,KAAKF,EACf,CACA,OAAON,EAAUS,KAAK,IACxB,GAAC,sBACD,WACE,IAAIC,EAAYpB,KAAKa,IAEhBb,KAAKa,MACRO,OAAYC,GAGd,IACE,IAAIT,IAAIZ,KAAKa,KAAKC,MAIpB,CAFA,MAAOE,GACLI,OAAYC,CACd,CACA,OAAOD,CACT,GACA,0BACA,WACE,OAAOpB,KAAKsB,aAAcC,EAAAA,EAAAA,GAAE,SAAU,CAAEC,MAAOxB,KAAKyB,OAAQxB,OAAQD,KAAKC,OAAQY,IAAKb,KAAKsB,WAAYI,MAAO1B,KAAK2B,aACrH,GAAC,oBACD,WACE,OAAQJ,EAAAA,EAAAA,GAAEK,EAAAA,EAAM,CAAE,eAAgB,SAAW5B,KAAK6B,eACpD,KAAC,EAxFiB,GA0FpBhC,EAAeiC,MA5FW,mD","sources":["../node_modules/@esri/hub-components/dist/esm/arcgis-hub-embed.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host } from './index-0d95d9d4.js';\n\nconst arcgisHubEmbedCss = \":host{display:flex}iframe{border:none;width:100%}\";\n\nconst ArcgisHubEmbed = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The height of the iframe in pixels.\n     */\n    this.height = 150;\n    /**\n     * Property for allow attribute on the iframe. Determines if the iframe can autoplay media that is requested.\n     */\n    this.autoplay = false;\n    /**\n     * Property for allow attribute on the iframe. Determines if the iframe can use video input devices.\n     */\n    this.camera = false;\n    /**\n     * Property for allow attribute on the iframe. Determines if the iframe can read from the clipboard.\n     */\n    this.clipboardRead = false;\n    /**\n     * Property for allow attribute on the iframe. Determines if the iframe can write to the clipboard.\n     */\n    this.clipboardWrite = false;\n    /**\n     * Property for allow attribute on the iframe. Determines if the iframe can use getDisplayMedia() method to capture screen contents.\n     */\n    this.displayCapture = false;\n    /**\n     * Property for allow attribute on the iframe. Determines if the iframe can request to be fullscreen.\n     */\n    this.fullscreen = false;\n    /**\n     * Property for allow attribute on the iframe. Determines if the iframe can use the geolocation interface to get information like current position.\n     */\n    this.geolocation = false;\n    /**\n     * Property for allow attribute on the iframe. Determines if the iframe can request to use audio input devices.\n     */\n    this.microphone = false;\n  }\n  /**\n   * Builds a custom allow string for the iframe\n   */\n  get _allow() {\n    const allowList = [];\n    /**\n     * In the future, there could be more than one origin for some or all directives,\n     * specified by the user.\n     * In this case, we could pass the origins down to this component for each directive\n     * as a list, and then apply them here\n     *  */\n    try {\n      const srcOrigin = new URL(this.src).origin;\n      this.autoplay && allowList.push(`autoplay ${srcOrigin};`);\n      this.camera && allowList.push(`camera ${srcOrigin};`);\n      this.clipboardRead && allowList.push(`clipboard-read ${srcOrigin};`);\n      this.clipboardWrite && allowList.push(`clipboard-write ${srcOrigin};`);\n      this.displayCapture && allowList.push(`display-capture ${srcOrigin};`);\n      this.fullscreen && allowList.push(`fullscreen ${srcOrigin};`);\n      this.geolocation && allowList.push(`geolocation ${srcOrigin};`);\n      this.microphone && allowList.push(`microphone ${srcOrigin};`);\n    }\n    catch (error) {\n      console.warn(error);\n    }\n    return allowList.join(' ');\n  }\n  get _iframeSrc() {\n    let iframeSrc = this.src;\n    // if no src is given or if there is an error loading the src, mark src as undefined\n    if (!this.src) {\n      iframeSrc = undefined;\n    }\n    // try to make a url out of src; if not, then invalid for sure\n    try {\n      new URL(this.src).origin;\n    }\n    catch (error) {\n      iframeSrc = undefined;\n    }\n    return iframeSrc;\n  }\n  // if no src is given, do not render iframe\n  renderIframe() {\n    return this._iframeSrc && h(\"iframe\", { allow: this._allow, height: this.height, src: this._iframeSrc, title: this.iframeTitle });\n  }\n  render() {\n    return (h(Host, { \"data-element\": \"embed\" }, this.renderIframe()));\n  }\n};\nArcgisHubEmbed.style = arcgisHubEmbedCss;\n\nexport { ArcgisHubEmbed as arcgis_hub_embed };\n"],"names":["ArcgisHubEmbed","hostRef","registerInstance","this","height","autoplay","camera","clipboardRead","clipboardWrite","displayCapture","fullscreen","geolocation","microphone","allowList","srcOrigin","URL","src","origin","push","error","console","warn","join","iframeSrc","undefined","_iframeSrc","h","allow","_allow","title","iframeTitle","Host","renderIframe","style"],"sourceRoot":""}