{"version":3,"file":"static/js/44288.6dd3b491.chunk.js","mappings":"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","sources":["../node_modules/@esri/hub-components/dist/esm/HubSites-95889869.js","../node_modules/@esri/hub-components/dist/esm/SiteBusinessRules-05d0a02f.js"],"sourcesContent":["import { i as includes, g as getFamily, m as getHubRelativeUrl } from './_internal-89d3dc92.js';\nimport { c as getModel, p as processEntityCapabilities, g as getBasePropertyMap, P as PropertyMapper, s as setSlugKeyword, d as updateModel } from './getPropertyMap-598a7bb8.js';\nimport { c as cloneObject, u as unique } from './util-3c40fe6c.js';\nimport { g as getProp } from './get-prop-d82e4fa6.js';\nimport { i as isGuid } from './is-guid-8127621d.js';\nimport { s as setProp } from './set-prop-91329c47.js';\nimport { s as searchItems } from './search-3af9e278.js';\nimport { f as fetchItemEnrichments } from './_enrichments-7716cdcc.js';\nimport { c as SiteDefaultCapabilities, m as mapBy } from './SiteBusinessRules-05d0a02f.js';\nimport { a as getItemThumbnailUrl } from './get-item-thumbnail-url-7e5ae2fd.js';\n\n/**\n * Remove protocol if present\n * @param {string} hostname Hostname\n */\nfunction stripProtocol(hostname) {\n    hostname = hostname.toLowerCase();\n    if (hostname.includes(\"//\")) {\n        hostname = hostname.split(\"//\")[1];\n    }\n    return hostname;\n}\n\n/**\n * Extract the domain service from the request options\n * @param {string} hubApiUrl\n * @private\n */\nfunction _getDomainServiceUrl(hubApiUrl) {\n    const base = hubApiUrl || \"https://hub.arcgis.com\";\n    return `${base}/api/v3/domains`;\n}\n\n/**\n * Construct the auth header from a hub request options\n * @param {IHubRequestOptions} hubRequestOptions\n * @private\n */\nfunction _getAuthHeader(hubRequestOptions) {\n    const result = {};\n    const token = getProp(hubRequestOptions, \"authentication.token\");\n    if (token) {\n        result.Authorization = token;\n    }\n    return result;\n}\n\n/**\n * Delete a property from an object using a deep path\n * MODIFIES PASSED TARGET\n * @param {Object} target Object from which we want to delete the property\n * @param {string} path Dotted path to the property we want to delete\n */\nfunction deleteProp(target, lookupStr) {\n    if (typeof target !== \"object\" || target === null)\n        return;\n    if (typeof lookupStr !== \"string\")\n        return;\n    const lookupKeys = lookupStr.split(\".\");\n    for (let i = 0; i < lookupKeys.length - 1; i++) {\n        if (!target.hasOwnProperty(lookupKeys[i]))\n            return;\n        target = target[lookupKeys[i]];\n    }\n    delete target[lookupKeys[lookupKeys.length - 1]];\n}\n\n/**\n * Parse an IncludeSpec from the include string\n * Include String structure:\n * - `enrichment{.deep.path} AS propertyName`\n *\n * Examples\n * - `server.layers.0.name as layerName` -> use the `server` enrichment, extract the name of the first layer and attach that as `layerName`\n * - `server.layers` ->  use the `server` enrichment, attach the `layers` array as `layers`\n * @param include\n * @returns\n */\nfunction parseInclude(include) {\n    // TODO: Validate enrichment? Not clear how we'd do that other than a manully maintained string list\n    const parts = include.split(\" AS \");\n    const path = parts[0];\n    const prop = parts[1] || path.split(\".\").reverse()[0];\n    const enrichment = path.split(\".\")[0];\n    // We need the actual list of string values so we can verify\n    // what we get in, is infact a valid enrichment.\n    const spec = {\n        enrichment,\n        path,\n        prop,\n    };\n    return spec;\n}\n\n/**\n * Parse a response object, and throw if it contains an error.\n * Just a wrapper to hide some platform idiosyncracies\n * @param {Response} response Response object to parse\n * @private\n */\nasync function _checkStatusAndParseJson(response) {\n    if (response.status >= 200 && response.status < 300) {\n        // don't try to parse the body if it's empty\n        // if (response.body) { // the fetch polyfill for IE... does not expose a body property... :(\n        return response.json();\n        // }\n    }\n    else {\n        // we're gonna throw, but we need to construct the error\n        return response.json().then((json) => {\n            if (json.error) {\n                const error = new Error(`${json.error.title} :: ${json.error.detail} :: ${response.status}`);\n                throw error;\n            }\n            else {\n                throw new Error(`Got ${response.status} ${response.statusText}`);\n            }\n        });\n    }\n}\n\n/**\n * Lookup a domain in Portal\n * @param {string} hostname to locate the site for\n * @param {IRequestOptions} requestOptions\n * @private\n */\nfunction _lookupPortal(hostname, requestOptions) {\n    // for portal we search for a site w/ `hubsubdomain|<domain>` type keyword\n    let subdomain = hostname;\n    // if this subdomain has a hash in it, knock that off\n    if (hostname.indexOf(\"#/\") > -1) {\n        subdomain = hostname.split(\"#/\")[1];\n    }\n    const queryTerm = `hubsubdomain|${subdomain}`;\n    const opts = Object.assign({\n        q: `typekeywords: ${queryTerm}`,\n    }, requestOptions);\n    return searchItems(opts)\n        .then((res) => {\n        // since the search api stems the terms, we need to verify\n        // by looking at the results\n        return res.results.filter((r) => {\n            return includes(r.typeKeywords, queryTerm);\n        })[0];\n    })\n        .then((site) => {\n        if (!site)\n            throw new Error(\"site not found\");\n        return {\n            hostname: site.url,\n            siteId: site.id,\n        };\n    });\n}\n\n/**\n * Create an entry in the domain system\n * @param {IHubDomain} domainEntry Domain hash to be stored\n * @param {IHubRequestOptions} hubRequestOptions\n */\nfunction addDomain(domainEntry, hubRequestOptions) {\n    if (hubRequestOptions.isPortal) {\n        throw new Error(`addDomain is not available in ArcGIS Enterprise. Instead, edit the hubdomain typekeyword on the item`);\n    }\n    const headers = _getAuthHeader(hubRequestOptions);\n    headers[\"Content-Type\"] = \"application/json\";\n    const url = `${_getDomainServiceUrl(hubRequestOptions.hubApiUrl)}`;\n    // handle case of siteTitle being numeric\n    const title = domainEntry.siteTitle;\n    if (typeof title === \"number\") {\n        domainEntry.siteTitle = title.toString();\n    }\n    return fetch(url, {\n        method: \"POST\",\n        headers,\n        mode: \"cors\",\n        body: JSON.stringify(domainEntry),\n    }).then(_checkStatusAndParseJson);\n}\n\n/**\n * Fetch a the information about a domain.\n * Different implementation for Portal vs AGO\n * @param {string} hostname of domain record to locate\n * @param {IHubRequestOptions} hubRequestOptions\n */\nfunction lookupDomain(hostname, hubRequestOptions) {\n    if (hubRequestOptions.isPortal) {\n        return _lookupPortal(hostname, hubRequestOptions);\n    }\n    else {\n        const url = `${_getDomainServiceUrl(hubRequestOptions.hubApiUrl)}/${hostname}`;\n        const headers = _getAuthHeader(hubRequestOptions);\n        return fetch(url, { method: \"GET\", headers, mode: \"cors\" }).then(_checkStatusAndParseJson);\n    }\n}\n\n/**\n * Remove a domain entry.\n * User must be a member of the org that owns the domain entry.\n * @param {int} domainId Id of the domain entry to remove\n * @param {IHubRequestOptions} hubRequestOptions`dom\n */\nfunction removeDomain(domainId, hubRequestOptions) {\n    if (hubRequestOptions.isPortal) {\n        throw new Error(`removeDomain is not available in ArcGIS Enterprise. Instead, edit the hubdomain typekeyword on the item`);\n    }\n    const headers = _getAuthHeader(hubRequestOptions);\n    headers[\"Content-Type\"] = \"application/json\";\n    const url = `${_getDomainServiceUrl(hubRequestOptions.hubApiUrl)}/${domainId}`;\n    return fetch(url, { method: \"DELETE\", headers, mode: \"cors\" }).then(_checkStatusAndParseJson);\n}\n\n// These will be spied on in tests\n/**\n * Remove an entry from the domain service, based on a hostname\n *\n * Callers must ensure the user is a member of the org that\n * owns the domain entry else the call will fail.\n * @param hostname\n * @param hubRequestOptions\n */\nasync function removeDomainByHostname(hostname, hubRequestOptions) {\n    if (hubRequestOptions.isPortal) {\n        throw new Error(`removeDomainByHostname is not available in ArcGIS Enterprise. Instead, edit the hubdomain typekeyword on the item`);\n    }\n    try {\n        const domainEntry = await lookupDomain(hostname, hubRequestOptions);\n        // Could consider doing a check here to verify that current user\n        // is member of the org owning the domain record, but api will\n        // enforce this.\n        const id = getProp(domainEntry, \"id\");\n        if (id) {\n            await removeDomain(id, hubRequestOptions);\n        }\n    }\n    catch (ex) {\n        throw new Error(`Error removing domain entry for ${hostname}: ${ex}`);\n    }\n}\n\nconst SITE_SCHEMA_VERSION = 1.5;\n\n/**\n * Apply the first schema version to the item\n * @param {Object} model Site Model\n * @private\n */\nfunction _applySiteSchema(model) {\n    // if this has already been thru this step... skip it...\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1)\n        return model;\n    const clone = cloneObject(model);\n    // proactively purge old properties\n    [\"groupId\", \"title\"].forEach((prop) => {\n        delete clone.data.values[prop];\n    });\n    // ensure item.properties\n    if (!clone.item.properties) {\n        clone.item.properties = {};\n    }\n    clone.item.properties.schemaVersion = 1;\n    // Groups!\n    if (clone.data.values.groups && Array.isArray(clone.data.values.groups)) {\n        // we have some groups arrays in prod where the contents are a mix of strings and objects.\n        // we need to ensure this is just an array of groupIds...\n        const groupIds = clone.data.values.groups\n            .map((entry) => {\n            if (typeof entry === \"object\") {\n                return entry.id;\n            }\n            else {\n                return entry;\n            }\n        })\n            .filter((entry) => !!entry);\n        // now assign this back to the groups\n        clone.data.values.groups = groupIds;\n    }\n    return clone;\n}\n\n/**\n * Enforce lowercase domains\n * @param {Object} model Site Model\n * @private\n */\nfunction _enforceLowercaseDomains(model) {\n    // exit if this has been applied...\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.1)\n        return model;\n    const clone = cloneObject(model);\n    // all the possible domain properties must be lower case\n    [\n        \"subdomain\",\n        \"defaultHostname\",\n        \"internalUrl\",\n        \"customHostname\",\n        \"externalUrl\",\n    ].forEach((prop) => {\n        if (clone.data.values[prop] &&\n            typeof clone.data.values[prop] === \"string\") {\n            clone.data.values[prop] = clone.data.values[prop].toLowerCase();\n        }\n    });\n    // bump the schemaVersion\n    clone.item.properties.schemaVersion = 1.1;\n    return clone;\n}\n\n/**\n * Move the data.values.groups array into the\n * data.catalog object\n * @param {Object} model Site Model\n * @private\n */\nfunction _ensureCatalog(model) {\n    // early exit\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.2)\n        return model;\n    const clone = cloneObject(model);\n    const catalog = getProp(clone, \"data.catalog\") || {};\n    if (getProp(clone, \"data.values.groups\")) {\n        catalog.groups = cloneObject(clone.data.values.groups);\n        delete clone.data.values.groups;\n    }\n    clone.data.catalog = catalog;\n    // bump the schemaVersion\n    clone.item.properties.schemaVersion = 1.2;\n    return clone;\n}\n\n/**\n * Remove any non-guid entries from the data catalog groups array\n * @param {object} model Site Model\n * @private\n */\nfunction _purgeNonGuidsFromCatalog(model) {\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.3)\n        return model;\n    const clone = cloneObject(model);\n    const groups = getProp(clone, \"data.catalog.groups\") || [];\n    clone.data.catalog.groups = groups.filter(isGuid);\n    clone.item.properties.schemaVersion = 1.3;\n    return clone;\n}\n\n/**\n * Add telemetry config object\n * @private\n * @param {object} model Site Model\n * @returns {object}\n */\nfunction _ensureTelemetry(model) {\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.4)\n        return model;\n    const clone = cloneObject(model);\n    const gacode = getProp(clone, \"data.values.gacode\");\n    clone.data.values.telemetry = {\n        consentNotice: {\n            isTheme: true,\n            consentText: \"\",\n            policyURL: \"\",\n        },\n        customAnalytics: {\n            ga: {\n                customerTracker: {\n                    enabled: Boolean(gacode),\n                    id: gacode,\n                },\n            },\n        },\n    };\n    deleteProp(clone, \"data.values.gacode\");\n    setProp(\"item.properties.schemaVersion\", 1.4, clone);\n    return clone;\n}\n\n/**\n * Migrates the site so it can store configurations for multiple feed formats\n * (dcat-us-1.1, dcat-ap-2.0.1, etc.). If the site has an existing custom\n * configuration for dcat-us 1.1, a copy of that configuration will be modified\n * to use values from the v3 api instead of values from the index.\n *\n * Structural Impacts:\n * - site.data.feeds will be added.\n * - site.data.feeds.dcatUS11 will be added if site.data.values.dcatConfig exists.\n *\n * @param {object} model Site Model\n * @private\n */\nfunction _migrateFeedConfig(model) {\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.5)\n        return model;\n    const clone = cloneObject(model);\n    const oldDcatUS11Config = clone.data.values.dcatConfig;\n    clone.data.feeds = {};\n    if (oldDcatUS11Config) {\n        clone.data.feeds.dcatUS11 = _migrateToV3Values(oldDcatUS11Config);\n    }\n    clone.item.properties.schemaVersion = 1.5;\n    return clone;\n}\nconst indexValueToV3Value = {\n    // Defaults\n    \"{{default.name}}\": \"{{name}}\",\n    \"{{default.description}}\": \"{{description}}\",\n    \"{{item.tags}}\": \"{{tags}}\",\n    \"{{item.created:toISO}}\": \"{{created:toISO}}\",\n    \"{{item.modified:toISO}}\": \"{{modified:toISO}}\",\n    \"{{default.source.source}}\": \"{{source}}\",\n    \"{{item.owner}}\": \"{{owner}}\",\n    \"{{org.portalProperties.links.contactUs.url}}\": \"{{orgContactEmail}}\",\n    // Custom Values\n    \"{{org.name}}\": \"{{orgName}}\",\n    \"{{item.categories}}\": \"{{categories}}\",\n    \"{{item.licenseInfo}}\": \"{{licenseInfo}}\",\n    \"{{item.modified}}\": \"{{modified}}\",\n    \"{{enrichments.categories}}\": \"{{categories}}\",\n    \"{{default.id}}\": \"{{id}}\",\n    \"{{item.licenseInfo || No License}}\": \"{{licenseInfo || No License}}\",\n    \"{{org.portalProperties.links.contactUs.url || mailto:data@tempe.gov}}\": \"{{orgContactEmail || mailto:data@tempe.gov}}\",\n    \"{{default.description || No Description}}\": \"{{description || No Description}}\",\n    \"{{item.id}}\": \"{{id}}\",\n};\nfunction _migrateToV3Values(originalConfig) {\n    let migratedConfigString = JSON.stringify(originalConfig);\n    const supportedIndexValues = Object.keys(indexValueToV3Value);\n    supportedIndexValues.forEach((indexValue) => {\n        // Replace all occurrences of indexValue with the corresponding v3Value\n        const v3Value = indexValueToV3Value[indexValue];\n        migratedConfigString = migratedConfigString.split(indexValue).join(v3Value);\n    });\n    return JSON.parse(migratedConfigString);\n}\n\n/**\n * Upgrades the schema upgrades\n * @param model IModel\n */\nfunction upgradeSiteSchema(model) {\n    if (getProp(model, \"item.properties.schemaVersion\") === SITE_SCHEMA_VERSION) {\n        return model;\n    }\n    else {\n        // apply upgrade functions in order...\n        model = _applySiteSchema(model);\n        model = _enforceLowercaseDomains(model);\n        model = _ensureCatalog(model);\n        model = _purgeNonGuidsFromCatalog(model);\n        model = _ensureTelemetry(model);\n        model = _migrateFeedConfig(model);\n        // WARNING - If you are writing a site schema migration,\n        // you probably need to apply it to site drafts as well!\n        // See https://github.com/Esri/hub.js/issues/498 for more details.\n        return model;\n    }\n}\n\n/**\n * Get a Site Model by it's Item Id, and apply schema upgrades\n * @param {String} id Site Item Id\n * @param {IHubRequestOptions} hubRequestOptions\n */\nfunction getSiteById(id, hubRequestOptions) {\n    return getModel(id, hubRequestOptions).then(upgradeSiteSchema);\n}\n\n/**\n * Returns site model given various kinds of identifier\n *\n * @param identifier - a site item ID, site hostname, enterprise site slug, or full site URL\n * @param hubRequestOptions\n */\nfunction fetchSiteModel(identifier, hubRequestOptions) {\n    let prms;\n    if (isGuid(identifier)) {\n        prms = getSiteById(identifier, hubRequestOptions);\n    }\n    else {\n        let hostnameOrSlug = identifier;\n        // get down the the hostname\n        hostnameOrSlug = stripProtocol(hostnameOrSlug);\n        hostnameOrSlug = hostnameOrSlug.split(\"/\")[0];\n        prms = lookupDomain(hostnameOrSlug, hubRequestOptions).then(({ siteId }) => getSiteById(siteId, hubRequestOptions));\n    }\n    return prms;\n}\n\n/**\n * Given two site models, determine the domain changes and apply them\n * @param currentModel\n * @param updatedModel\n * @param requestOptions\n * @private\n */\nasync function handleDomainChanges(updatedModel, currentModel, requestOptions) {\n    const defaultDomainRecord = {\n        clientKey: updatedModel.data.values.clientId,\n        orgId: requestOptions.portalSelf.id,\n        orgTitle: requestOptions.portalSelf.name,\n        orgKey: requestOptions.portalSelf.urlKey,\n        siteId: updatedModel.item.id,\n        siteTitle: updatedModel.item.title,\n        sslOnly: true,\n    };\n    const domainChanges = {\n        remove: [],\n        add: [],\n    };\n    [\"customHostname\", \"defaultHostname\"].forEach((key) => {\n        const currentValue = getProp(currentModel, `data.values.${key}`);\n        const updatedValue = getProp(updatedModel, `data.values.${key}`);\n        if (updatedValue !== currentValue) {\n            domainChanges.remove.push(currentValue);\n            domainChanges.add.push(updatedValue);\n        }\n    });\n    const domainChangePromises = [];\n    // handle additions\n    domainChanges.add.map((hostname) => {\n        const domainOpts = Object.assign({ hostname }, defaultDomainRecord);\n        domainChangePromises.push(addDomain(domainOpts, requestOptions));\n    });\n    // handle removals\n    domainChanges.remove.map((hostname) => {\n        domainChangePromises.push(removeDomainByHostname(hostname, requestOptions));\n    });\n    return Promise.all(domainChangePromises);\n    // TODO: Error handling & OperationStack\n}\n\n/**\n * Informal migration that creates default permission policies based on the\n * Content and Collaboration Groups\n * @param model\n */\nfunction applyPermissionMigration(model) {\n    // TODO: Once we formalize the permission mapping we need to\n    // bump the current schema version, and add it here so this gets\n    // applied once and then never again.\n    // const PERMISSION_SCHEMA_VERSION = 1.6\n    // if (\n    //   getProp(model, \"item.properties.schemaVersion\") >= PERMISSION_SCHEMA_VERSION\n    // )\n    //   return model;\n    const clone = cloneObject(model);\n    clone.data.permissions = clone.data.permissions || [];\n    const permissionMigrations = [\n        // Per discussion with @jaydev on 2022-12-01 we are going to\n        // allow content team members to create projects in the context\n        // of a site\n        {\n            prop: \"item.properties.contentGroupId\",\n            type: \"group\",\n            permissions: [\"hub:project:create\"],\n        },\n        {\n            prop: \"item.owner\",\n            type: \"user\",\n            permissions: [\"hub:site:delete\"],\n        },\n    ];\n    permissionMigrations.forEach((defn) => {\n        const value = getProp(clone, defn.prop);\n        if (value) {\n            defn.permissions.forEach((permission) => {\n                const present = clone.data.permissions.find((p) => p.permission === permission && p.collaborationId === value);\n                if (!present) {\n                    clone.data.permissions.push({\n                        permission,\n                        collaborationType: defn.type,\n                        collaborationId: value,\n                    });\n                }\n            });\n        }\n    });\n    // TODO: Uncomment when we formalize the schema version this applies to\n    // clone.item.properties.schemaVersion = PERMISSION_SCHEMA_VERSION;\n    return clone;\n}\n\n/**\n * Given a model and a site, set various computed properties that can't be directly mapped\n * @private\n * @param model\n * @param site\n * @param requestOptions\n * @returns\n */\nfunction computeProps(model, site, requestOptions) {\n    var _a;\n    let token;\n    if (requestOptions.authentication) {\n        const session = requestOptions.authentication;\n        token = session.token;\n    }\n    // thumbnail url\n    site.thumbnailUrl = getItemThumbnailUrl(model.item, requestOptions, token);\n    // Handle Dates\n    site.createdDate = new Date(model.item.created);\n    site.createdDateSource = \"item.created\";\n    site.updatedDate = new Date(model.item.modified);\n    site.updatedDateSource = \"item.modified\";\n    // Handle capabilities\n    // NOTE: This does not currently contain the older \"capabilities\" values!\n    site.capabilities = processEntityCapabilities(((_a = model.data.settings) === null || _a === void 0 ? void 0 : _a.capabilities) || {}, SiteDefaultCapabilities);\n    // cast b/c this takes a partial but returns a full site\n    return site;\n}\n\n/**\n * Returns an Array of IPropertyMap objects\n * We could define these directly, but since the\n * properties of IHubSite map directly to properties\n * on item or data, it's slightly less verbose to\n * generate the structure.\n * @returns\n */\nfunction getPropertyMap() {\n    const map = getBasePropertyMap();\n    // Site specific mappings\n    map.push({ objectKey: \"catalog\", modelKey: \"data.catalog\" });\n    map.push({ objectKey: \"feeds\", modelKey: \"data.feeds\" });\n    map.push({ objectKey: \"permissions\", modelKey: \"data.permissions\" });\n    map.push({\n        objectKey: \"capabilities\",\n        modelKey: \"data.capabilities\",\n    });\n    // Props stored below `data.values`\n    const valueProps = [\n        \"pages\",\n        \"theme\",\n        \"subdomain\",\n        \"defaultHostname\",\n        \"customHostname\",\n        \"clientId\",\n        \"defaultExtent\",\n        \"map\",\n        \"telemetry\",\n        \"headerSass\",\n        \"headContent\",\n        \"layout\",\n    ];\n    valueProps.forEach((entry) => {\n        map.push({ objectKey: entry, modelKey: `data.values.${entry}` });\n    });\n    // Deeper/Indirect mappings\n    map.push({\n        objectKey: \"slug\",\n        modelKey: \"item.properties.slug\",\n    });\n    map.push({\n        objectKey: \"classicCapabilities\",\n        modelKey: \"data.values.capabilities\",\n    });\n    map.push({\n        objectKey: \"capabilities\",\n        modelKey: \"data.settings.capabilities\",\n    });\n    map.push({\n        objectKey: \"orgUrlKey\",\n        modelKey: \"item.properties.orgUrlKey\",\n    });\n    map.push({\n        objectKey: \"name\",\n        modelKey: \"item.title\",\n    });\n    return map;\n}\n\n/**\n * Default values for a new HubSite Model\n */\nconst DEFAULT_SITE_MODEL = {\n    item: {\n        // type: intentionally left out as we need to\n        // set that based on portal/enterprise\n        title: \"No Title Provided\",\n        description: \"No Description Provided\",\n        snippet: \"\",\n        tags: [],\n        typeKeywords: [\"Hub Site\", \"hubSite\", \"DELETEMESITE\"],\n        properties: {\n            slug: \"\",\n            orgUrlKey: \"\",\n            defaultHostname: \"\",\n            customHostname: \"\",\n            clientId: \"\",\n            subdomain: \"\",\n            schemaVersion: 1.5,\n        },\n        url: \"\",\n    },\n    data: {\n        catalog: {\n            groups: [],\n        },\n        feeds: {},\n        values: {\n            title: \"\",\n            defaultHostname: \"\",\n            customHostname: \"\",\n            subdomain: \"\",\n            faviconUrl: \"\",\n            uiVersion: \"2.4\",\n            clientId: \"\",\n            map: {\n                basemaps: {},\n            },\n            defaultExtent: {},\n            pages: [],\n            theme: {},\n            layout: {\n                sections: [],\n                header: {\n                    component: {\n                        name: \"site-header\",\n                        settings: {\n                            fullWidth: false,\n                            iframeHeight: \"150px\",\n                            iframeUrl: \"\",\n                            links: [],\n                            logoUrl: \"\",\n                            title: \"default site\",\n                            markdown: \"\",\n                            headerType: \"default\",\n                            schemaVersion: 3,\n                            showLogo: true,\n                            showTitle: true,\n                            logo: {\n                                display: {},\n                                state: \"valid\",\n                            },\n                            shortTitle: \"\",\n                            menuLinks: [],\n                            socialLinks: {\n                                facebook: {},\n                                twitter: {},\n                                instagram: {},\n                                youtube: {},\n                            },\n                        },\n                    },\n                    showEditor: false,\n                },\n                footer: {\n                    component: {\n                        name: \"site-footer\",\n                        settings: {\n                            footerType: \"none\",\n                            markdown: \"\",\n                            schemaVersion: 2.1,\n                        },\n                    },\n                    showEditor: false,\n                },\n            },\n            contentViews: {\n                sidePanelOpen: {\n                    app: true,\n                    map: true,\n                    dataset: true,\n                    document: true,\n                    feedback: true,\n                },\n            },\n        },\n    },\n};\n/**\n * Update a Hub Site\n *\n * This checks for and applies domain changes\n * @param site\n * @param requestOptions\n * @returns\n */\nasync function updateSite(site, requestOptions) {\n    // Most of this work is done with an IModel, so first thing it to\n    // convert IHubSite to model\n    const mapper = new PropertyMapper(getPropertyMap());\n    // applying the site onto the default model ensures that a minimum\n    // set of properties exist, regardless what may have been done to\n    // the site pojo\n    const updatedModel = mapper.objectToModel(site, cloneObject(DEFAULT_SITE_MODEL));\n    // Fetch backing model from the portal\n    const currentModel = await getModel(site.id, requestOptions);\n    // handle any domain changes\n    await handleDomainChanges(updatedModel, currentModel, requestOptions);\n    if (updatedModel.item.properties.slug !== currentModel.item.properties.slug) {\n        // ensure slug to keywords\n        updatedModel.item.typeKeywords = setSlugKeyword(updatedModel.item.typeKeywords, updatedModel.item.properties.slug);\n    }\n    // merge the updated site onto the current model\n    const modelToStore = mapper.objectToModel(site, currentModel);\n    // update the model\n    const updatedSiteModel = await updateModel(modelToStore, requestOptions);\n    // fetch updated model\n    const updatedSite = mapper.modelToObject(updatedSiteModel, site);\n    return updatedSite;\n}\n/**\n * Returns site model given various kinds of identifier\n *\n * @param identifier - a site item ID, site hostname, enterprise site slug, or full site URL\n * @param requestOptions\n * @private // remove when we remove existing fetchSite function\n */\nasync function fetchSite(identifier, requestOptions) {\n    // get the model\n    const model = await fetchSiteModel(identifier, requestOptions);\n    // convert to IHubSite\n    return convertModelToSite(model, requestOptions);\n}\n/**\n * Convert an IModel for a Hub Site Item into an IHubSite\n * @param model\n * @param requestOptions\n * @returns\n */\nfunction convertModelToSite(model, requestOptions) {\n    // Add permissions based on Groups\n    // This may get moved to a formal schema migration in the future but for now\n    // we can do it here as there is no ux for managing permissions yet.\n    const modelWithPermissions = applyPermissionMigration(model);\n    // convert to site\n    const mapper = new PropertyMapper(getPropertyMap());\n    const site = mapper.modelToObject(modelWithPermissions, {});\n    // compute additional properties\n    return computeProps(model, site, requestOptions);\n}\n/**\n * Fetch Site specific enrichments\n * @param item\n * @param include\n * @param requestOptions\n * @returns\n */\nasync function enrichSiteSearchResult(item, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: item.access,\n        id: item.id,\n        type: item.type,\n        name: item.title,\n        owner: item.owner,\n        typeKeywords: item.typeKeywords,\n        tags: item.tags,\n        categories: item.categories,\n        summary: item.snippet || item.description,\n        createdDate: new Date(item.created),\n        createdDateSource: \"item.created\",\n        updatedDate: new Date(item.modified),\n        updatedDateSource: \"item.modified\",\n        family: getFamily(item.type),\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // default includes\n    const DEFAULTS = [];\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    if (enrichments.length) {\n        // TODO: Look into caching for the requests in fetchItemEnrichments\n        enriched = await fetchItemEnrichments(item, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    // Handle links\n    result.links.thumbnail = getItemThumbnailUrl(item, requestOptions);\n    result.links.self = item.url;\n    result.links.siteRelative = getHubRelativeUrl(result.type, result.id, item.typeKeywords);\n    return result;\n}\n\nexport { enrichSiteSearchResult as e, fetchSite as f, lookupDomain as l, parseInclude as p, stripProtocol as s, updateSite as u };\n","/**\n * Map over an array returning the specified property for each entry\n * @param {String} prop Property to extracct\n * @param {Array} arr array of objects\n */\nfunction mapBy(prop, arr = []) {\n    return arr.map((e) => e[prop]);\n}\n\n/**\n * Default capabilities for a Site. If not listed here, the capability will not be available\n * This hash is combined with the capabilities hash stored in the item data. Regardless of what\n * properties are defined in the item data, only the capabilities defined here will be available\n * @private\n */\nconst SiteDefaultCapabilities = {\n    overview: true,\n    details: true,\n    settings: true,\n};\n/**\n * List of all the Site Capability Permissions\n * These are considered Hub Business Rules and are not intended\n * to be modified by consumers\n */\nconst SiteCapabilityPermissions = [\n    {\n        entity: \"site\",\n        capability: \"overview\",\n        permissions: [\"hub:site:view\"],\n    },\n    {\n        entity: \"site\",\n        capability: \"details\",\n        permissions: [\"hub:site:edit\"],\n    },\n    {\n        entity: \"site\",\n        capability: \"settings\",\n        permissions: [\"hub:site:edit\"],\n    },\n];\n/**\n * Site Permissions\n * This feeds into the Permissions type\n */\nconst SitePermissions = [\n    \"hub:site:create\",\n    \"hub:site:delete\",\n    \"hub:site:edit\",\n    \"hub:site:view\",\n];\n/**\n * Site permission policies\n * @private\n */\nconst SitesPermissionPolicies = [\n    {\n        permission: \"hub:site:create\",\n        subsystems: [\"sites\"],\n        authenticated: true,\n        privileges: [\"portal:user:createItem\"],\n        licenses: [\"hub-basic\", \"hub-premium\", \"enterprise-sites\"],\n    },\n    {\n        permission: \"hub:site:view\",\n        subsystems: [\"sites\"],\n        authenticated: false,\n        licenses: [\"hub-basic\", \"hub-premium\", \"enterprise-sites\"],\n    },\n    {\n        permission: \"hub:site:delete\",\n        subsystems: [\"sites\"],\n        authenticated: true,\n        licenses: [\"hub-basic\", \"hub-premium\", \"enterprise-sites\"],\n        entityOwner: true,\n    },\n    {\n        permission: \"hub:site:edit\",\n        entityEdit: true,\n        subsystems: [\"sites\"],\n        authenticated: true,\n        licenses: [\"hub-basic\", \"hub-premium\", \"enterprise-sites\"],\n    },\n];\n\nexport { SitesPermissionPolicies as S, SitePermissions as a, SiteCapabilityPermissions as b, SiteDefaultCapabilities as c, mapBy as m };\n"],"names":["stripProtocol","hostname","toLowerCase","includes","split","_getDomainServiceUrl","hubApiUrl","_getAuthHeader","hubRequestOptions","result","token","getProp","Authorization","parseInclude","include","parts","path","prop","reverse","enrichment","_checkStatusAndParseJson","response","status","json","then","error","Error","title","detail","statusText","addDomain","domainEntry","isPortal","headers","url","siteTitle","toString","fetch","method","mode","body","JSON","stringify","lookupDomain","requestOptions","subdomain","indexOf","queryTerm","opts","Object","assign","q","searchItems","res","results","filter","r","typeKeywords","site","siteId","id","_lookupPortal","removeDomain","domainId","removeDomainByHostname","_migrateFeedConfig","model","clone","cloneObject","oldDcatUS11Config","data","values","dcatConfig","feeds","dcatUS11","originalConfig","migratedConfigString","keys","indexValueToV3Value","forEach","indexValue","v3Value","join","parse","_migrateToV3Values","item","properties","schemaVersion","upgradeSiteSchema","gacode","telemetry","consentNotice","isTheme","consentText","policyURL","customAnalytics","ga","customerTracker","enabled","Boolean","target","lookupStr","lookupKeys","i","length","hasOwnProperty","deleteProp","setProp","_ensureTelemetry","groups","catalog","isGuid","_purgeNonGuidsFromCatalog","_ensureCatalog","_enforceLowercaseDomains","Array","isArray","groupIds","map","entry","_applySiteSchema","getSiteById","getModel","fetchSiteModel","identifier","prms","hostnameOrSlug","handleDomainChanges","updatedModel","currentModel","defaultDomainRecord","clientKey","clientId","orgId","portalSelf","orgTitle","name","orgKey","urlKey","sslOnly","domainChanges","remove","add","key","currentValue","updatedValue","push","domainChangePromises","domainOpts","Promise","all","getPropertyMap","getBasePropertyMap","objectKey","modelKey","DEFAULT_SITE_MODEL","description","snippet","tags","slug","orgUrlKey","defaultHostname","customHostname","faviconUrl","uiVersion","basemaps","defaultExtent","pages","theme","layout","sections","header","component","settings","fullWidth","iframeHeight","iframeUrl","links","logoUrl","markdown","headerType","showLogo","showTitle","logo","display","state","shortTitle","menuLinks","socialLinks","facebook","twitter","instagram","youtube","showEditor","footer","footerType","contentViews","sidePanelOpen","app","dataset","document","feedback","updateSite","mapper","PropertyMapper","objectToModel","setSlugKeyword","modelToStore","updateModel","updatedSiteModel","updatedSite","modelToObject","fetchSite","convertModelToSite","modelWithPermissions","permissions","type","defn","value","permission","find","p","collaborationId","collaborationType","applyPermissionMigration","_a","authentication","thumbnailUrl","getItemThumbnailUrl","createdDate","Date","created","createdDateSource","updatedDate","modified","updatedDateSource","capabilities","processEntityCapabilities","SiteDefaultCapabilities","computeProps","enrichSiteSearchResult","access","owner","categories","summary","family","getFamily","self","siteRelative","thumbnail","unique","specs","enrichments","mapBy","enriched","fetchItemEnrichments","spec","getHubRelativeUrl","arr","e","overview","details","SiteCapabilityPermissions","entity","capability","SitePermissions","SitesPermissionPolicies","subsystems","authenticated","privileges","licenses","entityOwner","entityEdit"],"sourceRoot":""}