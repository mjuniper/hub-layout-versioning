{"version":3,"file":"static/js/35005.95263d7d.chunk.js","mappings":"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","sources":["../.yalc/@esri/hub-components/dist/esm/arcgis-hub-map-popover.entry.js"],"sourcesContent":["import { r as registerInstance, h, g as getElement, H as Host } from './index-0d95d9d4.js';\n\n/**\n * Determine which view quadrant a point is located\n * @param point ScreenPoint\n * @param view MapView\n * @returns Quadrant\n */\nconst getQuad = (point, view) => {\n  const { height, width } = view;\n  const yQuad = point.y < height / 2\n    ? 'top'\n    : 'bottom';\n  const xQuad = point.x < width / 2\n    ? 'left'\n    : 'right';\n  return `${yQuad}-${xQuad}`;\n};\n/**\n * Given an extent and quad, return corner point closest to map center\n * @param extent Extent\n * @param quad Quadrant\n * @returns Point\n */\nconst getExtentQuadCornerPoint = (extent, quad) => {\n  const { xmin, ymin, xmax, ymax, spatialReference } = extent;\n  const y = quad.includes('top')\n    ? ymin\n    : ymax;\n  const x = quad.includes('left')\n    ? xmax\n    : xmin;\n  return {\n    x,\n    y,\n    spatialReference\n  };\n};\n/**\n * Calculates planar distance between two points\n * @param pointA Point\n * @param pointB Point\n * @returns Distance between points in relative units\n */\nconst distance = (pointA, pointB) => {\n  const { x: x1, y: y1 } = pointA;\n  const { x: x2, y: y2 } = pointB;\n  const dX = x2 - x1;\n  const dY = y2 - y1;\n  return Math.sqrt(dX ** 2 + dY ** 2);\n};\n/**\n * Dermine the closest point on a polygon or polyline from a given point\n * @param point Point\n * @param geom Polygon || Polyline\n * @returns Point\n */\nconst getClosestPoint = (point, geom) => {\n  const { spatialReference } = geom;\n  let minDistance = Infinity;\n  let closestPointIndex = 0;\n  // flatten multi-paths, multi-rings into simple point aray\n  const coords = (geom.type === 'polygon'\n    ? geom.rings.flat(Infinity)\n    : geom.paths.flat(Infinity)).reduce((accum, value, index) => {\n    // reassemble into [x,y] coordinates\n    const coordIndex = Math.floor(index / 2);\n    if (!accum[coordIndex]) {\n      accum[coordIndex] = [];\n    }\n    accum[coordIndex].push(value);\n    return accum;\n  }, []);\n  coords.forEach((coord, index) => {\n    const [x, y] = coord;\n    const distanceToPoint = distance({\n      x,\n      y,\n      spatialReference\n    }, point);\n    if (distanceToPoint < minDistance) {\n      minDistance = distanceToPoint;\n      closestPointIndex = index;\n    }\n  });\n  const [x, y] = coords[closestPointIndex];\n  return {\n    x,\n    y,\n    spatialReference\n  };\n};\n\nconst arcgisHubMapPopoverCss = \":host{position:absolute;z-index:1;top:var(--top-offset);left:var(--left-offset);transform:var(--transform)}calcite-action{border-width:0px;border-top-width:1px;border-style:solid;border-color:var(--calcite-ui-border-1)}calcite-action:first-of-type{border-width:0px}calcite-action-pad>calcite-action{border-width:0px}\";\n\nconst ArcgisHubMapPopover = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Handles the event for a popover open request, opening the popup\n   * at a best fit location in the view and rendering the content\n   * @param event PopoverEventDetails\n   */\n  handlePopoverOpen(event) {\n    event.stopPropagation();\n    const { detail: popoverEventDetails } = event;\n    const view = popoverEventDetails.view;\n    const geometry = popoverEventDetails.geometry;\n    const { left, top, height, width } = view.container.getBoundingClientRect();\n    if (geometry.type === 'polygon' || geometry.type === 'polyline') {\n      const extent = geometry.extent;\n      const centerScreenPoint = view.toScreen(extent.center);\n      if (centerScreenPoint.x < 0 || centerScreenPoint.y < 0 ||\n        centerScreenPoint.x > width || centerScreenPoint.y > height) {\n        // hide if off map view\n        this.content = null;\n        return;\n      }\n      this.quadrant = getQuad(centerScreenPoint, view);\n      const cornerPoint = getExtentQuadCornerPoint(extent, this.quadrant);\n      const closestGeometryPoint = getClosestPoint(cornerPoint, geometry);\n      const closestGeometryScreenPoint = view.toScreen(closestGeometryPoint);\n      this.x = closestGeometryScreenPoint.x + left;\n      this.y = closestGeometryScreenPoint.y + top;\n    }\n    else if (geometry.type === 'point') {\n      // handle point\n      const pointScreenPoint = view.toScreen(geometry);\n      this.quadrant = getQuad(pointScreenPoint, view);\n      this.x = pointScreenPoint.x + left;\n      this.y = pointScreenPoint.y + top;\n    }\n    // Render content in popover\n    this.content = popoverEventDetails.render(geometry.type);\n  }\n  /**\n   * Handles the event to clear any existing popover content\n   * @param event\n   */\n  handlePopoverClear(event) {\n    event.stopPropagation();\n    this.content = null;\n  }\n  /**\n   * Computes styles object\n   */\n  get styles() {\n    const { quadrant, x, y } = this;\n    const transformX = (quadrant === null || quadrant === void 0 ? void 0 : quadrant.includes('right'))\n      ? 'translateX(-110%)'\n      : 'translateX(10%)';\n    const transformY = (quadrant === null || quadrant === void 0 ? void 0 : quadrant.includes('top'))\n      ? 'translateY(-35%)'\n      : 'translateY(-35%)';\n    return {\n      '--top-offset': `${y}px`,\n      '--left-offset': `${x}px`,\n      'transform': `${transformX} ${transformY}`,\n    };\n  }\n  render() {\n    const { styles, content } = this;\n    return (h(Host, { style: styles }, content));\n  }\n  get el() { return getElement(this); }\n};\nArcgisHubMapPopover.style = arcgisHubMapPopoverCss;\n\nexport { ArcgisHubMapPopover as arcgis_hub_map_popover };\n"],"names":["getQuad","point","view","height","width","yQuad","y","xQuad","x","getClosestPoint","geom","spatialReference","minDistance","Infinity","closestPointIndex","coords","type","rings","flat","paths","reduce","accum","value","index","coordIndex","Math","floor","push","forEach","coord","distanceToPoint","pointA","pointB","x1","y1","dX","dY","sqrt","distance","ArcgisHubMapPopover","hostRef","registerInstance","this","event","stopPropagation","popoverEventDetails","detail","geometry","container","getBoundingClientRect","left","top","extent","centerScreenPoint","toScreen","center","content","quadrant","cornerPoint","quad","xmin","ymin","xmax","ymax","includes","getExtentQuadCornerPoint","closestGeometryPoint","closestGeometryScreenPoint","pointScreenPoint","render","transformX","transformY","styles","h","Host","style","getElement"],"sourceRoot":""}