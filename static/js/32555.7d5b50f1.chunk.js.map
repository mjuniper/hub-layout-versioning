{"version":3,"file":"static/js/32555.7d5b50f1.chunk.js","mappings":"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","sources":["../.yalc/@esri/hub-components/dist/esm/clean-url-be7c0879.js","../.yalc/@esri/hub-components/dist/esm/extent-0f42acfc.js","../.yalc/@esri/hub-components/dist/esm/get-item-thumbnail-url-7608a737.js","../.yalc/@esri/hub-components/dist/esm/get-portal-api-url-2391fbac.js","../.yalc/@esri/hub-components/dist/esm/get-portal-url-423a76f5.js","../.yalc/@esri/hub-components/dist/esm/get-prop-d82e4fa6.js","../.yalc/@esri/hub-components/dist/esm/util-2150bd9e.js"],"sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nfunction cleanUrl(url) {\n    // Guard so we don't try to trim something that's not a string\n    if (typeof url !== \"string\") {\n        return url;\n    }\n    // trim leading and trailing spaces, but not spaces inside the url\n    url = url.trim();\n    // remove the trailing slash to the url if one was included\n    if (url[url.length - 1] === \"/\") {\n        url = url.slice(0, -1);\n    }\n    return url;\n}\n\nexport { cleanUrl as c };\n","import { g as getProp } from './get-prop-d82e4fa6.js';\nimport { r as request } from './request-c15cc2af.js';\n\n/**\n * Turns an bounding box coordinate array into an extent object\n * @param bBox bounding box coordinate array\n * @returns extent object\n */\nconst bBoxToExtent = (bBox) => {\n    const [[xmin, ymin], [xmax, ymax]] = bBox;\n    return createExtent(xmin, ymin, xmax, ymax);\n};\n/**\n * Given a Bbox, convert it to a string. Some api endpoints expect a string\n *\n * @param {BBox} extent\n * @return {*}  {string}\n */\nconst bboxToString = (extent) => {\n    return extent.map((a) => a.join(\", \")).join(\", \");\n};\nfunction createExtent(xmin, ymin, xmax, ymax, wkid = 4326) {\n    return {\n        xmin,\n        ymin,\n        xmax,\n        ymax,\n        // type: 'extent',\n        spatialReference: {\n            wkid,\n        },\n    };\n}\n/**\n * Turns an extent object into a bounding box coordinate array\n * @param extent extent\n */\nfunction extentToBBox(extent) {\n    return [\n        [extent.xmin, extent.ymin],\n        [extent.xmax, extent.ymax],\n    ];\n}\nconst GLOBAL_EXTENT = {\n    xmin: -180,\n    ymin: -90,\n    xmax: 180,\n    ymax: 90,\n    spatialReference: {\n        wkid: 4326,\n    },\n};\n/**\n * Gets the geographic extent for an org\n * @param hubRequestOptions\n */\nfunction getGeographicOrgExtent(hubRequestOptions) {\n    const portal = hubRequestOptions.portalSelf;\n    const orgExtent = portal.defaultExtent;\n    const geometryServiceUrl = getProp(portal, \"helperServices.geometry.url\");\n    // Define a default global extent object\n    if (!geometryServiceUrl) {\n        return Promise.resolve(GLOBAL_EXTENT);\n    }\n    if (!orgExtent) {\n        return Promise.resolve(GLOBAL_EXTENT);\n    }\n    const url = `${geometryServiceUrl}/project`;\n    // geometry params...\n    const geometryParam = {\n        geometryType: \"esriGeometryEnvelope\",\n        geometries: [orgExtent],\n    };\n    const options = {\n        httpMethod: \"POST\",\n        params: {\n            geometries: JSON.stringify(geometryParam),\n            transformForward: false,\n            transformation: \"\",\n            inSR: orgExtent.spatialReference.wkid,\n            outSR: 4326,\n            f: \"json\",\n        },\n    };\n    // add in auth if it's passed\n    if (hubRequestOptions.authentication) {\n        options.authentication = hubRequestOptions.authentication;\n    }\n    return request(url, options)\n        .then((response) => {\n        const geom = response.geometries[0];\n        return {\n            xmin: geom.xmin,\n            ymin: geom.ymin,\n            xmax: geom.xmax,\n            ymax: geom.ymax,\n            spatialReference: {\n                wkid: 4326,\n            },\n        };\n    })\n        .catch((ex) => {\n        return GLOBAL_EXTENT;\n    });\n}\n/**\n * checks if the extent is a valid BBox (2 element array of coordinate pair arrays)\n * @param extent\n * @returns\n */\nconst isBBox = (extent) => {\n    return (Array.isArray(extent) &&\n        Array.isArray(extent[0]) &&\n        Array.isArray(extent[1]));\n};\n/**\n * Convert an extent object into a polygon object\n * @param extent\n * @returns\n */\nconst extentToPolygon = (extent) => {\n    const { xmin, ymin, xmax, ymax, spatialReference } = extent;\n    const rings = [\n        [\n            [xmin, ymax],\n            [xmax, ymax],\n            [xmax, ymin],\n            [xmin, ymin],\n            [xmin, ymax],\n        ],\n    ];\n    return {\n        rings,\n        spatialReference,\n    };\n};\n/**\n * Get the center of an extent as a point\n * @param extent\n * @returns\n */\nconst getExtentCenter = (extent) => {\n    const { xmin, ymin, xmax, ymax, spatialReference } = extent;\n    const x = (xmax - xmin) / 2 + xmin;\n    const y = (ymax - ymin) / 2 + ymin;\n    return { x, y, spatialReference };\n};\n\nexport { extentToBBox as a, bBoxToExtent as b, getGeographicOrgExtent as c, bboxToString as d, extentToPolygon as e, getExtentCenter as g, isBBox as i };\n","import { a as getPortalApiUrl } from './get-portal-api-url-2391fbac.js';\n\n// NOTE: this fn is tested via getItemDataUrl tests\n/**\n * Get the fully qualified URL to the REST end point for an item.\n * @param item w/ id and access\n * @param portalUrlOrObject a portal base or API URL, a portal object, or request options containing either of those\n * @param token token for the current user's session; will only be appended as a query parameter if the item's access is **not** `public`\n * @returns URL to the item's REST end point, defaults to `https://www.arcgis.com/sharing/rest/content/items/{item.id}?f=json`\n */\nconst getItemApiUrl = (item, portalUrlOrObject, token) => {\n    const { id, access } = item;\n    const url = `${getPortalApiUrl(portalUrlOrObject)}/content/items/${id}`;\n    const params = new URLSearchParams({ f: \"json\" });\n    if (access !== \"public\" && token) {\n        params.append(\"token\", token);\n    }\n    return `${url}?${params.toString()}`;\n};\n\n/**\n * Get the fully qualified URL for an item's thumbnail\n * @param item w/ id, thumbnail, and access\n * @param portalUrlOrObject a portal base or API URL, a portal object, or request options containing either of those\n * @param optionsOrToken options including width and/or token for the current user's session; will only be appended as a query parameter if the item's access is **not** `public`\n * @returns URL to the item's thumbnail, defaults to `https://www.arcgis.com/sharing/rest/content/items/{item.id}/info/{item.thumbnail}`. Returns `null` if the item does not have a thumbnail assigned.\n */\nfunction getItemThumbnailUrl(item, portalUrlOrObject, optionsOrToken) {\n    if (!item || !item.thumbnail) {\n        // TODO: handle image types by returning the image (item data) itself?\n        return null;\n    }\n    // tslint:disable-next-line prefer-const\n    let { token, width } = optionsOrToken || {};\n    // TODO: at the next breaking change drop support for passing token as string\n    if (!token && typeof optionsOrToken === \"string\") {\n        token = optionsOrToken;\n    }\n    const itemApiUrl = getItemApiUrl(item, portalUrlOrObject, token);\n    const [baseUrl, search] = itemApiUrl.split(\"?\");\n    const searchParams = new URLSearchParams(search);\n    searchParams.delete(\"f\");\n    if (width) {\n        searchParams.append(\"w\", width + \"\");\n    }\n    const newSearch = searchParams.toString();\n    const url = `${baseUrl}/info/${item.thumbnail}`;\n    return newSearch ? `${url}?${newSearch}` : url;\n}\n\nexport { getItemThumbnailUrl as a, getItemApiUrl as g };\n","import { g as getPortalUrl$1 } from './get-portal-url-423a76f5.js';\n\n/**\n * ```js\n * import { getPortalUrl } from \"@esri/hub-common\";\n * // from a portal API URL\n * let portalUrl = getPortalUrl(\"https://org.maps.arcgis.com/sharing/rest\"); // https://org.maps.arcgis.com\n * // from an enterprise portal self response (IPortal)\n * let portalSelf = { isPortal: true, portalHostname: \"server.example.org\" };\n * portalUrl = getPortalUrl(portalSelf); // https://server.example.org\n * // from an online portal self response (IPortal)\n * portalSelf = { isPortal: false, urlKey: \"org\", customBaseUrl: \"maps.arcgis.com\" };\n * portalUrl = getPortalUrl(portalSelf); // https://org.maps.arcgis.com\n * // from hub request options (IHubRequestOptions) with a portal self (IPortal)\n * let requestOptions = { isPortal: false, portalSelf };\n * portalUrl = getPortalUrl(requestOptions); // https://org.maps.arcgis.com\n * // from request options (IRequestOptions) with a portal (string)\n * requestOptions = { portal: \"https://org.maps.arcgis.com/sharing/rest\" };\n * portalUrl = getPortalUrl(requestOptions); // https://org.maps.arcgis.com\n * ```\n * Derive a portal's base URL from the portal's API URL, a portal object, or request options\n * @param urlOrObject a portal API URL, a portal object, or request options containing either of those\n * @returns The portal base URL, defaults to `https://www.arcgis.com`\n */\nfunction getPortalUrl(urlOrObject) {\n    if (typeof urlOrObject === \"string\") {\n        // assume this is the URL of the portal API\n        // and strip the `/sharing/rest`\n        return urlOrObject.replace(/\\/sharing\\/rest\\/?$/, \"\");\n    }\n    if (typeof urlOrObject === \"object\") {\n        // build URL from portal self object, which could be\n        // either a property of the object (request options) or the object itself\n        const portalSelf = urlOrObject.portalSelf;\n        const portal = portalSelf || urlOrObject;\n        const { portalHostname, urlKey, customBaseUrl } = portal;\n        if (portalHostname || (urlKey && customBaseUrl)) {\n            // user passed in a portal object, we'll use that to build the URL\n            if (portal.isPortal) {\n                return `https://${portal.portalHostname}`;\n            }\n            else {\n                return `https://${portal.urlKey}.${portal.customBaseUrl}`;\n            }\n        }\n    }\n    // urlOrObj is either undefined, or a request options w/o portal self\n    // get portal API URL and parse portal URL from that\n    return getPortalUrl(getPortalUrl$1(urlOrObject));\n}\n\n/**\n * ```js\n * import { getPortalApiUrl } from \"@esri/hub-common\";\n * // from a portal base URL\n * let portalApiUrl = getPortalApiUrl(\"https://org.maps.arcgis.com\"); // https://org.maps.arcgis.com/sharing/rest\n * // from an enterprise portal self response (IPortal)\n * let portalSelf = { isPortal: true, portalHostname: \"server.example.org\" };\n * portalApiUrl = getPortalApiUrl(portalSelf); // https://server.example.org/sharing/rest\n * // from an online portal self response (IPortal)\n * portalSelf = { isPortal: false, urlKey: \"org\", customBaseUrl: \"maps.arcgis.com\" };\n * portalApiUrl = getPortalApiUrl(portalSelf); // https://org.maps.arcgis.com/sharing/rest\n * // from hub request options (IHubRequestOptions) with a portal self (IPortal)\n * let requestOptions = { isPortal: false, portalSelf };\n * portalApiUrl = getPortalApiUrl(requestOptions); // https://org.maps.arcgis.com/sharing/rest\n * // from request options (IRequestOptions) with a portal (string)\n * requestOptions = { portal: \"https://org.maps.arcgis.com/sharing/rest\" };\n * portalApiUrl = getPortalApiUrl(requestOptions); // https://org.maps.arcgis.com/sharing/rest\n * ```\n * Derive a portal's API URL from the portal's base URL, a portal object, or request options\n * @param urlOrObject a portal base URL, a portal object, or request options containing either of those\n * @returns The portal API URL, defaults to `https://www.arcgis.com/sharing/rest`\n */\nfunction getPortalApiUrl(urlOrObject) {\n    return `${getPortalUrl(urlOrObject)}/sharing/rest`;\n}\n\nexport { getPortalApiUrl as a, getPortalUrl as g };\n","import { c as cleanUrl } from './clean-url-be7c0879.js';\n\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n * precedence over `authentication.portal`. If neither `portal` nor `authentication` is present,\n * `www.arcgis.com/sharing/rest` is returned.\n *\n * @param requestOptions - Request options that may have authentication manager\n * @returns Portal url to be used in API requests\n */\nfunction getPortalUrl(requestOptions) {\n    if (requestOptions === void 0) { requestOptions = {}; }\n    // use portal in options if specified\n    if (requestOptions.portal) {\n        return cleanUrl(requestOptions.portal);\n    }\n    // if auth was passed, use that portal\n    if (requestOptions.authentication) {\n        // the portal url is already scrubbed in the auth package\n        return requestOptions.authentication.portal;\n    }\n    // default to arcgis.com\n    return \"https://www.arcgis.com/sharing/rest\";\n}\n\nexport { getPortalUrl as g };\n","/**\n * Get a property out of a deeply nested object\n * Does not handle anything but nested object graph\n */\nfunction getProp(obj, path) {\n    return path.split(\".\").reduce(function (prev, curr) {\n        /* istanbul ignore next no need to test undefined scenario */\n        return prev ? prev[curr] : undefined;\n    }, obj);\n}\n\nexport { getProp as g };\n","import { g as getProp } from './get-prop-d82e4fa6.js';\n\n/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { cloneObject } from \"@esri/hub-common\";\n * const original = { foo: \"bar\" }\n * const copy = cloneObject(original)\n * copy.foo // \"bar\"\n * copy === original // false\n * ```\n * Make a deep clone, including arrays. Does not handle functions!\n */\nfunction cloneObject(obj) {\n    let clone = {};\n    // first check array\n    if (Array.isArray(obj)) {\n        clone = obj.map(cloneObject);\n    }\n    else if (typeof obj === \"object\") {\n        for (const i in obj) {\n            if (obj.hasOwnProperty(i)) {\n                const value = obj[i];\n                if (value != null && typeof value === \"object\") {\n                    if (value instanceof Date) {\n                        clone[i] = new Date(value.getTime());\n                    }\n                    else if (typeof Blob !== \"undefined\" && value instanceof Blob) {\n                        clone[i] = new Blob([value], { type: value.type });\n                    }\n                    else {\n                        clone[i] = cloneObject(value);\n                    }\n                }\n                else {\n                    clone[i] = value;\n                }\n            }\n        }\n    }\n    else {\n        clone = obj;\n    }\n    return clone;\n}\n/**\n * Return an entry from an array by a property name\n */\nfunction findBy(arr, prop, value) {\n    if (!arr) {\n        return null;\n    }\n    const res = arr.reduce((acc, entry) => {\n        if (getProp(entry, prop) === value) {\n            acc = entry;\n        }\n        return acc;\n    }, null);\n    return res;\n}\n/**\n * Return a new array without the specified value.\n *\n * @export\n * @param {any[]} arr\n * @param {*} val value or object to remove\n * @returns {any[]} Array without the value\n */\nfunction without(arr, value) {\n    const res = arr.filter((entry) => entry !== value);\n    return res;\n}\n/**\n * Return a random number, prefixed with a string. Used for unique identifiers that do not require\n * the rigor of a full UUID - i.e. node id's, process ids etc.\n * @param prefix String to prefix the random number with so the result is a valid javascript property\n */\nfunction createId(prefix = \"i\") {\n    // prepend some char so it's always a valid dotable property name\n    // get a random number, convert to base 36 representation, then grab chars 2-8\n    return `${prefix}${Math.random().toString(36).substr(2, 8)}`;\n}\n/**\n * Append or replace a value on an object, using a specified key, if the value is not null.\n * This is a very useful companion to the [getProp()](../getProp/) utility.\n *\n * Note: object that is passed in is cloned before the property is appended.\n *\n * Allows for code like:\n *\n * ```js\n * let model = {\n *  item: {\n *    title: 'some example object',\n *    description: 'this is some longer text',\n *    type: 'Web Map',\n *    properties: {\n *      sourceId: '3ef'\n *    }\n *  },\n *  data: {\n *    theme: 'orange',\n *    parcelLayer: {\n *      primaryField: 'PIN'\n *    }\n *  }\n * };\n *\n * // Let's extract some details into an object.\n * const summary = [\n *  'item.title',\n *  'item.description',\n *  'item.missingProp',\n *  'data.parcelLayer.primaryField'].reduce((acc, prop) => {\n *   // create the property name... you could do this however...\n *   let propName = prop.split('.').reverse()[0];\n *   return maybeAdd(propName, getProp(model, key), acc);\n * }, {});\n *\n * // summary =>\n * // {\n * //   title: 'some example object',\n * //   description: 'this is some longer text',\n * //   primaryField: 'PIN'\n * // }\n * ```\n * @param key - key to use when appending to the object\n * @param val - the possibly null value\n * @param target - the object to update\n */\nfunction maybeAdd(key, val, target) {\n    // see if we got something...\n    if (val !== null && val !== undefined) {\n        target = cloneObject(target);\n        // attach using the key\n        target[key] = val;\n    }\n    return target;\n}\n/**\n * Append a value to an array, if the value is not null.\n * This is a very useful companion to the [getProp()](../getProp/) utility.\n *\n * Note: the array that is passed in is cloned before being appended to.\n *\n * Allows for code like:\n * ```js\n *  // example object\n * let model = {\n *  item: {\n *    id: 'c00',\n *    title: 'some example object',\n *    description: 'this is some longer text',\n *    type: 'Web Map',\n *    properties: {\n *      sourceId: '3ef'\n *    }\n *  },\n *  data: {\n *    theme: 'orange',\n *    parcelLayer: {\n *      itemId: '7ca',\n *      primaryField: 'PIN'\n *    }\n *  }\n * };\n * // lets pluck some id's into an array...\n * maybePush(getProp(model, 'item.properties.sourceId'), []);\n * // > ['3ef']\n *\n * // now try to get a value from a property that is missing...\n * maybePush(getProp(obj, 'item.properties.childId'), []);\n * // > []\n *\n * // easily pluck values via property paths\n * const summary = [\n *  'item.id',\n *  'item.properties.sourceId',\n *  'item.properties.childId',\n *  'data.parcelLayer.itemId'].reduce((acc, prop) => {\n *   return maybePush(getProp(model, key), acc);\n * }, []);\n *\n * // summary => ['c00', '3ef', '7ca']\n *\n * ```\n *\n * @param val - the possibly null value\n * @param target - the array to add the value to\n */\nfunction maybePush(val, target) {\n    if (val !== null && val !== undefined) {\n        // create a clone because mutation makes us sad...\n        target = cloneObject(target);\n        target.push(val);\n    }\n    return target;\n}\n/**\n * Convert a string to camelCase\n *\n * @export\n * @param {string} value\n * @returns {string} camelCased string\n */\nfunction camelize(value) {\n    // lower case the whole thing to start...\n    value = value.toLowerCase();\n    // strip out any/all special chars...\n    value = value.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, \" \");\n    // Hoisted from EmberJS (MIT License)\n    // https://github.com/emberjs/ember.js/blob/v2.0.1/packages/ember-runtime/lib/system/string.js#L23-L27\n    const STRING_CAMELIZE_REGEXP_1 = /(\\-|\\_|\\.|\\s)+(.)?/g;\n    const STRING_CAMELIZE_REGEXP_2 = /(^|\\/)([A-Z])/g;\n    return value\n        .replace(STRING_CAMELIZE_REGEXP_1, function (match, separator, chr) {\n        return chr ? chr.toUpperCase() : \"\";\n    })\n        .replace(STRING_CAMELIZE_REGEXP_2, function (match, separator, chr) {\n        return match.toLowerCase();\n    });\n}\n/**\n * Determines if a value is unique in an array\n * Allows for code like:\n *\n * ```js\n * const ary = [ 1, 2, 3, 3, 4, 5, 1 ];\n *\n * const result = ary.filter(unique);\n *\n * result => [ 1, 2, 3, 4, 5 ]\n * ```\n * @param value - the value to search for\n * @param index - the index of the searched value\n * @param ary - the array to search\n * @returns {boolean} - indicating if the value is unique in the array\n */\nfunction unique(value, index, ary) {\n    return ary.indexOf(value) === index;\n}\n/**\n * Determine if a value is null or undefined\n * @param value anything\n * @returns\n */\nconst isNil = (value) => value == null;\n/**\n * Upper case first letter (only) of a string\n * @param word\n * @returns Word\n */\nconst capitalize = (word) => {\n    // upper case first letter and return as element in array for backwards compatibility\n    const chars = Array.from(word);\n    chars[0] = chars[0].toUpperCase();\n    return chars.join(\"\");\n};\n/**\n * An IE-compatible stand-in for Javascript's [array.flat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n * @param arr the array\n * @returns an array\n */\nfunction flattenArray(arr) {\n    return arr.reduce((acc, val) => acc.concat(val), []);\n}\n\nexport { createId as a, camelize as b, cloneObject as c, maybePush as d, capitalize as e, flattenArray as f, findBy as g, isNil as i, maybeAdd as m, unique as u, without as w };\n"],"names":["cleanUrl","url","trim","length","slice","bBoxToExtent","bBox","xmin","ymin","xmax","ymax","wkid","spatialReference","createExtent","bboxToString","extent","map","a","join","extentToBBox","GLOBAL_EXTENT","getGeographicOrgExtent","hubRequestOptions","portal","portalSelf","orgExtent","defaultExtent","geometryServiceUrl","getProp","Promise","resolve","geometryParam","geometryType","geometries","options","httpMethod","params","JSON","stringify","transformForward","transformation","inSR","outSR","f","authentication","request","then","response","geom","catch","ex","isBBox","Array","isArray","extentToPolygon","rings","getExtentCenter","x","y","getItemApiUrl","item","portalUrlOrObject","token","id","access","getPortalApiUrl","URLSearchParams","append","toString","getItemThumbnailUrl","optionsOrToken","thumbnail","width","split","baseUrl","search","searchParams","delete","newSearch","getPortalUrl","urlOrObject","replace","portalHostname","urlKey","customBaseUrl","isPortal","getPortalUrl$1","requestOptions","obj","path","reduce","prev","curr","undefined","cloneObject","clone","i","hasOwnProperty","value","Date","getTime","Blob","type","findBy","arr","prop","acc","entry","without","filter","createId","prefix","Math","random","substr","maybeAdd","key","val","target","maybePush","push","camelize","toLowerCase","match","separator","chr","toUpperCase","unique","index","ary","indexOf","isNil","capitalize","word","chars","from","flattenArray","concat"],"sourceRoot":""}