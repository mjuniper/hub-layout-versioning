{"version":3,"file":"static/js/59002.e1d6371b.chunk.js","mappings":"8cAgBA,SAASA,EAAcC,GAKnB,OAJAA,EAAWA,EAASC,eACPC,SAAS,QAClBF,EAAWA,EAASG,MAAM,MAAM,IAE7BH,CACX,CAyDA,SAASI,EAAaC,GAElB,IAAMC,EAAQD,EAAQF,MAAM,QACtBI,EAAOD,EAAM,GACbE,EAAOF,EAAM,IAAMC,EAAKJ,MAAM,KAAKM,UAAU,GASnD,MALa,CACTC,WAJeH,EAAKJ,MAAM,KAAK,GAK/BI,KAAAA,EACAC,KAAAA,EAGR,CAEA,SAMeG,EAAa,EAAD,kCAe3B,aADC,OACD,0BAfA,WAA4BC,EAAYC,GAAc,4EAQjD,OAJGC,GAFAC,EAAAA,EAAAA,GAAOH,IAEGI,EAAAA,EAAAA,GAAQJ,EAAYC,IAGpBI,EAAAA,EAAAA,GAAcL,EAAYC,GACvC,kBACMC,EAAQI,MAAK,SAACC,GACjB,OAAKA,EAEEC,EAAqBD,EAAMN,GADvB,IAEf,KAAE,4CACL,+BAScO,EAAqB,EAAD,kCASnC,aADC,OACD,0BATA,WAAoCD,EAAMN,GAAc,iGAChCQ,EAAAA,EAAAA,GAAmBF,EAAMN,GAAe,OAAjD,OAALS,EAAQ,EAAH,eAEaC,EAAAA,EAAAA,GAAoBJ,EAAMK,EAAAA,EAAmBX,GAAe,OAGzC,OAH3CS,EAAMG,UAAY,EAAH,KAETC,EAAS,IAAIC,EAAAA,GAAeC,EAAAA,EAAAA,MAC5BC,EAAMH,EAAOI,cAAcR,EAAO,CAAC,GAAE,mBACpCS,EAAAA,EAAAA,GAAeT,EAAOO,EAAKhB,IAAe,4CACpD,+BAScmB,EAA0B,EAAD,oCAiDxC,aAFC,OAED,0BAjDA,WAAyCb,EAAMd,EAASQ,GAAc,kFAgCjD,GA9BXoB,EAAS,CACXC,OAAQf,EAAKe,OACbC,GAAIhB,EAAKgB,GACTC,KAAMjB,EAAKiB,KACXC,KAAMlB,EAAKmB,MACXC,MAAOpB,EAAKoB,MACZC,aAAcrB,EAAKqB,aACnBC,KAAMtB,EAAKsB,KACXC,WAAYvB,EAAKuB,WACjBC,QAASxB,EAAKyB,SAAWzB,EAAK0B,YAC9BC,YAAa,IAAIC,KAAK5B,EAAK6B,SAC3BC,kBAAmB,eACnBC,YAAa,IAAIH,KAAK5B,EAAKgC,UAC3BC,kBAAmB,gBACnBC,QAAQC,EAAAA,EAAAA,GAAUnC,EAAKiB,MACvBmB,MAAO,CACHC,KAAM,kBACNC,aAAc,kBACdC,UAAW,oBAMnBrD,EAAU,UAFO,IAEO,OAAGA,IAASsD,OAAOC,EAAAA,GAErCC,EAAQxD,EAAQyD,IAAI1D,GAEpB2D,GAAcC,EAAAA,EAAAA,GAAM,aAAcH,GAAOF,OAAOC,EAAAA,GAElDK,EAAW,CAAC,GACZF,EAAYG,OAAQ,CAAF,iCAEDC,EAAAA,EAAAA,GAAqBhD,EAAM4C,EAAalD,GAAe,OAAxEoD,EAAW,EAAH,aAU6E,OAPzFJ,EAAMO,SAAQ,SAACC,GACXpC,EAAOoC,EAAK7D,OAAQ8D,EAAAA,EAAAA,GAAQL,EAAUI,EAAK9D,KAC/C,IAGA0B,EAAOsB,MAAMG,WAAYa,EAAAA,EAAAA,GAAoBpD,EAAMN,GACnDoB,EAAOsB,MAAMC,MAAOgB,EAAAA,EAAAA,GAAevC,EAAOE,GAAItB,GAC9CoB,EAAOsB,MAAME,cAAegB,EAAAA,EAAAA,GAAkBxC,EAAOG,KAAMH,EAAOE,GAAIhB,EAAKqB,cAAc,kBAClFP,GAAM,6CAChB,+BAQcyC,EAAyB,GAAD,+BAqBvC,aAFC,OAED,0BArBA,WAAwCC,GAAQ,2EACxCA,EAASC,QAAU,KAAOD,EAASC,OAAS,KAAG,yCAGxCD,EAASE,QAAM,gCAKfF,EAASE,OAAO3D,MAAK,SAAC2D,GACzB,GAAIA,EAAKC,MAEL,MADc,IAAIC,MAAM,GAAD,OAAIF,EAAKC,MAAMxC,MAAK,eAAOuC,EAAKC,MAAME,OAAM,eAAOL,EAASC,SAInF,MAAM,IAAIG,MAAM,OAAD,OAAQJ,EAASC,OAAM,YAAID,EAASM,YAE3D,KAAE,4CAET,sBA2CD,SAASC,EAAalF,EAAUmF,GAC5B,GAAIA,EAAkBC,SAClB,OArCR,SAAuBpF,EAAUa,GAE7B,IAAIwE,EAAYrF,EAEZA,EAASsF,QAAQ,OAAS,IAC1BD,EAAYrF,EAASG,MAAM,MAAM,IAErC,IAAMoF,EAAY,gBAAH,OAAmBF,GAC5BG,EAAOC,OAAOC,OAAO,CACvBC,EAAG,iBAAF,OAAmBJ,IACrB1E,GACH,OAAO+E,EAAAA,EAAAA,GAAYJ,GACdtE,MAAK,SAAC2E,GAGP,OAAOA,EAAIC,QAAQnC,QAAO,SAACoC,GACvB,OAAO7F,EAAAA,EAAAA,GAAS6F,EAAEvD,aAAc+C,EACpC,IAAG,EACP,IACKrE,MAAK,SAAC8E,GACP,IAAKA,EACD,MAAM,IAAIjB,MAAM,kBACpB,MAAO,CACH/E,SAAUgG,EAAKC,IACfC,OAAQF,EAAK7D,GAErB,GACJ,CAUegE,CAAcnG,EAAUmF,GAG/B,IA1OsBiB,EA0OhBH,EAAM,GAAH,QA1OaG,EA0OcjB,EAAkBiB,UAxOnD,GAAP,OADaA,GAAa,yBACZ,oBAwOsD,YAAIpG,GAC9DqG,EAjOd,SAAwBlB,GACpB,IAAMlD,EAAS,CAAC,EACVqE,GAAQhC,EAAAA,EAAAA,GAAQa,EAAmB,wBAIzC,OAHImB,IACArE,EAAOsE,cAAgBD,GAEpBrE,CACX,CA0NwBuE,CAAerB,GAC/B,OAAOsB,MAAMR,EAAK,CAAES,OAAQ,MAAOL,QAAAA,EAASM,KAAM,SAAUzF,KAAKwD,EAEzE,CAwJA,SAASkC,EAAmBtF,GACxB,IAAIgD,EAAAA,EAAAA,GAAQhD,EAAO,kCAAoC,IACnD,OAAOA,EACX,IAAMuF,GAAQC,EAAAA,EAAAA,GAAYxF,GACpByF,EAAoBF,EAAMG,KAAKC,OAAOC,WAM5C,OALAL,EAAMG,KAAKG,MAAQ,CAAC,EAChBJ,IACAF,EAAMG,KAAKG,MAAMC,SA2BzB,SAA4BC,GACxB,IAAIC,EAAuBC,KAAKC,UAAUH,GAO1C,OAN6B5B,OAAOgC,KAAKC,GACpBtD,SAAQ,SAACuD,GAE1B,IAAMC,EAAUF,EAAoBC,GACpCL,EAAuBA,EAAqBnH,MAAMwH,GAAYE,KAAKD,EACvE,IACOL,KAAKO,MAAMR,EACtB,CApCoCS,CAAmBhB,IAEnDF,EAAM1F,KAAK6G,WAAWC,cAAgB,IAC/BpB,CACX,CACA,IAAMa,EAAsB,CAExB,mBAAoB,WACpB,0BAA2B,kBAC3B,gBAAiB,WACjB,yBAA0B,oBAC1B,0BAA2B,qBAC3B,4BAA6B,aAC7B,iBAAkB,YAClB,+CAAgD,sBAEhD,eAAgB,cAChB,sBAAuB,iBACvB,uBAAwB,kBACxB,oBAAqB,eACrB,6BAA8B,iBAC9B,iBAAkB,SAClB,qCAAsC,gCACtC,wEAAyE,+CACzE,4CAA6C,oCAC7C,cAAe,UAiBnB,SAASQ,EAAkB5G,GACvB,OAxMwB,OAwMpBgD,EAAAA,EAAAA,GAAQhD,EAAO,iCACRA,EASPA,EAAQsF,EADRtF,EAjGR,SAA0BA,GACtB,IAAIgD,EAAAA,EAAAA,GAAQhD,EAAO,kCAAoC,IACnD,OAAOA,EACX,IAAMuF,GAAQC,EAAAA,EAAAA,GAAYxF,GACpB6G,GAAS7D,EAAAA,EAAAA,GAAQuC,EAAO,sBAkB9B,OAjBAA,EAAMG,KAAKC,OAAOmB,UAAY,CAC1BC,cAAe,CACXC,SAAS,EACTC,YAAa,GACbC,UAAW,IAEfC,gBAAiB,CACbC,GAAI,CACAC,gBAAiB,CACbC,QAASC,QAAQV,GACjBhG,GAAIgG,MAtVxB,SAAoBW,EAAQC,GACxB,GAAsB,kBAAXD,GAAkC,OAAXA,GAET,kBAAdC,EAAX,CAGA,IADA,IAAMC,EAAaD,EAAU5I,MAAM,KAC1B8I,EAAI,EAAGA,EAAID,EAAW9E,OAAS,EAAG+E,IAAK,CAC5C,IAAKH,EAAOI,eAAeF,EAAWC,IAClC,OACJH,EAASA,EAAOE,EAAWC,GAC/B,QACOH,EAAOE,EAAWA,EAAW9E,OAAS,GAPnC,CAQd,CA+UIiF,CAAWtC,EAAO,uBAClBuC,EAAAA,EAAAA,GAAQ,gCAAiC,IAAKvC,GACvCA,CACX,CA0EgBwC,CADR/H,EAhHR,SAAmCA,GAC/B,IAAIgD,EAAAA,EAAAA,GAAQhD,EAAO,kCAAoC,IACnD,OAAOA,EACX,IAAMuF,GAAQC,EAAAA,EAAAA,GAAYxF,GACpBgI,GAAShF,EAAAA,EAAAA,GAAQuC,EAAO,wBAA0B,GAGxD,OAFAA,EAAMG,KAAKuC,QAAQD,OAASA,EAAO3F,OAAO5C,EAAAA,GAC1C8F,EAAM1F,KAAK6G,WAAWC,cAAgB,IAC/BpB,CACX,CAwGgB2C,CADRlI,EApIR,SAAwBA,GAEpB,IAAIgD,EAAAA,EAAAA,GAAQhD,EAAO,kCAAoC,IACnD,OAAOA,EACX,IAAMuF,GAAQC,EAAAA,EAAAA,GAAYxF,GACpBiI,GAAUjF,EAAAA,EAAAA,GAAQuC,EAAO,iBAAmB,CAAC,EAQnD,OAPIvC,EAAAA,EAAAA,GAAQuC,EAAO,wBACf0C,EAAQD,QAASxC,EAAAA,EAAAA,GAAYD,EAAMG,KAAKC,OAAOqC,eACxCzC,EAAMG,KAAKC,OAAOqC,QAE7BzC,EAAMG,KAAKuC,QAAUA,EAErB1C,EAAM1F,KAAK6G,WAAWC,cAAgB,IAC/BpB,CACX,CAsHgB4C,CADRnI,EAhKR,SAAkCA,GAE9B,IAAIgD,EAAAA,EAAAA,GAAQhD,EAAO,kCAAoC,IACnD,OAAOA,EACX,IAAMuF,GAAQC,EAAAA,EAAAA,GAAYxF,GAgB1B,MAdA,CACI,YACA,kBACA,cACA,iBACA,eACF8C,SAAQ,SAAC5D,GACHqG,EAAMG,KAAKC,OAAOzG,IACiB,kBAA5BqG,EAAMG,KAAKC,OAAOzG,KACzBqG,EAAMG,KAAKC,OAAOzG,GAAQqG,EAAMG,KAAKC,OAAOzG,GAAMP,cAE1D,IAEA4G,EAAM1F,KAAK6G,WAAWC,cAAgB,IAC/BpB,CACX,CA2IgB6C,CADRpI,EAtMR,SAA0BA,GAEtB,IAAIgD,EAAAA,EAAAA,GAAQhD,EAAO,kCAAoC,EACnD,OAAOA,EACX,IAAMuF,GAAQC,EAAAA,EAAAA,GAAYxF,GAW1B,GATA,CAAC,UAAW,SAAS8C,SAAQ,SAAC5D,UACnBqG,EAAMG,KAAKC,OAAOzG,EAC7B,IAEKqG,EAAM1F,KAAK6G,aACZnB,EAAM1F,KAAK6G,WAAa,CAAC,GAE7BnB,EAAM1F,KAAK6G,WAAWC,cAAgB,EAElCpB,EAAMG,KAAKC,OAAOqC,QAAUK,MAAMC,QAAQ/C,EAAMG,KAAKC,OAAOqC,QAAS,CAGrE,IAAMO,EAAWhD,EAAMG,KAAKC,OAAOqC,OAC9BxF,KAAI,SAACgG,GACN,MAAqB,kBAAVA,EACAA,EAAM3H,GAGN2H,CAEf,IACKnG,QAAO,SAACmG,GAAK,QAAOA,CAAK,IAE9BjD,EAAMG,KAAKC,OAAOqC,OAASO,CAC/B,CACA,OAAOhD,CACX,CAsKgBkD,CAAiBzI,OAWjC,CAOA,SAAS0I,EAAY7H,EAAIgD,GACrB,OAAO8E,EAAAA,EAAAA,GAAS9H,EAAIgD,GAAmBjE,KAAKgH,EAChD,CAQA,SAASgC,EAAetJ,EAAYuE,GAChC,IAAIgF,EACJ,IAAIpJ,EAAAA,EAAAA,GAAOH,GACPuJ,EAAOH,EAAYpJ,EAAYuE,OAE9B,CACD,IAAIiF,EAAiBxJ,EAIrBuJ,EAAOjF,EADPkF,GADAA,EAAiBrK,EAAcqK,IACCjK,MAAM,KAAK,GACPgF,GAAmBjE,MAAK,YAAS,OAAO8I,EAAP,EAAN9D,OAAiCf,EAAkB,GACtH,CACA,OAAOgF,CACX,CA8IA,SAOeE,EAAU,EAAD,kCAMxB,aADC,OACD,0BANA,WAAyBzJ,EAAYC,GAAc,4FAE3BqJ,EAAetJ,EAAYC,GAAe,OAAnD,OAALS,EAAQ,EAAH,uBAEJgJ,EAAmBhJ,EAAOT,IAAe,4CACnD,sBAOD,SAASyJ,EAAmBhJ,EAAOT,GAI/B,IAAM0J,EA9JV,SAAkCjJ,GAS9B,IAAMuF,GAAQC,EAAAA,EAAAA,GAAYxF,GAkC1B,OAjCAuF,EAAMG,KAAKwD,YAAc3D,EAAMG,KAAKwD,aAAe,GACtB,CAIzB,CACIhK,KAAM,iCACN4B,KAAM,QACNoI,YAAa,CAAC,uBAElB,CACIhK,KAAM,aACN4B,KAAM,OACNoI,YAAa,CAAC,qBAGDpG,SAAQ,SAACqG,GAC1B,IAAMC,GAAQpG,EAAAA,EAAAA,GAAQuC,EAAO4D,EAAKjK,MAC9BkK,GACAD,EAAKD,YAAYpG,SAAQ,SAACuG,GACN9D,EAAMG,KAAKwD,YAAYI,MAAK,SAACC,GAAC,OAAKA,EAAEF,aAAeA,GAAcE,EAAEC,kBAAoBJ,CAAK,KAEzG7D,EAAMG,KAAKwD,YAAYO,KAAK,CACxBJ,WAAAA,EACAK,kBAAmBP,EAAKrI,KACxB0I,gBAAiBJ,GAG7B,GAER,IAGO7D,CACX,CAkHiCoE,CAAyB3J,GAKtD,OA7GJ,SAAsBA,EAAO0E,EAAMnF,GAC/B,IAAIqK,EACA5E,EAgBJ,OAfIzF,EAAesK,iBAEf7E,EADgBzF,EAAesK,eACf7E,OAGpBN,EAAKoF,cAAe7G,EAAAA,EAAAA,GAAoBjD,EAAMH,KAAMN,EAAgByF,GAEpEN,EAAKlD,YAAc,IAAIC,KAAKzB,EAAMH,KAAK6B,SACvCgD,EAAK/C,kBAAoB,eACzB+C,EAAK9C,YAAc,IAAIH,KAAKzB,EAAMH,KAAKgC,UACvC6C,EAAK5C,kBAAoB,gBAGzB4C,EAAKqF,cAAeC,EAAAA,EAAAA,IAA0D,QAA9BJ,EAAK5J,EAAM0F,KAAKuE,gBAA6B,IAAPL,OAAgB,EAASA,EAAGG,eAAiB,CAAC,EAAGG,EAAAA,GAEhIxF,CACX,CA0FWyF,CAAanK,EAHL,IAAIK,EAAAA,EA7EvB,WACI,IAAMmC,GAAM4H,EAAAA,EAAAA,KAgDZ,OA9CA5H,EAAIiH,KAAK,CAAEY,UAAW,UAAWC,SAAU,iBAC3C9H,EAAIiH,KAAK,CAAEY,UAAW,QAASC,SAAU,eACzC9H,EAAIiH,KAAK,CAAEY,UAAW,cAAeC,SAAU,qBAC/C9H,EAAIiH,KAAK,CACLY,UAAW,eACXC,SAAU,sBAGK,CACf,QACA,QACA,YACA,kBACA,iBACA,WACA,gBACA,MACA,YACA,aACA,cACA,UAEOxH,SAAQ,SAAC0F,GAChBhG,EAAIiH,KAAK,CAAEY,UAAW7B,EAAO8B,SAAU,eAAF,OAAiB9B,IAC1D,IAEAhG,EAAIiH,KAAK,CACLY,UAAW,OACXC,SAAU,yBAEd9H,EAAIiH,KAAK,CACLY,UAAW,sBACXC,SAAU,6BAEd9H,EAAIiH,KAAK,CACLY,UAAW,eACXC,SAAU,+BAEd9H,EAAIiH,KAAK,CACLY,UAAW,YACXC,SAAU,8BAEd9H,EAAIiH,KAAK,CACLY,UAAW,OACXC,SAAU,eAEP9H,CACX,CA2BsC+H,IACd/J,cAAcyI,EAAsB,CAAC,GAExB1J,EACrC,CACA,SAOeiL,EAAuB,EAAD,iDA8CpC,OA9CoC,0BAArC,WAAsC3K,EAAMd,EAASQ,GAAc,kFAgC9C,GA9BXoB,EAAS,CACXC,OAAQf,EAAKe,OACbC,GAAIhB,EAAKgB,GACTC,KAAMjB,EAAKiB,KACXC,KAAMlB,EAAKmB,MACXC,MAAOpB,EAAKoB,MACZC,aAAcrB,EAAKqB,aACnBC,KAAMtB,EAAKsB,KACXC,WAAYvB,EAAKuB,WACjBC,QAASxB,EAAKyB,SAAWzB,EAAK0B,YAC9BC,YAAa,IAAIC,KAAK5B,EAAK6B,SAC3BC,kBAAmB,eACnBC,YAAa,IAAIH,KAAK5B,EAAKgC,UAC3BC,kBAAmB,gBACnBC,QAAQC,EAAAA,EAAAA,GAAUnC,EAAKiB,MACvBmB,MAAO,CACHC,KAAM,kBACNC,aAAc,kBACdC,UAAW,oBAMnBrD,EAAU,UAFO,IAEO,OAAGA,IAASsD,OAAOC,EAAAA,GAErCC,EAAQxD,EAAQyD,IAAI1D,GAEpB2D,GAAcC,EAAAA,EAAAA,GAAM,aAAcH,GAAOF,OAAOC,EAAAA,GAElDK,EAAW,CAAC,GACZF,EAAYG,OAAQ,CAAF,iCAEDC,EAAAA,EAAAA,GAAqBhD,EAAM4C,EAAalD,GAAe,OAAxEoD,EAAW,EAAH,aAS6E,OANzFJ,EAAMO,SAAQ,SAACC,GACXpC,EAAOoC,EAAK7D,OAAQ8D,EAAAA,EAAAA,GAAQL,EAAUI,EAAK9D,KAC/C,IAEA0B,EAAOsB,MAAMG,WAAYa,EAAAA,EAAAA,GAAoBpD,EAAMN,GACnDoB,EAAOsB,MAAMC,KAAOrC,EAAK8E,IACzBhE,EAAOsB,MAAME,cAAegB,EAAAA,EAAAA,GAAkBxC,EAAOG,KAAMH,EAAOE,GAAIhB,EAAKqB,cAAc,kBAClFP,GAAM,6CAChB,sB,wBC/tBD,SAAS+B,EAAMxD,GAAgB,IAAVuL,EAAM,UAAH,6CAAG,GACvB,OAAOA,EAAIjI,KAAI,SAACkI,GAAC,OAAKA,EAAExL,EAAK,GACjC,C,4HAQA,IAAMgL,EAA0B,CAC5BS,UAAU,EACVC,SAAS,EACTX,UAAU,GAORY,EAA4B,CAC9B,CACIC,OAAQ,OACRC,WAAY,WACZ7B,YAAa,CAAC,kBAElB,CACI4B,OAAQ,OACRC,WAAY,UACZ7B,YAAa,CAAC,kBAElB,CACI4B,OAAQ,OACRC,WAAY,WACZ7B,YAAa,CAAC,mBAOhB8B,EAAkB,CACpB,kBACA,kBACA,gBACA,iBAMEC,EAA0B,CAC5B,CACI5B,WAAY,kBACZ6B,WAAY,CAAC,SACbC,eAAe,EACfC,WAAY,CAAC,0BACbC,SAAU,CAAC,YAAa,cAAe,qBAE3C,CACIhC,WAAY,gBACZ6B,WAAY,CAAC,SACbC,eAAe,EACfE,SAAU,CAAC,YAAa,cAAe,qBAE3C,CACIhC,WAAY,kBACZ6B,WAAY,CAAC,SACbC,eAAe,EACfE,SAAU,CAAC,YAAa,cAAe,oBACvCC,aAAa,GAEjB,CACIjC,WAAY,gBACZkC,YAAY,EACZL,WAAY,CAAC,SACbC,eAAe,EACfE,SAAU,CAAC,YAAa,cAAe,qB","sources":["../.yalc/@esri/hub-components/dist/esm/HubSites-36599d40.js","../.yalc/@esri/hub-components/dist/esm/SiteBusinessRules-05d0a02f.js"],"sourcesContent":["import { g as getFamily, n as getItemHomeUrl, m as getHubRelativeUrl, i as includes } from './_internal-f8d6239a.js';\nimport { e as computeProps$1, j as getItemBySlug, k as fetchModelFromItem, l as fetchModelResources, P as PropertyMapper, b as getPropertyMap$1, E as EntityResourceMap, f as getModel, p as processEntityCapabilities, i as getBasePropertyMap } from './getPropertyMap-7bed72e1.js';\nimport { f as fetchItemEnrichments } from './_enrichments-9747f1f3.js';\nimport { u as unique, c as cloneObject } from './util-2150bd9e.js';\nimport { g as getProp } from './get-prop-d82e4fa6.js';\nimport { a as getItemThumbnailUrl } from './get-item-thumbnail-url-7608a737.js';\nimport { i as isGuid } from './is-guid-8127621d.js';\nimport { g as getItem } from './get-f2cd18e7.js';\nimport { m as mapBy, c as SiteDefaultCapabilities } from './SiteBusinessRules-05d0a02f.js';\nimport { s as setProp } from './set-prop-c51a6d0c.js';\nimport { s as searchItems } from './search-3af9e278.js';\n\n/**\n * Remove protocol if present\n * @param {string} hostname Hostname\n */\nfunction stripProtocol(hostname) {\n    hostname = hostname.toLowerCase();\n    if (hostname.includes(\"//\")) {\n        hostname = hostname.split(\"//\")[1];\n    }\n    return hostname;\n}\n\n/**\n * Extract the domain service from the request options\n * @param {string} hubApiUrl\n * @private\n */\nfunction _getDomainServiceUrl(hubApiUrl) {\n    const base = hubApiUrl || \"https://hub.arcgis.com\";\n    return `${base}/api/v3/domains`;\n}\n\n/**\n * Construct the auth header from a hub request options\n * @param {IHubRequestOptions} hubRequestOptions\n * @private\n */\nfunction _getAuthHeader(hubRequestOptions) {\n    const result = {};\n    const token = getProp(hubRequestOptions, \"authentication.token\");\n    if (token) {\n        result.Authorization = token;\n    }\n    return result;\n}\n\n/**\n * Delete a property from an object using a deep path\n * MODIFIES PASSED TARGET\n * @param {Object} target Object from which we want to delete the property\n * @param {string} path Dotted path to the property we want to delete\n */\nfunction deleteProp(target, lookupStr) {\n    if (typeof target !== \"object\" || target === null)\n        return;\n    if (typeof lookupStr !== \"string\")\n        return;\n    const lookupKeys = lookupStr.split(\".\");\n    for (let i = 0; i < lookupKeys.length - 1; i++) {\n        if (!target.hasOwnProperty(lookupKeys[i]))\n            return;\n        target = target[lookupKeys[i]];\n    }\n    delete target[lookupKeys[lookupKeys.length - 1]];\n}\n\n/**\n * Parse an IncludeSpec from the include string\n * Include String structure:\n * - `enrichment{.deep.path} AS propertyName`\n *\n * Examples\n * - `server.layers.0.name as layerName` -> use the `server` enrichment, extract the name of the first layer and attach that as `layerName`\n * - `server.layers` ->  use the `server` enrichment, attach the `layers` array as `layers`\n * @param include\n * @returns\n */\nfunction parseInclude(include) {\n    // TODO: Validate enrichment? Not clear how we'd do that other than a manully maintained string list\n    const parts = include.split(\" AS \");\n    const path = parts[0];\n    const prop = parts[1] || path.split(\".\").reverse()[0];\n    const enrichment = path.split(\".\")[0];\n    // We need the actual list of string values so we can verify\n    // what we get in, is infact a valid enrichment.\n    const spec = {\n        enrichment,\n        path,\n        prop,\n    };\n    return spec;\n}\n\n/**\n * @private\n * Get a Hub Project by id or slug\n * @param identifier item id or slug\n * @param requestOptions\n */\nasync function fetchProject(identifier, requestOptions) {\n    let getPrms;\n    if (isGuid(identifier)) {\n        // get item by id\n        getPrms = getItem(identifier, requestOptions);\n    }\n    else {\n        getPrms = getItemBySlug(identifier, requestOptions);\n    }\n    return getPrms.then((item) => {\n        if (!item)\n            return null;\n        return convertItemToProject(item, requestOptions);\n    });\n}\n/**\n * @private\n * Convert an Hub Project Item into a Hub Project, fetching any additional\n * information that may be required\n * @param item\n * @param auth\n * @returns\n */\nasync function convertItemToProject(item, requestOptions) {\n    const model = await fetchModelFromItem(item, requestOptions);\n    // Fetch resources based on above obj\n    model.resources = await fetchModelResources(item, EntityResourceMap, requestOptions);\n    // TODO: In the future we will handle the boundary fetching from resource\n    const mapper = new PropertyMapper(getPropertyMap$1());\n    const prj = mapper.modelToObject(model, {});\n    return computeProps$1(model, prj, requestOptions);\n}\n/**\n * @private\n * Fetch project specific enrichments\n * @param item\n * @param include\n * @param requestOptions\n * @returns\n */\nasync function enrichProjectSearchResult(item, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: item.access,\n        id: item.id,\n        type: item.type,\n        name: item.title,\n        owner: item.owner,\n        typeKeywords: item.typeKeywords,\n        tags: item.tags,\n        categories: item.categories,\n        summary: item.snippet || item.description,\n        createdDate: new Date(item.created),\n        createdDateSource: \"item.created\",\n        updatedDate: new Date(item.modified),\n        updatedDateSource: \"item.modified\",\n        family: getFamily(item.type),\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // default includes\n    const DEFAULTS = [];\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    if (enrichments.length) {\n        // TODO: Look into caching for the requests in fetchItemEnrichments\n        enriched = await fetchItemEnrichments(item, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    // Handle links\n    // TODO: Link handling should be an enrichment\n    result.links.thumbnail = getItemThumbnailUrl(item, requestOptions);\n    result.links.self = getItemHomeUrl(result.id, requestOptions);\n    result.links.siteRelative = getHubRelativeUrl(result.type, result.id, item.typeKeywords);\n    return result;\n}\n\n/**\n * Parse a response object, and throw if it contains an error.\n * Just a wrapper to hide some platform idiosyncracies\n * @param {Response} response Response object to parse\n * @private\n */\nasync function _checkStatusAndParseJson(response) {\n    if (response.status >= 200 && response.status < 300) {\n        // don't try to parse the body if it's empty\n        // if (response.body) { // the fetch polyfill for IE... does not expose a body property... :(\n        return response.json();\n        // }\n    }\n    else {\n        // we're gonna throw, but we need to construct the error\n        return response.json().then((json) => {\n            if (json.error) {\n                const error = new Error(`${json.error.title} :: ${json.error.detail} :: ${response.status}`);\n                throw error;\n            }\n            else {\n                throw new Error(`Got ${response.status} ${response.statusText}`);\n            }\n        });\n    }\n}\n\n/**\n * Lookup a domain in Portal\n * @param {string} hostname to locate the site for\n * @param {IRequestOptions} requestOptions\n * @private\n */\nfunction _lookupPortal(hostname, requestOptions) {\n    // for portal we search for a site w/ `hubsubdomain|<domain>` type keyword\n    let subdomain = hostname;\n    // if this subdomain has a hash in it, knock that off\n    if (hostname.indexOf(\"#/\") > -1) {\n        subdomain = hostname.split(\"#/\")[1];\n    }\n    const queryTerm = `hubsubdomain|${subdomain}`;\n    const opts = Object.assign({\n        q: `typekeywords: ${queryTerm}`,\n    }, requestOptions);\n    return searchItems(opts)\n        .then((res) => {\n        // since the search api stems the terms, we need to verify\n        // by looking at the results\n        return res.results.filter((r) => {\n            return includes(r.typeKeywords, queryTerm);\n        })[0];\n    })\n        .then((site) => {\n        if (!site)\n            throw new Error(\"site not found\");\n        return {\n            hostname: site.url,\n            siteId: site.id,\n        };\n    });\n}\n\n/**\n * Fetch a the information about a domain.\n * Different implementation for Portal vs AGO\n * @param {string} hostname of domain record to locate\n * @param {IHubRequestOptions} hubRequestOptions\n */\nfunction lookupDomain(hostname, hubRequestOptions) {\n    if (hubRequestOptions.isPortal) {\n        return _lookupPortal(hostname, hubRequestOptions);\n    }\n    else {\n        const url = `${_getDomainServiceUrl(hubRequestOptions.hubApiUrl)}/${hostname}`;\n        const headers = _getAuthHeader(hubRequestOptions);\n        return fetch(url, { method: \"GET\", headers, mode: \"cors\" }).then(_checkStatusAndParseJson);\n    }\n}\n\nconst SITE_SCHEMA_VERSION = 1.5;\n\n/**\n * Apply the first schema version to the item\n * @param {Object} model Site Model\n * @private\n */\nfunction _applySiteSchema(model) {\n    // if this has already been thru this step... skip it...\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1)\n        return model;\n    const clone = cloneObject(model);\n    // proactively purge old properties\n    [\"groupId\", \"title\"].forEach((prop) => {\n        delete clone.data.values[prop];\n    });\n    // ensure item.properties\n    if (!clone.item.properties) {\n        clone.item.properties = {};\n    }\n    clone.item.properties.schemaVersion = 1;\n    // Groups!\n    if (clone.data.values.groups && Array.isArray(clone.data.values.groups)) {\n        // we have some groups arrays in prod where the contents are a mix of strings and objects.\n        // we need to ensure this is just an array of groupIds...\n        const groupIds = clone.data.values.groups\n            .map((entry) => {\n            if (typeof entry === \"object\") {\n                return entry.id;\n            }\n            else {\n                return entry;\n            }\n        })\n            .filter((entry) => !!entry);\n        // now assign this back to the groups\n        clone.data.values.groups = groupIds;\n    }\n    return clone;\n}\n\n/**\n * Enforce lowercase domains\n * @param {Object} model Site Model\n * @private\n */\nfunction _enforceLowercaseDomains(model) {\n    // exit if this has been applied...\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.1)\n        return model;\n    const clone = cloneObject(model);\n    // all the possible domain properties must be lower case\n    [\n        \"subdomain\",\n        \"defaultHostname\",\n        \"internalUrl\",\n        \"customHostname\",\n        \"externalUrl\",\n    ].forEach((prop) => {\n        if (clone.data.values[prop] &&\n            typeof clone.data.values[prop] === \"string\") {\n            clone.data.values[prop] = clone.data.values[prop].toLowerCase();\n        }\n    });\n    // bump the schemaVersion\n    clone.item.properties.schemaVersion = 1.1;\n    return clone;\n}\n\n/**\n * Move the data.values.groups array into the\n * data.catalog object\n * @param {Object} model Site Model\n * @private\n */\nfunction _ensureCatalog(model) {\n    // early exit\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.2)\n        return model;\n    const clone = cloneObject(model);\n    const catalog = getProp(clone, \"data.catalog\") || {};\n    if (getProp(clone, \"data.values.groups\")) {\n        catalog.groups = cloneObject(clone.data.values.groups);\n        delete clone.data.values.groups;\n    }\n    clone.data.catalog = catalog;\n    // bump the schemaVersion\n    clone.item.properties.schemaVersion = 1.2;\n    return clone;\n}\n\n/**\n * Remove any non-guid entries from the data catalog groups array\n * @param {object} model Site Model\n * @private\n */\nfunction _purgeNonGuidsFromCatalog(model) {\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.3)\n        return model;\n    const clone = cloneObject(model);\n    const groups = getProp(clone, \"data.catalog.groups\") || [];\n    clone.data.catalog.groups = groups.filter(isGuid);\n    clone.item.properties.schemaVersion = 1.3;\n    return clone;\n}\n\n/**\n * Add telemetry config object\n * @private\n * @param {object} model Site Model\n * @returns {object}\n */\nfunction _ensureTelemetry(model) {\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.4)\n        return model;\n    const clone = cloneObject(model);\n    const gacode = getProp(clone, \"data.values.gacode\");\n    clone.data.values.telemetry = {\n        consentNotice: {\n            isTheme: true,\n            consentText: \"\",\n            policyURL: \"\",\n        },\n        customAnalytics: {\n            ga: {\n                customerTracker: {\n                    enabled: Boolean(gacode),\n                    id: gacode,\n                },\n            },\n        },\n    };\n    deleteProp(clone, \"data.values.gacode\");\n    setProp(\"item.properties.schemaVersion\", 1.4, clone);\n    return clone;\n}\n\n/**\n * Migrates the site so it can store configurations for multiple feed formats\n * (dcat-us-1.1, dcat-ap-2.0.1, etc.). If the site has an existing custom\n * configuration for dcat-us 1.1, a copy of that configuration will be modified\n * to use values from the v3 api instead of values from the index.\n *\n * Structural Impacts:\n * - site.data.feeds will be added.\n * - site.data.feeds.dcatUS11 will be added if site.data.values.dcatConfig exists.\n *\n * @param {object} model Site Model\n * @private\n */\nfunction _migrateFeedConfig(model) {\n    if (getProp(model, \"item.properties.schemaVersion\") >= 1.5)\n        return model;\n    const clone = cloneObject(model);\n    const oldDcatUS11Config = clone.data.values.dcatConfig;\n    clone.data.feeds = {};\n    if (oldDcatUS11Config) {\n        clone.data.feeds.dcatUS11 = _migrateToV3Values(oldDcatUS11Config);\n    }\n    clone.item.properties.schemaVersion = 1.5;\n    return clone;\n}\nconst indexValueToV3Value = {\n    // Defaults\n    \"{{default.name}}\": \"{{name}}\",\n    \"{{default.description}}\": \"{{description}}\",\n    \"{{item.tags}}\": \"{{tags}}\",\n    \"{{item.created:toISO}}\": \"{{created:toISO}}\",\n    \"{{item.modified:toISO}}\": \"{{modified:toISO}}\",\n    \"{{default.source.source}}\": \"{{source}}\",\n    \"{{item.owner}}\": \"{{owner}}\",\n    \"{{org.portalProperties.links.contactUs.url}}\": \"{{orgContactEmail}}\",\n    // Custom Values\n    \"{{org.name}}\": \"{{orgName}}\",\n    \"{{item.categories}}\": \"{{categories}}\",\n    \"{{item.licenseInfo}}\": \"{{licenseInfo}}\",\n    \"{{item.modified}}\": \"{{modified}}\",\n    \"{{enrichments.categories}}\": \"{{categories}}\",\n    \"{{default.id}}\": \"{{id}}\",\n    \"{{item.licenseInfo || No License}}\": \"{{licenseInfo || No License}}\",\n    \"{{org.portalProperties.links.contactUs.url || mailto:data@tempe.gov}}\": \"{{orgContactEmail || mailto:data@tempe.gov}}\",\n    \"{{default.description || No Description}}\": \"{{description || No Description}}\",\n    \"{{item.id}}\": \"{{id}}\",\n};\nfunction _migrateToV3Values(originalConfig) {\n    let migratedConfigString = JSON.stringify(originalConfig);\n    const supportedIndexValues = Object.keys(indexValueToV3Value);\n    supportedIndexValues.forEach((indexValue) => {\n        // Replace all occurrences of indexValue with the corresponding v3Value\n        const v3Value = indexValueToV3Value[indexValue];\n        migratedConfigString = migratedConfigString.split(indexValue).join(v3Value);\n    });\n    return JSON.parse(migratedConfigString);\n}\n\n/**\n * Upgrades the schema upgrades\n * @param model IModel\n */\nfunction upgradeSiteSchema(model) {\n    if (getProp(model, \"item.properties.schemaVersion\") === SITE_SCHEMA_VERSION) {\n        return model;\n    }\n    else {\n        // apply upgrade functions in order...\n        model = _applySiteSchema(model);\n        model = _enforceLowercaseDomains(model);\n        model = _ensureCatalog(model);\n        model = _purgeNonGuidsFromCatalog(model);\n        model = _ensureTelemetry(model);\n        model = _migrateFeedConfig(model);\n        // WARNING - If you are writing a site schema migration,\n        // you probably need to apply it to site drafts as well!\n        // See https://github.com/Esri/hub.js/issues/498 for more details.\n        return model;\n    }\n}\n\n/**\n * Get a Site Model by it's Item Id, and apply schema upgrades\n * @param {String} id Site Item Id\n * @param {IHubRequestOptions} hubRequestOptions\n */\nfunction getSiteById(id, hubRequestOptions) {\n    return getModel(id, hubRequestOptions).then(upgradeSiteSchema);\n}\n\n/**\n * Returns site model given various kinds of identifier\n *\n * @param identifier - a site item ID, site hostname, enterprise site slug, or full site URL\n * @param hubRequestOptions\n */\nfunction fetchSiteModel(identifier, hubRequestOptions) {\n    let prms;\n    if (isGuid(identifier)) {\n        prms = getSiteById(identifier, hubRequestOptions);\n    }\n    else {\n        let hostnameOrSlug = identifier;\n        // get down the the hostname\n        hostnameOrSlug = stripProtocol(hostnameOrSlug);\n        hostnameOrSlug = hostnameOrSlug.split(\"/\")[0];\n        prms = lookupDomain(hostnameOrSlug, hubRequestOptions).then(({ siteId }) => getSiteById(siteId, hubRequestOptions));\n    }\n    return prms;\n}\n\n/**\n * Informal migration that creates default permission policies based on the\n * Content and Collaboration Groups\n * @param model\n */\nfunction applyPermissionMigration(model) {\n    // TODO: Once we formalize the permission mapping we need to\n    // bump the current schema version, and add it here so this gets\n    // applied once and then never again.\n    // const PERMISSION_SCHEMA_VERSION = 1.6\n    // if (\n    //   getProp(model, \"item.properties.schemaVersion\") >= PERMISSION_SCHEMA_VERSION\n    // )\n    //   return model;\n    const clone = cloneObject(model);\n    clone.data.permissions = clone.data.permissions || [];\n    const permissionMigrations = [\n        // Per discussion with @jaydev on 2022-12-01 we are going to\n        // allow content team members to create projects in the context\n        // of a site\n        {\n            prop: \"item.properties.contentGroupId\",\n            type: \"group\",\n            permissions: [\"hub:project:create\"],\n        },\n        {\n            prop: \"item.owner\",\n            type: \"user\",\n            permissions: [\"hub:site:delete\"],\n        },\n    ];\n    permissionMigrations.forEach((defn) => {\n        const value = getProp(clone, defn.prop);\n        if (value) {\n            defn.permissions.forEach((permission) => {\n                const present = clone.data.permissions.find((p) => p.permission === permission && p.collaborationId === value);\n                if (!present) {\n                    clone.data.permissions.push({\n                        permission,\n                        collaborationType: defn.type,\n                        collaborationId: value,\n                    });\n                }\n            });\n        }\n    });\n    // TODO: Uncomment when we formalize the schema version this applies to\n    // clone.item.properties.schemaVersion = PERMISSION_SCHEMA_VERSION;\n    return clone;\n}\n\n/**\n * Given a model and a site, set various computed properties that can't be directly mapped\n * @private\n * @param model\n * @param site\n * @param requestOptions\n * @returns\n */\nfunction computeProps(model, site, requestOptions) {\n    var _a;\n    let token;\n    if (requestOptions.authentication) {\n        const session = requestOptions.authentication;\n        token = session.token;\n    }\n    // thumbnail url\n    site.thumbnailUrl = getItemThumbnailUrl(model.item, requestOptions, token);\n    // Handle Dates\n    site.createdDate = new Date(model.item.created);\n    site.createdDateSource = \"item.created\";\n    site.updatedDate = new Date(model.item.modified);\n    site.updatedDateSource = \"item.modified\";\n    // Handle capabilities\n    // NOTE: This does not currently contain the older \"capabilities\" values!\n    site.capabilities = processEntityCapabilities(((_a = model.data.settings) === null || _a === void 0 ? void 0 : _a.capabilities) || {}, SiteDefaultCapabilities);\n    // cast b/c this takes a partial but returns a full site\n    return site;\n}\n\n/**\n * Returns an Array of IPropertyMap objects\n * We could define these directly, but since the\n * properties of IHubSite map directly to properties\n * on item or data, it's slightly less verbose to\n * generate the structure.\n * @returns\n */\nfunction getPropertyMap() {\n    const map = getBasePropertyMap();\n    // Site specific mappings\n    map.push({ objectKey: \"catalog\", modelKey: \"data.catalog\" });\n    map.push({ objectKey: \"feeds\", modelKey: \"data.feeds\" });\n    map.push({ objectKey: \"permissions\", modelKey: \"data.permissions\" });\n    map.push({\n        objectKey: \"capabilities\",\n        modelKey: \"data.capabilities\",\n    });\n    // Props stored below `data.values`\n    const valueProps = [\n        \"pages\",\n        \"theme\",\n        \"subdomain\",\n        \"defaultHostname\",\n        \"customHostname\",\n        \"clientId\",\n        \"defaultExtent\",\n        \"map\",\n        \"telemetry\",\n        \"headerSass\",\n        \"headContent\",\n        \"layout\",\n    ];\n    valueProps.forEach((entry) => {\n        map.push({ objectKey: entry, modelKey: `data.values.${entry}` });\n    });\n    // Deeper/Indirect mappings\n    map.push({\n        objectKey: \"slug\",\n        modelKey: \"item.properties.slug\",\n    });\n    map.push({\n        objectKey: \"classicCapabilities\",\n        modelKey: \"data.values.capabilities\",\n    });\n    map.push({\n        objectKey: \"capabilities\",\n        modelKey: \"data.settings.capabilities\",\n    });\n    map.push({\n        objectKey: \"orgUrlKey\",\n        modelKey: \"item.properties.orgUrlKey\",\n    });\n    map.push({\n        objectKey: \"name\",\n        modelKey: \"item.title\",\n    });\n    return map;\n}\n\n/**\n * Returns site model given various kinds of identifier\n *\n * @param identifier - a site item ID, site hostname, enterprise site slug, or full site URL\n * @param requestOptions\n * @private // remove when we remove existing fetchSite function\n */\nasync function fetchSite(identifier, requestOptions) {\n    // get the model\n    const model = await fetchSiteModel(identifier, requestOptions);\n    // convert to IHubSite\n    return convertModelToSite(model, requestOptions);\n}\n/**\n * Convert an IModel for a Hub Site Item into an IHubSite\n * @param model\n * @param requestOptions\n * @returns\n */\nfunction convertModelToSite(model, requestOptions) {\n    // Add permissions based on Groups\n    // This may get moved to a formal schema migration in the future but for now\n    // we can do it here as there is no ux for managing permissions yet.\n    const modelWithPermissions = applyPermissionMigration(model);\n    // convert to site\n    const mapper = new PropertyMapper(getPropertyMap());\n    const site = mapper.modelToObject(modelWithPermissions, {});\n    // compute additional properties\n    return computeProps(model, site, requestOptions);\n}\n/**\n * Fetch Site specific enrichments\n * @param item\n * @param include\n * @param requestOptions\n * @returns\n */\nasync function enrichSiteSearchResult(item, include, requestOptions) {\n    // Create the basic structure\n    const result = {\n        access: item.access,\n        id: item.id,\n        type: item.type,\n        name: item.title,\n        owner: item.owner,\n        typeKeywords: item.typeKeywords,\n        tags: item.tags,\n        categories: item.categories,\n        summary: item.snippet || item.description,\n        createdDate: new Date(item.created),\n        createdDateSource: \"item.created\",\n        updatedDate: new Date(item.modified),\n        updatedDateSource: \"item.modified\",\n        family: getFamily(item.type),\n        links: {\n            self: \"not-implemented\",\n            siteRelative: \"not-implemented\",\n            thumbnail: \"not-implemented\",\n        },\n    };\n    // default includes\n    const DEFAULTS = [];\n    // merge includes\n    include = [...DEFAULTS, ...include].filter(unique);\n    // Parse the includes into a valid set of enrichments\n    const specs = include.map(parseInclude);\n    // Extract out the low-level enrichments needed\n    const enrichments = mapBy(\"enrichment\", specs).filter(unique);\n    // fetch the enrichments\n    let enriched = {};\n    if (enrichments.length) {\n        // TODO: Look into caching for the requests in fetchItemEnrichments\n        enriched = await fetchItemEnrichments(item, enrichments, requestOptions);\n    }\n    // map the enriched props onto the result\n    specs.forEach((spec) => {\n        result[spec.prop] = getProp(enriched, spec.path);\n    });\n    // Handle links\n    result.links.thumbnail = getItemThumbnailUrl(item, requestOptions);\n    result.links.self = item.url;\n    result.links.siteRelative = getHubRelativeUrl(result.type, result.id, item.typeKeywords);\n    return result;\n}\n\nexport { fetchProject as a, enrichProjectSearchResult as b, enrichSiteSearchResult as e, fetchSite as f, lookupDomain as l, parseInclude as p, stripProtocol as s };\n","/**\n * Map over an array returning the specified property for each entry\n * @param {String} prop Property to extracct\n * @param {Array} arr array of objects\n */\nfunction mapBy(prop, arr = []) {\n    return arr.map((e) => e[prop]);\n}\n\n/**\n * Default capabilities for a Site. If not listed here, the capability will not be available\n * This hash is combined with the capabilities hash stored in the item data. Regardless of what\n * properties are defined in the item data, only the capabilities defined here will be available\n * @private\n */\nconst SiteDefaultCapabilities = {\n    overview: true,\n    details: true,\n    settings: true,\n};\n/**\n * List of all the Site Capability Permissions\n * These are considered Hub Business Rules and are not intended\n * to be modified by consumers\n */\nconst SiteCapabilityPermissions = [\n    {\n        entity: \"site\",\n        capability: \"overview\",\n        permissions: [\"hub:site:view\"],\n    },\n    {\n        entity: \"site\",\n        capability: \"details\",\n        permissions: [\"hub:site:edit\"],\n    },\n    {\n        entity: \"site\",\n        capability: \"settings\",\n        permissions: [\"hub:site:edit\"],\n    },\n];\n/**\n * Site Permissions\n * This feeds into the Permissions type\n */\nconst SitePermissions = [\n    \"hub:site:create\",\n    \"hub:site:delete\",\n    \"hub:site:edit\",\n    \"hub:site:view\",\n];\n/**\n * Site permission policies\n * @private\n */\nconst SitesPermissionPolicies = [\n    {\n        permission: \"hub:site:create\",\n        subsystems: [\"sites\"],\n        authenticated: true,\n        privileges: [\"portal:user:createItem\"],\n        licenses: [\"hub-basic\", \"hub-premium\", \"enterprise-sites\"],\n    },\n    {\n        permission: \"hub:site:view\",\n        subsystems: [\"sites\"],\n        authenticated: false,\n        licenses: [\"hub-basic\", \"hub-premium\", \"enterprise-sites\"],\n    },\n    {\n        permission: \"hub:site:delete\",\n        subsystems: [\"sites\"],\n        authenticated: true,\n        licenses: [\"hub-basic\", \"hub-premium\", \"enterprise-sites\"],\n        entityOwner: true,\n    },\n    {\n        permission: \"hub:site:edit\",\n        entityEdit: true,\n        subsystems: [\"sites\"],\n        authenticated: true,\n        licenses: [\"hub-basic\", \"hub-premium\", \"enterprise-sites\"],\n    },\n];\n\nexport { SitesPermissionPolicies as S, SitePermissions as a, SiteCapabilityPermissions as b, SiteDefaultCapabilities as c, mapBy as m };\n"],"names":["stripProtocol","hostname","toLowerCase","includes","split","parseInclude","include","parts","path","prop","reverse","enrichment","fetchProject","identifier","requestOptions","getPrms","isGuid","getItem","getItemBySlug","then","item","convertItemToProject","fetchModelFromItem","model","fetchModelResources","EntityResourceMap","resources","mapper","PropertyMapper","getPropertyMap$1","prj","modelToObject","computeProps$1","enrichProjectSearchResult","result","access","id","type","name","title","owner","typeKeywords","tags","categories","summary","snippet","description","createdDate","Date","created","createdDateSource","updatedDate","modified","updatedDateSource","family","getFamily","links","self","siteRelative","thumbnail","filter","unique","specs","map","enrichments","mapBy","enriched","length","fetchItemEnrichments","forEach","spec","getProp","getItemThumbnailUrl","getItemHomeUrl","getHubRelativeUrl","_checkStatusAndParseJson","response","status","json","error","Error","detail","statusText","lookupDomain","hubRequestOptions","isPortal","subdomain","indexOf","queryTerm","opts","Object","assign","q","searchItems","res","results","r","site","url","siteId","_lookupPortal","hubApiUrl","headers","token","Authorization","_getAuthHeader","fetch","method","mode","_migrateFeedConfig","clone","cloneObject","oldDcatUS11Config","data","values","dcatConfig","feeds","dcatUS11","originalConfig","migratedConfigString","JSON","stringify","keys","indexValueToV3Value","indexValue","v3Value","join","parse","_migrateToV3Values","properties","schemaVersion","upgradeSiteSchema","gacode","telemetry","consentNotice","isTheme","consentText","policyURL","customAnalytics","ga","customerTracker","enabled","Boolean","target","lookupStr","lookupKeys","i","hasOwnProperty","deleteProp","setProp","_ensureTelemetry","groups","catalog","_purgeNonGuidsFromCatalog","_ensureCatalog","_enforceLowercaseDomains","Array","isArray","groupIds","entry","_applySiteSchema","getSiteById","getModel","fetchSiteModel","prms","hostnameOrSlug","fetchSite","convertModelToSite","modelWithPermissions","permissions","defn","value","permission","find","p","collaborationId","push","collaborationType","applyPermissionMigration","_a","authentication","thumbnailUrl","capabilities","processEntityCapabilities","settings","SiteDefaultCapabilities","computeProps","getBasePropertyMap","objectKey","modelKey","getPropertyMap","enrichSiteSearchResult","arr","e","overview","details","SiteCapabilityPermissions","entity","capability","SitePermissions","SitesPermissionPolicies","subsystems","authenticated","privileges","licenses","entityOwner","entityEdit"],"sourceRoot":""}