{"version":3,"file":"static/js/82507.6ef4a61b.chunk.js","mappings":"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","sources":["../.yalc/@esri/hub-components/dist/esm/append-custom-params-fd9b7e72.js","../.yalc/@esri/hub-components/dist/esm/arcgis-hub-versions.entry.js","../.yalc/@esri/hub-components/dist/esm/clean-url-be7c0879.js","../.yalc/@esri/hub-components/dist/esm/context-7d8f7366.js","../.yalc/@esri/hub-components/dist/esm/get-f2cd18e7.js","../.yalc/@esri/hub-components/dist/esm/get-portal-url-423a76f5.js","../.yalc/@esri/hub-components/dist/esm/tslib.es6-3669ad41.js"],"sourcesContent":["import { _ as __assign } from './request-c15cc2af.js';\n\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nfunction appendCustomParams(customOptions, keys, baseOptions) {\n    var requestOptionsKeys = [\n        \"params\",\n        \"httpMethod\",\n        \"rawResponse\",\n        \"authentication\",\n        \"portal\",\n        \"fetch\",\n        \"maxUrlLength\",\n        \"headers\"\n    ];\n    var options = __assign(__assign({ params: {} }, baseOptions), customOptions);\n    // merge all keys in customOptions into options.params\n    options.params = keys.reduce(function (value, key) {\n        if (customOptions[key] || typeof customOptions[key] === \"boolean\") {\n            value[key] = customOptions[key];\n        }\n        return value;\n    }, options.params);\n    // now remove all properties in options that don't exist in IRequestOptions\n    return requestOptionsKeys.reduce(function (value, key) {\n        if (options[key]) {\n            value[key] = options[key];\n        }\n        return value;\n    }, {});\n}\n\nexport { appendCustomParams as a };\n","import { r as registerInstance, c as createEvent, h, F as Fragment, H as Host, g as getElement } from './index-0d95d9d4.js';\nimport { i as intlManager } from './intl-manager-821aea3b.js';\nimport { b as bind } from './context-7d8f7366.js';\nimport { f as getItemResources } from './get-f2cd18e7.js';\nimport './index-4e91769f.js';\nimport './tslib.es6-3669ad41.js';\nimport './get-portal-url-423a76f5.js';\nimport './clean-url-be7c0879.js';\nimport './request-c15cc2af.js';\nimport './append-custom-params-fd9b7e72.js';\n\n/**\n * Returns an IVersionMetadata from the resource search result item\n * @param resource\n * @private\n */\nfunction versionMetadataFromResource(resource) {\n    // we get access, path, and size from the resource itself\n    const { access, resource: path, size } = resource;\n    // the rest is on properties as a json string\n    let properties;\n    const propertiesJson = resource.properties || \"{}\";\n    try {\n        properties = JSON.parse(propertiesJson);\n    }\n    catch (e) {\n        properties = {};\n    }\n    return Object.assign(Object.assign({}, properties), { access,\n        path,\n        size });\n}\n\n/**\n * Returns an array containing the versions of the specified item\n * @param id\n * @param requestOptions\n * @returns\n */\nasync function searchVersions(id, requestOptions) {\n    const resources = await getItemResources(id, Object.assign(Object.assign({}, requestOptions), { params: { sortField: \"created\", sortOrder: \"desc\" } }));\n    // the resources api does not support q - so we fetch all of them and do the filtering here\n    return (resources.resources\n        // filter out any that do not look like hubVersion_<id>/version.json\n        .filter((resource) => resource.resource.match(/^hubVersion_[a-zA-Z0-9_\\s]*\\/version.json/))\n        // transform the resouce into a version metadata object\n        .map(versionMetadataFromResource));\n}\n\nconst arcgisHubVersionsCss = \":host{display:block}arcgis-skeleton-loader{margin:1.25rem;margin-bottom:0}.version-title{margin-block:0.25rem;font-size:1rem;color:var(--calcite-ui-brand)}calcite-list-item[selected] .version-title calcite-link{color:transparent;--calcite-ui-text-link:black;--calcite-link-blue-underline:transparent;text-decoration:none}calcite-list-item[selected] .version-title:before{content:\\\"≫ \\\";color:black}calcite-value-list-item:not([selected]){--calcite-ui-text-1:var(--calcite-ui-brand-hover)}.badges-container{min-height:1.5rem;display:flex;gap:0.25rem}.viewing-badge{--calcite-ui-foreground-2:var(--calcite-ui-foreground-current)}\";\n\n/*\nTODO:\n  - take a close look at the latest mocks\n  - need to figure out how to handle the actual published site (maybe that is handled in the mocks)\n  - try this component out in my demo app\n  - try this component out in od-ui\n  - let's do this step-wise - do we have stories laid out? maybe something like this:\n    - 1. show a list of versions but you can't do anything with them\n    - 2. allow switching between them\n      - version titles need to be links - and you can open them in a new tab (we may want to take baseUrl and followLinks props)\n    - 3. create a version\n    - 4. delete a version (in overflow menu)\n    - 5. save changes to a version\n    - 6. publish a version\n    - 8. edit details of a version (in overflow menu)\n    - 7. share a version (in overflow menu)\n    - 8. filter versions - this should be easy with calcite-list\n*/\nconst dateFormat = { month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' };\nconst ArcgisHubVersions = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.arcgisHubVersionsVersionSelected = createEvent(this, \"arcgisHubVersionsVersionSelected\", 7);\n    this.versions = [];\n    this.loading = true;\n    bind(this, 'renderListItem', 'onSelectVersion');\n  }\n  async componentWillLoad() {\n    this.intl = await intlManager.loadIntlForComponent(this.element);\n    return this.fetchVersions();\n  }\n  async fetchVersions() {\n    var _a;\n    if (this.context && this.itemId) {\n      const versions = await searchVersions(this.itemId, (_a = this.context) === null || _a === void 0 ? void 0 : _a.requestOptions);\n      this.versions = versions;\n      this.loading = false;\n    }\n  }\n  // TODO: switch to this when we get to calcite v1.x\n  // onTitleLinkClick (e: MouseEvent): void {\n  //   // when the title is clicked, we want to not follow the link\n  //   // we handle it via events and selection\n  //   // but using a link with an href will allow it to work when ctrl-clicked (open link in new tab)\n  //   e.preventDefault();\n  // }\n  // TODO: switch to this when we get to calcite v1.x\n  // onSelectVersion (event: CalciteListItemCustomEvent<void>): void {\n  //   event.stopPropagation();\n  //   this.activeVersionId = event.target.value.id;\n  //   this.arcgisHubVersionsVersionSelected.emit(event.target.value);\n  // }\n  onSelectVersion(event) {\n    event.stopPropagation();\n    const selectedVersion = event.detail.keys().next().value;\n    this.activeVersionId = selectedVersion.id;\n    this.arcgisHubVersionsVersionSelected.emit(selectedVersion);\n  }\n  onDeleteItemClick(event) {\n    event.stopPropagation();\n    const target = event.target;\n    const versionId = target.dataset.id;\n    alert(`Delete ${versionId}`);\n  }\n  getVersionMetadata(version) {\n    const name = this.getVersionName(version);\n    const createdBy = version.creator;\n    return {\n      name,\n      createdBy\n    };\n  }\n  // TODO: switch to this when we get to calcite v1.x\n  // getVersionName (version: IVersionMetadata): string {\n  //   return version.name || this.intl.formatDate(version.created, dateFormat); \n  // }\n  getVersionName(version) {\n    const result = version.name || this.intl.formatDate(version.created, dateFormat);\n    let activeIndicator = '';\n    if (this.activeVersionId === version.id) {\n      activeIndicator = '≫ ';\n    }\n    return `${activeIndicator}${result}`;\n  }\n  getCreatedDate(version) {\n    let result = '';\n    if (version.name) {\n      result = this.intl.formatDate(version.created, dateFormat);\n    }\n    return result;\n  }\n  renderLoading() {\n    if (this.loading) {\n      return h(Fragment, null, h(\"arcgis-skeleton-loader\", { active: true, rows: 1, \"show-heading\": true }), h(\"arcgis-skeleton-loader\", { active: true, rows: 1, \"show-heading\": true }), h(\"arcgis-skeleton-loader\", { active: true, rows: 1, \"show-heading\": true }));\n    }\n  }\n  // TODO: switch to this when we get to calcite v1.x\n  // renderListItem (version: IVersionMetadata): VNode {\n  //   return (\n  //     <calcite-list-item\n  //       key={version.id}\n  //       metadata={this.getVersionMetadata(version)}\n  //       onCalciteListItemSelect={this.onSelectVersion}\n  //       selected={this.activeVersionId === version.id}\n  //       value={version}\n  //     >\n  //       <div slot=\"content\">\n  //         <div class=\"badges-container\">\n  //           {this.publishedVersionId === version.id && <calcite-chip kind=\"brand\" scale=\"s\" value=\"\">{this.intl.t('publishedBadge')}</calcite-chip>}\n  //           {this.activeVersionId === version.id && <calcite-chip class=\"viewing-badge\" scale=\"s\" value=\"\">{this.intl.t('viewingBadge')}</calcite-chip>}\n  //         </div>\n  //         <h2 class=\"version-title\"><calcite-link href={`?version=${version.id}`} onClick={this.onTitleLinkClick}>{this.getVersionName(version)}</calcite-link></h2>\n  //         <div>{this.getCreatedDate(version)}</div>\n  //         <div>{this.intl.t('createdBy', version as Record<string, any>)}</div>\n  //       </div>\n  //       <calcite-action icon=\"ellipsis\" id={\"menu-popover-trigger-\" + version.id} slot=\"actions-end\" text={this.intl.t('menuLabel')} />\n  //       <calcite-popover auto-close label=\"\" overlayPositioning=\"fixed\" placement=\"leading\" referenceElement={\"menu-popover-trigger-\" + version.id}>\n  //         <calcite-action-bar expand-disabled expanded>\n  //           <calcite-action active={false} icon=\"share\" scale=\"s\" text=\"Share\" />\n  //           <calcite-action active={false} icon=\"pencil\" scale=\"s\" text=\"Edit details\" />\n  //           <calcite-action data-id={version.id} icon=\"trash\" onClick={this.onDeleteItemClick} scale=\"s\" text=\"Delete\" />\n  //         </calcite-action-bar>\n  //       </calcite-popover>\n  //     </calcite-list-item>\n  //   );\n  // }\n  getDescription(version) {\n    const result = [this.intl.t('createdBy', version)];\n    const createdDate = this.getCreatedDate(version);\n    if (createdDate) {\n      result.push(createdDate);\n    }\n    if (this.publishedVersionId === version.id) {\n      result.push(this.intl.t('publishedBadge'));\n    }\n    return result.join(' | ');\n  }\n  renderListItem(version) {\n    return (h(\"calcite-value-list-item\", { description: this.getDescription(version), key: version.id, label: this.getVersionName(version), metadata: this.getVersionMetadata(version), selected: this.activeVersionId === version.id, value: version }));\n  }\n  // TODO: switch to this when we get to calcite v1.x\n  // render() {\n  //   return (\n  //     <Host data-element=\"versions\">\n  //       <calcite-list\n  //         // filterEnabled={!this.loading}\n  //         selection-appearance=\"border\"\n  //         selection-mode=\"single\"\n  //       >\n  //         {this.renderLoading()}\n  //         {this.versions.map(this.renderListItem)}\n  //       </calcite-list>\n  //     </Host>\n  //   );\n  // }\n  render() {\n    return (h(Host, { \"data-element\": \"versions\" }, h(\"calcite-value-list\", {\n      // filterEnabled={!this.loading}\n      onCalciteListChange: this.onSelectVersion, \"selection-appearance\": \"border\", \"selection-mode\": \"single\"\n    }, this.renderLoading(), this.versions.map(this.renderListItem))));\n  }\n  static get assetsDirs() { return [\"locales\"]; }\n  get element() { return getElement(this); }\n  static get watchers() { return {\n    \"context\": [\"fetchVersions\"],\n    \"itemId\": [\"fetchVersions\"]\n  }; }\n};\nArcgisHubVersions.style = arcgisHubVersionsCss;\n\nexport { ArcgisHubVersions as arcgis_hub_versions };\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nfunction cleanUrl(url) {\n    // Guard so we don't try to trim something that's not a string\n    if (typeof url !== \"string\") {\n        return url;\n    }\n    // trim leading and trailing spaces, but not spaces inside the url\n    url = url.trim();\n    // remove the trailing slash to the url if one was included\n    if (url[url.length - 1] === \"/\") {\n        url = url.slice(0, -1);\n    }\n    return url;\n}\n\nexport { cleanUrl as c };\n","const bind = (context, ...methodNames) => {\n  methodNames.forEach(methodName => {\n    if (typeof context[methodName] !== 'function') {\n      throw new Error(`Cannot bind context. ${methodName} must be a function`);\n    }\n    context[methodName] = context[methodName].bind(context);\n  });\n};\n\nexport { bind as b };\n","import { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { r as request } from './request-c15cc2af.js';\nimport { a as appendCustomParams } from './append-custom-params-fd9b7e72.js';\n\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Serialize an item and its data into a json format accepted by the Portal API for create and update operations\n *\n * @param item Item to be serialized\n * @returns a formatted json object to be sent to Portal\n */\nfunction serializeItem(item) {\n    // create a clone so we're not messing with the original\n    var clone = JSON.parse(JSON.stringify(item));\n    // binary data needs POSTed as a `file`\n    // JSON object literals should be passed as `text`.\n    if (clone.data) {\n        (typeof Blob !== \"undefined\" && item.data instanceof Blob) ||\n            // Node.js doesn't implement Blob\n            item.data.constructor.name === \"ReadStream\"\n            ? (clone.file = item.data)\n            : (clone.text = item.data);\n        delete clone.data;\n    }\n    return clone;\n}\n/**\n * `requestOptions.owner` is given priority, `requestOptions.item.owner` will be checked next. If neither are present, `authentication.getUserName()` will be used instead.\n */\nfunction determineOwner(requestOptions) {\n    if (requestOptions.owner) {\n        return Promise.resolve(requestOptions.owner);\n    }\n    else if (requestOptions.item && requestOptions.item.owner) {\n        return Promise.resolve(requestOptions.item.owner);\n    }\n    else if (requestOptions.authentication &&\n        requestOptions.authentication.getUsername) {\n        return requestOptions.authentication.getUsername();\n    }\n    else {\n        return Promise.reject(new Error(\"Could not determine the owner of this item. Pass the `owner`, `item.owner`, or `authentication` option.\"));\n    }\n}\n/**\n * checks if the extent is a valid BBox (2 element array of coordinate pair arrays)\n * @param extent\n * @returns\n */\nfunction isBBox(extent) {\n    return (Array.isArray(extent) &&\n        Array.isArray(extent[0]) &&\n        Array.isArray(extent[1]));\n}\n/**\n * Given a Bbox, convert it to a string. Some api endpoints expect a string\n *\n * @param {BBox} extent\n * @return {*}  {string}\n */\nfunction bboxToString(extent) {\n    return extent.join(\",\");\n}\n\n// eslint-disable-next-line no-control-regex\nvar CONTROL_CHAR_MATCHER = /[\\x00-\\x1F\\x7F-\\x9F\\xA0]/g;\n/**\n * Returns a new string with all control characters removed.\n *\n * Doesn't remove characters from input string.\n *\n * @param str - the string to scrub\n */\nfunction scrubControlChars(str) {\n    return str.replace(CONTROL_CHAR_MATCHER, \"\");\n}\n\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```\n * import { getItem } from \"@esri/arcgis-rest-portal\";\n * //\n * getItem(\"ae7\")\n *   .then(response);\n * // or\n * getItem(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.\n *\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the data from the response.\n */\nfunction getItem(id, requestOptions) {\n    var url = getItemBaseUrl(id, requestOptions);\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options);\n}\n/**\n * Get the fully qualified base URL to the REST end point for an item.\n * @param id Item Id\n * @param portalUrlOrRequestOptions a portal URL or request options\n * @returns URL to the item's REST end point, defaults to `https://www.arcgis.com/sharing/rest/content/items/{id}`\n */\nvar getItemBaseUrl = function (id, portalUrlOrRequestOptions) {\n    var portalUrl = typeof portalUrlOrRequestOptions === \"string\"\n        ? portalUrlOrRequestOptions\n        : getPortalUrl(portalUrlOrRequestOptions);\n    return portalUrl + \"/content/items/\" + id;\n};\n/**\n * ```\n * import { getItemData } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemData(\"ae7\")\n *   .then(response)\n * // or\n * getItemData(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get the /data for an item. If no data exists, returns `undefined`. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the json data for the item.\n */\nfunction getItemData(id, requestOptions) {\n    var url = getItemBaseUrl(id, requestOptions) + \"/data\";\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\", params: {} }, requestOptions);\n    if (options.file) {\n        options.params.f = null;\n    }\n    return request(url, options).catch(function (err) {\n        /* if the item doesn't include data, the response will be empty\n           and the internal call to response.json() will fail */\n        var emptyResponseErr = RegExp(/The string did not match the expected pattern|(Unexpected end of (JSON input|data at line 1 column 1))/i);\n        /* istanbul ignore else */\n        if (emptyResponseErr.test(err.message)) {\n            return;\n        }\n        else\n            throw err;\n    });\n}\n/**\n * Get the resources associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nfunction getItemResources(id, requestOptions) {\n    var url = getItemBaseUrl(id, requestOptions) + \"/resources\";\n    // Mix in num:1000 with any user supplied params\n    // Key thing - we don't want to mutate the passed in requestOptions\n    // as that may be used in other (subsequent) calls in the course\n    // of a long promise chains\n    var options = __assign({}, requestOptions);\n    options.params = __assign({ num: 1000 }, options.params);\n    return request(url, options);\n}\n/**\n * ```js\n * import { getItemResource } from \"@esri/arcgis-rest-portal\";\n *\n * // Parses contents as blob by default\n * getItemResource(\"3ef\", { fileName: \"resource.jpg\", ...})\n *  .then(resourceContents => {});\n *\n * // Can override parse method\n * getItemResource(\"3ef\", { fileName: \"resource.json\", readAs: 'json', ...})\n *  .then(resourceContents => {});\n *\n * // Get the response object instead\n * getItemResource(\"3ef\",{ rawResponse: true, fileName: \"resource.json\" })\n *  .then(response => {})\n * ```\n * Fetches an item resource and optionally parses it to the correct format.\n *\n * Note: provides JSON parse error protection by sanitizing out any unescaped control\n * characters before parsing that would otherwise cause an error to be thrown\n *\n * @param {string} itemId\n * @param {IGetItemResourceOptions} requestOptions\n */\nfunction getItemResource(itemId, requestOptions) {\n    var readAs = requestOptions.readAs || 'blob';\n    return getItemFile(itemId, \"/resources/\" + requestOptions.fileName, readAs, requestOptions);\n}\n/**\n * ```js\n * import { getItemGroups } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemGroups(\"30e5fe3149c34df1ba922e6f5bbf808f\")\n *   .then(response)\n * ```\n * Lists the groups of which the item is a part, only showing the groups that the calling user can access. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/groups.htm) for more information.\n *\n * @param id - The Id of the item to query group association for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item groups.\n */\nfunction getItemGroups(id, requestOptions) {\n    var url = getItemBaseUrl(id, requestOptions) + \"/groups\";\n    return request(url, requestOptions);\n}\n/**\n * ```js\n * import { getItemStatus } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemStatus({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n * Inquire about status when publishing an item, adding an item in async mode, or adding with a multipart upload. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/status.htm) for more information.\n *\n * @param id - The Id of the item to get status for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item status.\n */\nfunction getItemStatus(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/status\";\n        var options = appendCustomParams(requestOptions, [\"jobId\", \"jobType\"], { params: __assign({}, requestOptions.params) });\n        return request(url, options);\n    });\n}\n/**\n * ```\n * import { getItemInfo } from \"@esri/arcgis-rest-portal\";\n * // get the \"Info Card\" for the item\n * getItemInfo(\"ae7\")\n *   .then(itemInfoXml) // XML document as a string\n * // or get the contents of a specific file\n * getItemInfo(\"ae7\", { fileName: \"form.json\", readAs: \"json\", authentication })\n *   .then(formJson) // JSON document as JSON\n * ```\n * Get an info file for an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-info-file.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request, including the file name which defaults to `iteminfo.xml`.\n * If the file is not a text file (XML, HTML, etc) you will need to specify the `readAs` parameter\n * @returns A Promise that will resolve with the contents of the info file for the item.\n */\nfunction getItemInfo(id, requestOptions) {\n    var _a = requestOptions || {}, _b = _a.fileName, fileName = _b === void 0 ? \"iteminfo.xml\" : _b, _c = _a.readAs, readAs = _c === void 0 ? \"text\" : _c;\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    return getItemFile(id, \"/info/\" + fileName, readAs, options);\n}\n/**\n * ```\n * import { getItemMetadata } from \"@esri/arcgis-rest-portal\";\n * // get the metadata for the item\n * getItemMetadata(\"ae7\")\n *   .then(itemMetadataXml) // XML document as a string\n * // or with additional request options\n * getItemMetadata(\"ae7\", { authentication })\n *   .then(itemMetadataXml) // XML document as a string\n * ```\n * Get the standard formal metadata XML file for an item (`/info/metadata/metadata.xml`)\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the contents of the metadata file for the item as a string.\n */\nfunction getItemMetadata(id, requestOptions) {\n    var options = __assign(__assign({}, requestOptions), { fileName: \"metadata/metadata.xml\" });\n    return getItemInfo(id, options);\n}\n// overrides request()'s default behavior for reading the response\n// which is based on `params.f` and defaults to JSON\n// Also adds JSON parse error protection by sanitizing out any unescaped control characters before parsing\nfunction getItemFile(id, \n// NOTE: fileName should include any folder/subfolders\nfileName, readMethod, requestOptions) {\n    var url = \"\" + getItemBaseUrl(id, requestOptions) + fileName;\n    // preserve escape hatch to let the consumer read the response\n    // and ensure the f param is not appended to the query string\n    var options = __assign({ params: {} }, requestOptions);\n    var justReturnResponse = options.rawResponse;\n    options.rawResponse = true;\n    options.params.f = null;\n    return request(url, options).then(function (response) {\n        if (justReturnResponse) {\n            return response;\n        }\n        return readMethod !== 'json'\n            ? response[readMethod]()\n            : response.text().then(function (text) { return JSON.parse(scrubControlChars(text)); });\n    });\n}\n\nexport { getItemGroups as a, bboxToString as b, getItemData as c, determineOwner as d, getItemMetadata as e, getItemResources as f, getItem as g, getItemResource as h, isBBox as i, getItemStatus as j, serializeItem as s };\n","import { c as cleanUrl } from './clean-url-be7c0879.js';\n\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n * precedence over `authentication.portal`. If neither `portal` nor `authentication` is present,\n * `www.arcgis.com/sharing/rest` is returned.\n *\n * @param requestOptions - Request options that may have authentication manager\n * @returns Portal url to be used in API requests\n */\nfunction getPortalUrl(requestOptions) {\n    if (requestOptions === void 0) { requestOptions = {}; }\n    // use portal in options if specified\n    if (requestOptions.portal) {\n        return cleanUrl(requestOptions.portal);\n    }\n    // if auth was passed, use that portal\n    if (requestOptions.authentication) {\n        // the portal url is already scrubbed in the auth package\n        return requestOptions.authentication.portal;\n    }\n    // default to arcgis.com\n    return \"https://www.arcgis.com/sharing/rest\";\n}\n\nexport { getPortalUrl as g };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\nexport { __assign as _, __spreadArrays as a };\n"],"names":["appendCustomParams","customOptions","keys","baseOptions","options","__assign","params","reduce","value","key","versionMetadataFromResource","resource","properties","access","path","size","propertiesJson","JSON","parse","e","Object","assign","searchVersions","id","requestOptions","getItemResources","sortField","sortOrder","resources","filter","match","map","dateFormat","month","day","year","hour","minute","ArcgisHubVersions","hostRef","registerInstance","this","arcgisHubVersionsVersionSelected","createEvent","versions","loading","bind","intlManager","element","intl","fetchVersions","context","itemId","_a","event","stopPropagation","selectedVersion","detail","next","activeVersionId","emit","versionId","target","dataset","alert","version","name","getVersionName","createdBy","creator","result","formatDate","created","activeIndicator","h","Fragment","active","rows","t","createdDate","getCreatedDate","push","publishedVersionId","join","description","getDescription","label","metadata","getVersionMetadata","selected","Host","onCalciteListChange","onSelectVersion","renderLoading","renderListItem","getElement","style","cleanUrl","url","trim","length","slice","methodNames","forEach","methodName","Error","serializeItem","item","clone","stringify","data","Blob","constructor","file","text","determineOwner","owner","Promise","resolve","authentication","getUsername","reject","isBBox","extent","Array","isArray","bboxToString","CONTROL_CHAR_MATCHER","getItem","getItemBaseUrl","httpMethod","request","portalUrlOrRequestOptions","getPortalUrl","getItemData","f","catch","err","RegExp","test","message","num","getItemResource","readAs","getItemFile","fileName","getItemGroups","getItemStatus","then","getItemMetadata","_b","_c","getItemInfo","readMethod","justReturnResponse","rawResponse","response","replace","portal","s","i","n","arguments","p","prototype","hasOwnProperty","call","apply","__spreadArrays","il","r","k","a","j","jl"],"sourceRoot":""}