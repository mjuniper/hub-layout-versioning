{"version":3,"file":"static/js/1757.32d4925c.chunk.js","mappings":"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","sources":["../.yalc/@esri/hub-components/dist/esm/arcgis-hub-discussions-channel-settings-editor.entry.js","../.yalc/@esri/hub-components/dist/esm/utils-f1c97eba.js","../node_modules/@babel/runtime/helpers/esm/toArray.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-0d95d9d4.js';\nimport { d as dist } from './index-bcc98773.js';\nimport { b as bind } from './context-7d8f7366.js';\nimport { i as intlManager } from './intl-manager-821aea3b.js';\nimport { f as fetchChannelNotifcationOptOut, e as enrichChannelDetails, s as searchPosts, r as removeChannelActivity, c as createChannelNotificationOptOut, a as removeChannelNotificationOptOut } from './discussions-0e185b12.js';\nimport { g as getGroupThumbnailUrl } from './utils-f1c97eba.js';\nimport './_commonjsHelpers-11ca3be1.js';\nimport './index-4e91769f.js';\nimport './getPortalBaseFromOrgUrl-6a5781aa.js';\nimport './tslib.es6-3669ad41.js';\nimport './get-portal-url-423a76f5.js';\nimport './clean-url-be7c0879.js';\nimport './request-c15cc2af.js';\nimport './get-859a2960.js';\nimport './append-custom-params-fd9b7e72.js';\nimport './get-portal-06f7947b.js';\nimport './query-15c2c6ed.js';\nimport './tslib.es6-b2e8cdb8.js';\nimport './fetch-eff7ab83.js';\nimport './tslib.es6-e75776ba.js';\nimport './_enrichments-9747f1f3.js';\nimport './util-2150bd9e.js';\nimport './get-prop-d82e4fa6.js';\nimport './get-with-default-6db049d8.js';\nimport './_internal-f8d6239a.js';\nimport './get-portal-api-url-2391fbac.js';\nimport './extent-0f42acfc.js';\nimport './helpers-a80c0291.js';\nimport './OperationError-85fd80c7.js';\nimport './get-f2cd18e7.js';\nimport './getService-49b539e3.js';\nimport './slugs-150ad0db.js';\nimport './is-guid-8127621d.js';\nimport './request-be948455.js';\nimport './api-3826163b.js';\nimport './compose-cc2f466a.js';\nimport './get-structured-license-d1e63636.js';\nimport './get-item-thumbnail-url-7608a737.js';\nimport './update-fec93fc5.js';\nimport './UserSession-d3a97494.js';\n\nconst arcgisHubDiscussionsChannelSettingsEditorCss = \":host{display:block}calcite-modal{z-index:1030}section{display:grid;gap:1rem}calcite-notice{display:none}calcite-notice[active]{display:block}calcite-stepper-item calcite-notice{margin-top:1rem}address{display:flex;gap:1rem}address div{display:flex;flex-direction:column;align-items:flex-start;justify-content:center;gap:0.125rem}address b{font-size:var(--calcite-font-size-0);line-height:1.25rem;font-weight:var(--calcite-font-weight-bold);font-style:normal;color:var(--calcite-ui-text-1)}address span{font-size:var(--calcite-font-size--1);line-height:1rem;font-style:normal;color:var(--calcite-ui-text-2)}div{display:flex;align-items:center;justify-content:space-between}\";\n\nconst ArcgisHubDiscussionsChannelSettingsEditor = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.hubTelemetry = createEvent(this, \"hubTelemetry\", 7);\n    /**\n     * Whether the component is in a saving state\n     */\n    this.saving = false;\n    /**\n     * Whether user has selected to keep their post activity\n     */\n    this.activity = true;\n    /**\n     * Error messages\n     */\n    this.notices = [];\n    bind(this, 'handleStepperItemSelected', 'handleLinkClicked', 'handleCancelButtonClicked', 'handleSaveButtonClicked', 'handleModalClosed', 'handleTileSelect', 'handleNoticeClosed');\n  }\n  /**\n   * Whether the currently authenticated user is a member of this channel\n   */\n  get isMember() {\n    const { channelDetails: { channel }, context } = this;\n    return Boolean(channel) && (context.currentUser.groups.some(({ id }) => channel.groups.includes(id)));\n  }\n  /**\n   * Lifecycle \"componentWillLoad\" method\n   */\n  async componentWillLoad() {\n    const [intl, notificationOptOut, channelDetails] = await Promise.all([\n      intlManager.loadIntlForComponent(this.element),\n      fetchChannelNotifcationOptOut(Object.assign({ channelId: this.channelId }, this.context.hubRequestOptions)).catch(() => null),\n      this.fetchChannelDetails(this.channelId)\n    ]);\n    this.intl = intl;\n    this.notifications = !notificationOptOut;\n    this.channelDetails = channelDetails;\n    this.postTotal = await this.fetchTotalPosts();\n    this.activeStepIndex = this.isMember ? 0 : 1;\n  }\n  get stepItems() {\n    const { isMember, intl, notifications, activity } = this;\n    return [\n      {\n        name: 'notifications',\n        description: isMember\n          ? ''\n          : intl.t('notifications-disabled'),\n        disabled: !isMember,\n        heading: intl.t('notifications'),\n        options: [\n          {\n            checked: notifications,\n            description: intl.t('receiveDesc'),\n            heading: intl.t('receive'),\n            icon: 'email-address',\n            value: true,\n          },\n          {\n            checked: !notifications,\n            description: intl.t('stopDesc'),\n            heading: intl.t('stop'),\n            icon: 'circle-disallowed',\n            value: false,\n          },\n        ],\n        notice: {\n          title: intl.t('stopNotice'),\n          message: intl.t('stopNoticeMessage'),\n          link: intl.t('noticeLink'),\n          url: 'https://doc.arcgis.com/en/hub/team/how-discussions-work.htm'\n        }\n      },\n      {\n        name: 'activity',\n        disabled: false,\n        heading: intl.t('activity'),\n        options: [\n          {\n            checked: activity,\n            description: intl.t('keepDesc'),\n            heading: intl.t('keep'),\n            icon: 'speech-bubble-check',\n            value: true,\n          },\n          {\n            checked: !activity,\n            description: intl.t('deleteDesc'),\n            heading: intl.t('delete'),\n            icon: 'trash',\n            value: false,\n          },\n        ],\n        notice: {\n          // color: 'red',\n          title: intl.t('deleteNotice'),\n          message: intl.t('deleteNoticeMessage'),\n          link: intl.t('noticeLink'),\n          url: 'https://doc.arcgis.com/en/hub/team/how-discussions-work.htm'\n        }\n      },\n    ];\n  }\n  /**\n   * Fetches channel details from channelId\n   * @param channelId\n   * @returns Promise<IChannelDetails>\n   */\n  fetchChannelDetails(channelId) {\n    const { hubRequestOptions } = this.context;\n    const options = Object.assign({ channelDetails: {\n        channelId\n      } }, hubRequestOptions);\n    return enrichChannelDetails(options);\n  }\n  /**\n   * Gets number of posts user has posted in channel\n   */\n  async fetchTotalPosts() {\n    const { channelId, context: { hubRequestOptions, currentUser } } = this;\n    const { total } = await searchPosts(Object.assign({ params: {\n        start: 1,\n        num: 1,\n        channels: channelId,\n        creator: currentUser.username\n      } }, hubRequestOptions));\n    return total;\n  }\n  /**\n   * Sets activeStepIndex and emits telemetry for stepper item selected\n   * @param evt\n   */\n  handleStepperItemSelected(evt) {\n    const target = evt.currentTarget;\n    const { activeStepIndex, stepItems } = this;\n    const activeItem = stepItems[activeStepIndex];\n    if (!target.disabled && target.dataset.name !== activeItem.name) {\n      const name = target.dataset.name === 'notifications' ? 'emailNotifications' : 'postActivity';\n      this.hubTelemetry.emit(dist.dictionary.category.interaction.action.open.label.stepper.details[name]);\n      this.activeStepIndex = stepItems.findIndex(({ name }) => name === target.dataset.name);\n    }\n  }\n  /**\n   * Emits telemetry for link clicked\n   */\n  handleLinkClicked(evt) {\n    evt.preventDefault();\n    this.hubTelemetry.emit(dist.dictionary.category.navigation.action.view.label.groups);\n    const target = evt.target;\n    setTimeout(() => {\n      // allow time for event to race up the DOM so the telemetry is captured before\n      // redirecting the user\n      window.location.href = target.href;\n    }, 250);\n  }\n  /**\n   * Closes modal when cancel button clicked\n   */\n  handleCancelButtonClicked() {\n    this.open = false;\n  }\n  async removeChannelActivity() {\n    const { channelId, intl, context } = this;\n    try {\n      await removeChannelActivity(Object.assign({ channelId }, context.hubRequestOptions));\n      this.hubTelemetry.emit(Object.assign(Object.assign({}, dist.dictionary.category.content.action.delete.details.allPosts), { response: dist.constants.response.SUCCESS }));\n      this.postTotal = await this.fetchTotalPosts();\n    }\n    catch (e) {\n      this.hubTelemetry.emit(Object.assign(Object.assign({}, dist.dictionary.category.content.action.delete.details.allPosts), { response: dist.constants.response.FAILURE }));\n      this.notices = [\n        ...this.notices,\n        {\n          // color: 'red',\n          title: intl.t('deleteError'),\n          message: intl.t('deleteErrorMessage'),\n        }\n      ];\n    }\n  }\n  async createChannelNotificationOptOut() {\n    const { channelId, intl, context } = this;\n    try {\n      await createChannelNotificationOptOut(Object.assign({ channelId }, context.hubRequestOptions));\n      this.hubTelemetry.emit(Object.assign(Object.assign({}, dist.dictionary.category.users.action.update.label.notifications.details.disabled), { response: dist.constants.response.SUCCESS }));\n    }\n    catch (e) {\n      this.hubTelemetry.emit(Object.assign(Object.assign({}, dist.dictionary.category.users.action.update.label.notifications.details.disabled), { response: dist.constants.response.FAILURE }));\n      this.notices = [\n        ...this.notices,\n        {\n          // color: 'red',\n          title: intl.t('stopError'),\n          message: intl.t('stopErrorMessage'),\n        }\n      ];\n    }\n  }\n  async removeChannelNotificationOptOut() {\n    const { channelId, intl, context } = this;\n    try {\n      await removeChannelNotificationOptOut(Object.assign({ channelId }, context.hubRequestOptions));\n      this.hubTelemetry.emit(Object.assign(Object.assign({}, dist.dictionary.category.users.action.update.label.notifications.details.enabled), { response: dist.constants.response.SUCCESS }));\n    }\n    catch (e) {\n      this.hubTelemetry.emit(Object.assign(Object.assign({}, dist.dictionary.category.users.action.update.label.notifications.details.enabled), { response: dist.constants.response.FAILURE }));\n      this.notices = [\n        ...this.notices,\n        {\n          // color: 'red',\n          title: intl.t('receiveError'),\n          message: intl.t('receiveErrorMessage'),\n        }\n      ];\n    }\n  }\n  /**\n   * On \"Save Preferences\" run the relevant API calls\n   */\n  handleSaveButtonClicked() {\n    this.saving = true;\n    this.notices = [];\n    const promises = [];\n    if (!this.activity) {\n      promises.push(this.removeChannelActivity());\n    }\n    promises.push(this.notifications\n      ? this.removeChannelNotificationOptOut()\n      : this.createChannelNotificationOptOut());\n    Promise.all(promises).then(() => {\n      this.saving = false;\n      if (!this.notices.length) {\n        this.notices = [{\n            title: this.intl.t('updated'),\n            message: this.intl.t('updatedMessage'),\n          }];\n      }\n    });\n  }\n  /**\n   * Emits telemetry for modal close\n   */\n  handleModalClosed() {\n    this.hubTelemetry.emit(dist.dictionary.category.interaction.action.close.label.modal.details.managePreferences);\n  }\n  /**\n   * Opens relevant notices and sets selected options\n   */\n  handleTileSelect(evt) {\n    const target = evt.target;\n    this[target.name] = target.value;\n  }\n  handleNoticeClosed() {\n    this.notices = [];\n  }\n  renderMetadata() {\n    const { channelDetails: { groups: [group] }, context, postTotal, intl } = this;\n    return (h(\"address\", null, h(\"calcite-avatar\", { fullName: group.title, scale: \"l\", thumbnail: getGroupThumbnailUrl(context.session.portal, group, context.session.token) }), h(\"div\", null, h(\"b\", null, group.title), h(\"span\", null, intl.t('totalPosts', { count: postTotal })))));\n  }\n  renderChannelDetails() {\n    const { channelDetails: { groups: [group] }, intl } = this;\n    return (h(\"calcite-card\", null, h(\"div\", null, this.renderMetadata(), h(\"calcite-link\", { href: `${window.location.origin}/teams/${group.id}`, onClick: this.handleLinkClicked, target: \"_blank\" }, intl.t('viewGroup')))));\n  }\n  renderContent() {\n    const { isMember } = this;\n    return (h(\"section\", { slot: 'content' }, isMember && this.renderChannelDetails(), h(\"calcite-stepper\", { layout: \"vertical\" }, this.stepItems.map((stepItem) => (h(\"calcite-stepper-item\", { \"data-name\": stepItem.name, description: stepItem.description, disabled: stepItem.disabled, heading: stepItem.heading, key: stepItem.heading, onClick: this.handleStepperItemSelected }, h(\"calcite-tile-select-group\", null, stepItem.options.map(option => (h(\"calcite-tile-select\", { checked: option.checked, description: option.description, heading: option.heading, icon: option.icon, inputEnabled: true, key: option.icon, name: stepItem.name, onCalciteTileSelectChange: this.handleTileSelect, type: \"radio\", value: option.value })))), stepItem.options[1].checked && (h(\"calcite-notice\", {\n      // active\n      // color={stepItem.notice.color}\n      width: \"full\"\n    }, h(\"p\", { slot: \"title\" }, stepItem.notice.title), h(\"p\", { slot: \"message\" }, stepItem.notice.message), h(\"calcite-link\", { href: stepItem.notice.url, slot: \"link\" }, stepItem.notice.link))))))), this.renderNotice()));\n  }\n  renderNotice() {\n    const { notices, intl } = this;\n    const notice = (notices.length > 1)\n      ? {\n        // color: 'red',\n        title: intl.t('multipleError'),\n        message: intl.t('multipleErrorMessage'),\n      }\n      : notices[0];\n    if (notice) {\n      return (h(\"calcite-notice\", {\n        // active\n        closable: true,\n        // color={notice.color}\n        onCalciteNoticeClose: this.handleNoticeClosed, width: \"full\"\n      }, h(\"p\", { slot: \"title\" }, notice.title), h(\"p\", { slot: \"message\" }, notice.message)));\n    }\n  }\n  renderModal() {\n    const { intl, saving, open } = this;\n    return (h(\"calcite-modal\", {\n      // backgroundColor='grey'\n      // disableCloseButton={saving}\n      // disableEscape={saving}\n      // disableOutsideClose\n      open: open\n    }, h(\"p\", { slot: 'header' }, intl.t('header')), h(\"calcite-button\", { disabled: saving, loading: saving, onClick: this.handleSaveButtonClicked, round: true, scale: 'l', slot: 'primary' }, intl.t('save')), h(\"calcite-button\", { appearance: 'outline', disabled: saving, onClick: this.handleCancelButtonClicked, round: true, scale: 'l', slot: 'secondary' }, intl.t('cancel')), this.renderContent()));\n  }\n  render() {\n    return (h(Host, { \"data-element\": \"discussions-channel-settings-editor\" }, this.renderModal()));\n  }\n  static get assetsDirs() { return [\"locales\"]; }\n  get element() { return getElement(this); }\n};\nArcgisHubDiscussionsChannelSettingsEditor.style = arcgisHubDiscussionsChannelSettingsEditorCss;\n\nexport { ArcgisHubDiscussionsChannelSettingsEditor as arcgis_hub_discussions_channel_settings_editor };\n","import { c as cloneObject } from './util-2150bd9e.js';\nimport { U as UserSession } from './UserSession-d3a97494.js';\n\n/* Copyright (c) 2018-2021 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Well known APIs\n * Short-forms for specifying common APIs\n * We will likely deprecate this\n */\nconst SEARCH_APIS = {\n    arcgis: {\n        label: \"ArcGIS Online\",\n        url: \"https://www.arcgis.com\",\n        type: \"arcgis\",\n    },\n    arcgisQA: {\n        label: \"ArcGIS Online QAEXT\",\n        url: \"https://qaext.arcgis.com\",\n        type: \"arcgis\",\n    },\n    arcgisDEV: {\n        label: \"ArcGIS Online DEVEXT\",\n        url: \"https://devext.arcgis.com\",\n        type: \"arcgis\",\n    },\n    hub: {\n        label: \"ArcGIS Hub\",\n        url: \"https://hub.arcgis.com/api\",\n        type: \"arcgis-hub\",\n    },\n    hubDEV: {\n        label: \"ArcGIS Hub DEV\",\n        url: \"https://hubdev.arcgis.com/api\",\n        type: \"arcgis-hub\",\n    },\n    hubQA: {\n        label: \"ArcGIS Hub QA\",\n        url: \"https://hubqa.arcgis.com/api\",\n        type: \"arcgis-hub\",\n    },\n};\n/**\n * @private\n * Convert an api \"name\" into a full ApiDefinition\n * @param api\n * @returns\n */\nfunction expandApi(api) {\n    if (typeof api === \"string\" && api in SEARCH_APIS) {\n        return SEARCH_APIS[api];\n    }\n    else {\n        // it's an object, so we trust that it's well formed\n        return api;\n    }\n}\n/**\n * @private\n * Convert a field value into a MatchOptions if it's not already one\n * @param value\n * @returns\n */\nfunction valueToMatchOptions(value) {\n    let result = {};\n    if (Array.isArray(value)) {\n        result = {\n            any: value,\n        };\n    }\n    else {\n        if (typeof value === \"string\") {\n            result = {\n                any: [value],\n            };\n        }\n        if (typeof value === \"object\") {\n            result = value;\n        }\n    }\n    return result;\n}\n/**\n * @private\n * Convert a RelativeDate to a DateRange<number>\n * @param relative\n * @returns\n */\nfunction relativeDateToDateRange(relative) {\n    // hash of offsets\n    const offsetMs = {\n        min: 1000 * 60,\n        hours: 1000 * 60 * 60,\n        days: 1000 * 60 * 60 * 24,\n        weeks: 1000 * 60 * 60 * 24 * 7,\n    };\n    const now = new Date();\n    // default\n    const result = {\n        type: \"date-range\",\n        from: now.getTime(),\n        to: now.getTime(),\n    };\n    //\n    switch (relative.unit) {\n        case \"hours\":\n        case \"days\":\n        case \"weeks\":\n            result.from = result.to - offsetMs[relative.unit] * relative.num;\n            break;\n        case \"months\":\n            // get the current month and subtract num\n            // NOTE: when the previous month has fewer days than this month\n            // setMonth() will return a date w/in the current month\n            // example: 3/30 -> 3/2 b/c there is no 2/28\n            now.setMonth(now.getMonth() - relative.num);\n            result.from = now.getTime();\n            break;\n        case \"years\":\n            now.setFullYear(now.getFullYear() - relative.num);\n            result.from = now.getTime();\n            break;\n    }\n    return result;\n}\n/**\n * Create a `.next()` function for a type\n * @param request\n * @param nextStart\n * @param total\n * @param fn\n * @returns\n */\nfunction getNextFunction(request, nextStart, total, fn) {\n    const clonedRequest = cloneObject(request);\n    // clone will not handle authentication so we do it manually\n    if (request.authentication) {\n        clonedRequest.authentication = UserSession.deserialize(request.authentication.serialize());\n    }\n    // figure out the start\n    clonedRequest.start = nextStart > -1 ? nextStart : total + 1;\n    return (authentication) => {\n        if (authentication) {\n            clonedRequest.authentication = authentication;\n        }\n        return fn(clonedRequest);\n    };\n}\n/**\n * Construct a the full url to a group thumbnail\n *\n * - If the group has a thumbnail, construct the full url\n * - If the group is not public, append on the token (if passed in)\n * @param portalUrl\n * @param group\n * @param token\n * @returns\n */\nfunction getGroupThumbnailUrl(portalUrl, group, token) {\n    let thumbnailUrl = null;\n    if (group.thumbnail) {\n        thumbnailUrl = `${portalUrl}/community/groups/${group.id}/info/${group.thumbnail}`;\n        if (token && group.access !== \"public\") {\n            thumbnailUrl = `${thumbnailUrl}?token=${token}`;\n        }\n    }\n    return thumbnailUrl;\n}\n/**\n * Construct a the full url to a user thumbnail\n *\n * - If the user has a thumbnail, construct the full url\n * - If the user is not public, append on the token\n * @param portalUrl\n * @param user\n * @param token\n * @returns\n */\nfunction getUserThumbnailUrl(portalUrl, user, token) {\n    let thumbnailUrl = null;\n    if (user.thumbnail) {\n        thumbnailUrl = `${portalUrl}/community/users/${user.username}/info/${user.thumbnail}`;\n        if (token && user.access !== \"public\") {\n            thumbnailUrl = `${thumbnailUrl}?token=${token}`;\n        }\n    }\n    return thumbnailUrl;\n}\n\nexport { getUserThumbnailUrl as a, getNextFunction as b, expandApi as e, getGroupThumbnailUrl as g, relativeDateToDateRange as r, valueToMatchOptions as v };\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}"],"names":["ArcgisHubDiscussionsChannelSettingsEditor","hostRef","registerInstance","this","hubTelemetry","createEvent","saving","activity","notices","bind","channel","channelDetails","context","Boolean","currentUser","groups","some","id","includes","Promise","all","intlManager","element","fetchChannelNotifcationOptOut","Object","assign","channelId","hubRequestOptions","catch","fetchChannelDetails","intl","notificationOptOut","notifications","fetchTotalPosts","postTotal","activeStepIndex","isMember","name","description","t","disabled","heading","options","checked","icon","value","notice","title","message","link","url","enrichChannelDetails","searchPosts","params","start","num","channels","creator","username","total","evt","target","currentTarget","stepItems","activeItem","dataset","emit","dist","findIndex","preventDefault","setTimeout","window","location","href","open","removeChannelActivity","response","createChannelNotificationOptOut","removeChannelNotificationOptOut","promises","push","then","length","group","h","fullName","scale","thumbnail","getGroupThumbnailUrl","session","portal","token","count","renderMetadata","origin","onClick","handleLinkClicked","slot","renderChannelDetails","layout","map","stepItem","key","handleStepperItemSelected","option","inputEnabled","onCalciteTileSelectChange","handleTileSelect","type","width","renderNotice","closable","onCalciteNoticeClose","handleNoticeClosed","loading","handleSaveButtonClicked","round","appearance","handleCancelButtonClicked","renderContent","Host","renderModal","getElement","style","SEARCH_APIS","arcgis","label","arcgisQA","arcgisDEV","hub","hubDEV","hubQA","expandApi","api","valueToMatchOptions","result","Array","isArray","any","relativeDateToDateRange","relative","now","Date","from","getTime","to","unit","min","hours","days","weeks","setMonth","getMonth","setFullYear","getFullYear","getNextFunction","request","nextStart","fn","clonedRequest","cloneObject","authentication","UserSession","serialize","portalUrl","thumbnailUrl","access","getUserThumbnailUrl","user","_toArray","arr"],"sourceRoot":""}