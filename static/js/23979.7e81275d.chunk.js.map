{"version":3,"file":"static/js/23979.7e81275d.chunk.js","mappings":"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","sources":["../node_modules/@esri/hub-components/dist/esm/arcgis-telemetry-tabular.entry.js"],"sourcesContent":["import { r as registerInstance, h, F as Fragment, H as Host } from './index-0d95d9d4.js';\nimport { C as COMMON_METRICS } from './telemetry-reporting-client.esm-45d99ba7.js';\n\nconst ArcgisTelemetryTabular = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * report transform options\n     * @type {ITelemetryDataTransformOptions}\n     * @memberof ArcgisTelemetryTabular\n     */\n    this.options = {};\n    this.isTransforming = true;\n  }\n  handleChange() {\n    if (!this.isLoading) {\n      this.transform(this.data, this.options).then(({ headers, rows }) => {\n        this.headers = headers;\n        this.rows = rows;\n      }).finally(() => {\n        this.isTransforming = false;\n      });\n    }\n  }\n  /**\n   * function to transform telemetry data into arrays of rows and headers\n   * that can be consumed by the arcgis-hub-table component\n   */\n  async transform(data, options) {\n    const headers = [];\n    const headerIds = [];\n    const { seriesTransforms = {} } = options;\n    const rows = data.map(async (entry) => {\n      const rowKeys = [];\n      const row = await Object.entries(entry).map(async ([key, value]) => {\n        var _a, _b;\n        const rowEntry = {};\n        let isMetricColumn = false;\n        if (value) {\n          if (Object.values(COMMON_METRICS).includes(key)) {\n            key = key.split(':')[1];\n            isMetricColumn = true;\n          }\n          if (!headerIds.includes(key)) {\n            const headerEntry = { id: key, i18n: ((_a = seriesTransforms[key]) === null || _a === void 0 ? void 0 : _a.title) || this.capitalize(key) };\n            headerIds.push(key);\n            isMetricColumn\n              ? headers.push(headerEntry)\n              : headers.unshift(headerEntry);\n          }\n          rowEntry[key] = value;\n          !isMetricColumn && rowKeys.push(value);\n          if ((_b = seriesTransforms[key]) === null || _b === void 0 ? void 0 : _b.value) {\n            const { display, link } = seriesTransforms[key].value;\n            const displayValue = display ? await display(value) : value;\n            rowEntry[key] = link\n              // eslint-disable-next-line jsx-a11y/anchor-is-valid\n              ? h(\"a\", { href: link.href ? await link.href(value) : value, target: link.target }, displayValue)\n              : displayValue;\n          }\n        }\n        return rowEntry;\n      });\n      return this.resolveRow(row, rowKeys.join('|'));\n    });\n    const resolvedRows = await Promise.all(rows).then((rows) => {\n      return rows;\n    });\n    return { headers, rows: resolvedRows };\n  }\n  /**\n   * resolves all asynchronous row callback transforms and adds\n   * a unique identifier (key) to each row entry\n   */\n  async resolveRow(row, key) {\n    const resolved = await Promise.all(row);\n    resolved.push({ key });\n    return resolved.reduce((acc, currentVal) => {\n      return Object.assign(acc, currentVal);\n    }, {});\n  }\n  capitalize(entry) {\n    return entry[0].toUpperCase() + entry.slice(1).toLowerCase();\n  }\n  render() {\n    return (h(Host, null, this.isLoading || this.isTransforming\n      ? h(\"arcgis-skeleton-loader\", { active: true, rows: 4, showFooter: true })\n      : h(Fragment, null, h(\"arcgis-hub-table\", { headers: this.headers, rows: this.rows, subtitle: this.subtitle, \"table-title\": this.reportTitle }))));\n  }\n  static get watchers() { return {\n    \"data\": [\"handleChange\"],\n    \"options\": [\"handleChange\"]\n  }; }\n};\n\nexport { ArcgisTelemetryTabular as arcgis_telemetry_tabular };\n"],"names":["ArcgisTelemetryTabular","hostRef","registerInstance","this","options","isTransforming","isLoading","transform","data","then","headers","rows","finally","headerIds","seriesTransforms","map","entry","rowKeys","Object","entries","key","value","rowEntry","isMetricColumn","values","COMMON_METRICS","includes","split","headerEntry","id","i18n","_a","title","capitalize","push","unshift","_b","display","link","displayValue","h","href","target","row","resolveRow","join","Promise","all","resolvedRows","resolved","reduce","acc","currentVal","assign","toUpperCase","slice","toLowerCase","Host","active","showFooter","Fragment","subtitle","reportTitle"],"sourceRoot":""}