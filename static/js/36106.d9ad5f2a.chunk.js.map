{"version":3,"file":"static/js/36106.d9ad5f2a.chunk.js","mappings":"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","sources":["../.yalc/@esri/hub-components/dist/esm/UserSession-d3a97494.js"],"sourcesContent":["import { r as request, N as NODEJS_DEFAULT_REFERER_HEADER, e as encodeQueryString, A as ArcGISAuthError } from './request-c15cc2af.js';\nimport { c as cleanUrl } from './clean-url-be7c0879.js';\n\n/* Copyright (c) 2017-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nfunction decodeParam(param) {\n    var _a = param.split(\"=\"), key = _a[0], value = _a[1];\n    return { key: decodeURIComponent(key), value: decodeURIComponent(value) };\n}\n/**\n * Decodes the passed query string as an object.\n *\n * @param query A string to be decoded.\n * @returns A decoded query param object.\n */\nfunction decodeQueryString(query) {\n    return query\n        .replace(/^#/, \"\")\n        .split(\"&\")\n        .reduce(function (acc, entry) {\n        var _a = decodeParam(entry), key = _a.key, value = _a.value;\n        acc[key] = value;\n        return acc;\n    }, {});\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nfunction fetchToken(url, requestOptions) {\n    var options = requestOptions;\n    // we generate a response, so we can't return the raw response\n    options.rawResponse = false;\n    return request(url, options).then(function (response) {\n        var r = {\n            token: response.access_token,\n            username: response.username,\n            expires: new Date(\n            // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n            Date.now() + (response.expires_in * 1000 - 1000)),\n            ssl: response.ssl === true\n        };\n        if (response.refresh_token) {\n            r.refreshToken = response.refresh_token;\n        }\n        return r;\n    });\n}\n\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nfunction generateToken(url, requestOptions) {\n    var options = requestOptions;\n    /* istanbul ignore else */\n    if (typeof window !== \"undefined\" &&\n        window.location &&\n        window.location.host) {\n        options.params.referer = window.location.host;\n    }\n    else {\n        options.params.referer = NODEJS_DEFAULT_REFERER_HEADER;\n    }\n    return request(url, options);\n}\n\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nvar arcgisOnlineUrlRegex = /^https?:\\/\\/(\\S+)\\.arcgis\\.com.+/;\nfunction isOnline(url) {\n    return arcgisOnlineUrlRegex.test(url);\n}\nfunction normalizeOnlinePortalUrl(portalUrl) {\n    if (!arcgisOnlineUrlRegex.test(portalUrl)) {\n        return portalUrl;\n    }\n    switch (getOnlineEnvironment(portalUrl)) {\n        case \"dev\":\n            return \"https://devext.arcgis.com/sharing/rest\";\n        case \"qa\":\n            return \"https://qaext.arcgis.com/sharing/rest\";\n        default:\n            return \"https://www.arcgis.com/sharing/rest\";\n    }\n}\nfunction getOnlineEnvironment(url) {\n    if (!arcgisOnlineUrlRegex.test(url)) {\n        return null;\n    }\n    var match = url.match(arcgisOnlineUrlRegex);\n    var subdomain = match[1].split(\".\").pop();\n    if (subdomain.includes(\"dev\")) {\n        return \"dev\";\n    }\n    if (subdomain.includes(\"qa\")) {\n        return \"qa\";\n    }\n    return \"production\";\n}\nfunction isFederated(owningSystemUrl, portalUrl) {\n    var normalizedPortalUrl = cleanUrl(normalizeOnlinePortalUrl(portalUrl)).replace(/https?:\\/\\//, \"\");\n    var normalizedOwningSystemUrl = cleanUrl(owningSystemUrl).replace(/https?:\\/\\//, \"\");\n    return new RegExp(normalizedOwningSystemUrl, \"i\").test(normalizedPortalUrl);\n}\nfunction canUseOnlineToken(portalUrl, requestUrl) {\n    var portalIsOnline = isOnline(portalUrl);\n    var requestIsOnline = isOnline(requestUrl);\n    var portalEnv = getOnlineEnvironment(portalUrl);\n    var requestEnv = getOnlineEnvironment(requestUrl);\n    if (portalIsOnline && requestIsOnline && portalEnv === requestEnv) {\n        return true;\n    }\n    return false;\n}\n\n/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Validates that the user has access to the application\n * and if they user should be presented a \"View Only\" mode\n *\n * This is only needed/valid for Esri applications that are \"licensed\"\n * and shipped in ArcGIS Online or ArcGIS Enterprise. Most custom applications\n * should not need or use this.\n *\n * ```js\n * import { validateAppAccess } from '@esri/arcgis-rest-auth';\n *\n * return validateAppAccess('your-token', 'theClientId')\n * .then((result) => {\n *    if (!result.value) {\n *      // redirect or show some other ui\n *    } else {\n *      if (result.viewOnlyUserTypeApp) {\n *        // use this to inform your app to show a \"View Only\" mode\n *      }\n *    }\n * })\n * .catch((err) => {\n *  // two possible errors\n *  // invalid clientId: {\"error\":{\"code\":400,\"messageCode\":\"GWM_0007\",\"message\":\"Invalid request\",\"details\":[]}}\n *  // invalid token: {\"error\":{\"code\":498,\"message\":\"Invalid token.\",\"details\":[]}}\n * })\n * ```\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token platform token\n * @param clientId application client id\n * @param portal Optional\n */\nfunction validateAppAccess(token, clientId, portal) {\n    if (portal === void 0) { portal = \"https://www.arcgis.com/sharing/rest\"; }\n    var url = portal + \"/oauth2/validateAppAccess\";\n    var ro = {\n        method: \"POST\",\n        params: {\n            f: \"json\",\n            client_id: clientId,\n            token: token,\n        },\n    };\n    return request(url, ro);\n}\n\n/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nfunction defer() {\n    var deferred = {\n        promise: null,\n        resolve: null,\n        reject: null,\n    };\n    deferred.promise = new Promise(function (resolve, reject) {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n    return deferred;\n}\n/**\n * ```js\n * import { UserSession } from '@esri/arcgis-rest-auth';\n * UserSession.beginOAuth2({\n *   // register an app of your own to create a unique clientId\n *   clientId: \"abc123\",\n *   redirectUri: 'https://yourapp.com/authenticate.html'\n * })\n *   .then(session)\n * // or\n * new UserSession({\n *   username: \"jsmith\",\n *   password: \"123456\"\n * })\n * // or\n * UserSession.deserialize(cache)\n * ```\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `UserSession` includes helper methods for [OAuth 2.0](/arcgis-rest-js/guides/browser-authentication/) in both browser and server applications.\n */\nvar UserSession = /** @class */ (function () {\n    function UserSession(options) {\n        this.clientId = options.clientId;\n        this._refreshToken = options.refreshToken;\n        this._refreshTokenExpires = options.refreshTokenExpires;\n        this.username = options.username;\n        this.password = options.password;\n        this._token = options.token;\n        this._tokenExpires = options.tokenExpires;\n        this.portal = options.portal\n            ? cleanUrl(options.portal)\n            : \"https://www.arcgis.com/sharing/rest\";\n        this.ssl = options.ssl;\n        this.provider = options.provider || \"arcgis\";\n        this.tokenDuration = options.tokenDuration || 20160;\n        this.redirectUri = options.redirectUri;\n        this.refreshTokenTTL = options.refreshTokenTTL || 20160;\n        this.server = options.server;\n        this.federatedServers = {};\n        this.trustedDomains = [];\n        // if a non-federated server was passed explicitly, it should be trusted.\n        if (options.server) {\n            // if the url includes more than '/arcgis/', trim the rest\n            var root = this.getServerRootUrl(options.server);\n            this.federatedServers[root] = {\n                token: options.token,\n                expires: options.tokenExpires,\n            };\n        }\n        this._pendingTokenRequests = {};\n    }\n    Object.defineProperty(UserSession.prototype, \"token\", {\n        /**\n         * The current ArcGIS Online or ArcGIS Enterprise `token`.\n         */\n        get: function () {\n            return this._token;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UserSession.prototype, \"tokenExpires\", {\n        /**\n         * The expiration time of the current `token`.\n         */\n        get: function () {\n            return this._tokenExpires;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UserSession.prototype, \"refreshToken\", {\n        /**\n         * The current token to ArcGIS Online or ArcGIS Enterprise.\n         */\n        get: function () {\n            return this._refreshToken;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UserSession.prototype, \"refreshTokenExpires\", {\n        /**\n         * The expiration time of the current `refreshToken`.\n         */\n        get: function () {\n            return this._refreshTokenExpires;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(UserSession.prototype, \"trustedServers\", {\n        /**\n         * Deprecated, use `federatedServers` instead.\n         *\n         * @deprecated\n         */\n        get: function () {\n            console.log(\"DEPRECATED: use federatedServers instead\");\n            return this.federatedServers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the\n     * authentication window will open in a new tab/window and the function will return\n     * Promise&lt;UserSession&gt;. Otherwise, the user will be redirected to the\n     * authorization page in their current tab/window and the function will return `undefined`.\n     *\n     * @browserOnly\n     */\n    /* istanbul ignore next */\n    UserSession.beginOAuth2 = function (options, win) {\n        if (win === void 0) { win = window; }\n        if (options.duration) {\n            console.log(\"DEPRECATED: 'duration' is deprecated - use 'expiration' instead\");\n        }\n        var _a = __assign({\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            provider: \"arcgis\",\n            expiration: 20160,\n            popup: true,\n            popupWindowFeatures: \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\",\n            state: options.clientId,\n            locale: \"\",\n        }, options), portal = _a.portal, provider = _a.provider, clientId = _a.clientId, expiration = _a.expiration, redirectUri = _a.redirectUri, popup = _a.popup, popupWindowFeatures = _a.popupWindowFeatures, state = _a.state, locale = _a.locale, params = _a.params;\n        var url;\n        if (provider === \"arcgis\") {\n            url = portal + \"/oauth2/authorize?client_id=\" + clientId + \"&response_type=token&expiration=\" + (options.duration || expiration) + \"&redirect_uri=\" + encodeURIComponent(redirectUri) + \"&state=\" + state + \"&locale=\" + locale;\n        }\n        else {\n            url = portal + \"/oauth2/social/authorize?client_id=\" + clientId + \"&socialLoginProviderName=\" + provider + \"&autoAccountCreateForSocial=true&response_type=token&expiration=\" + (options.duration || expiration) + \"&redirect_uri=\" + encodeURIComponent(redirectUri) + \"&state=\" + state + \"&locale=\" + locale;\n        }\n        // append additional params\n        if (params) {\n            url = url + \"&\" + encodeQueryString(params);\n        }\n        if (!popup) {\n            win.location.href = url;\n            return undefined;\n        }\n        var session = defer();\n        win[\"__ESRI_REST_AUTH_HANDLER_\" + clientId] = function (errorString, oauthInfoString) {\n            if (errorString) {\n                var error = JSON.parse(errorString);\n                session.reject(new ArcGISAuthError(error.errorMessage, error.error));\n                return;\n            }\n            if (oauthInfoString) {\n                var oauthInfo = JSON.parse(oauthInfoString);\n                session.resolve(new UserSession({\n                    clientId: clientId,\n                    portal: portal,\n                    ssl: oauthInfo.ssl,\n                    token: oauthInfo.token,\n                    tokenExpires: new Date(oauthInfo.expires),\n                    username: oauthInfo.username,\n                }));\n            }\n        };\n        win.open(url, \"oauth-window\", popupWindowFeatures);\n        return session.promise;\n    };\n    /**\n     * Completes a browser-based OAuth 2.0 sign in. If `options.popup` is `true` the user\n     * will be returned to the previous window. Otherwise a new `UserSession`\n     * will be returned. You must pass the same values for `options.popup` and\n     * `options.portal` as you used in `beginOAuth2()`.\n     *\n     * @browserOnly\n     */\n    /* istanbul ignore next */\n    UserSession.completeOAuth2 = function (options, win) {\n        if (win === void 0) { win = window; }\n        var _a = __assign({ portal: \"https://www.arcgis.com/sharing/rest\", popup: true }, options), portal = _a.portal, clientId = _a.clientId, popup = _a.popup;\n        function completeSignIn(error, oauthInfo) {\n            try {\n                var handlerFn = void 0;\n                var handlerFnName = \"__ESRI_REST_AUTH_HANDLER_\" + clientId;\n                if (popup) {\n                    // Guard b/c IE does not support window.opener\n                    if (win.opener) {\n                        if (win.opener.parent && win.opener.parent[handlerFnName]) {\n                            handlerFn = win.opener.parent[handlerFnName];\n                        }\n                        else if (win.opener && win.opener[handlerFnName]) {\n                            // support pop-out oauth from within an iframe\n                            handlerFn = win.opener[handlerFnName];\n                        }\n                    }\n                    else {\n                        // IE\n                        if (win !== win.parent && win.parent && win.parent[handlerFnName]) {\n                            handlerFn = win.parent[handlerFnName];\n                        }\n                    }\n                    // if we have a handler fn, call it and close the window\n                    if (handlerFn) {\n                        handlerFn(error ? JSON.stringify(error) : undefined, JSON.stringify(oauthInfo));\n                        win.close();\n                        return undefined;\n                    }\n                }\n            }\n            catch (e) {\n                throw new ArcGISAuthError(\"Unable to complete authentication. It's possible you specified popup based oAuth2 but no handler from \\\"beginOAuth2()\\\" present. This generally happens because the \\\"popup\\\" option differs between \\\"beginOAuth2()\\\" and \\\"completeOAuth2()\\\".\");\n            }\n            if (error) {\n                throw new ArcGISAuthError(error.errorMessage, error.error);\n            }\n            return new UserSession({\n                clientId: clientId,\n                portal: portal,\n                ssl: oauthInfo.ssl,\n                token: oauthInfo.token,\n                tokenExpires: oauthInfo.expires,\n                username: oauthInfo.username,\n            });\n        }\n        var params = decodeQueryString(win.location.hash);\n        if (!params.access_token) {\n            var error = void 0;\n            var errorMessage = \"Unknown error\";\n            if (params.error) {\n                error = params.error;\n                errorMessage = params.error_description;\n            }\n            return completeSignIn({ error: error, errorMessage: errorMessage });\n        }\n        var token = params.access_token;\n        var expires = new Date(Date.now() + parseInt(params.expires_in, 10) * 1000 - 60 * 1000);\n        var username = params.username;\n        var ssl = params.ssl === \"true\";\n        return completeSignIn(undefined, {\n            token: token,\n            expires: expires,\n            ssl: ssl,\n            username: username,\n        });\n    };\n    /**\n     * Request session information from the parent application\n     *\n     * When an application is embedded into another application via an IFrame, the embedded app can\n     * use `window.postMessage` to request credentials from the host application. This function wraps\n     * that behavior.\n     *\n     * The ArcGIS API for Javascript has this built into the Identity Manager as of the 4.19 release.\n     *\n     * Note: The parent application will not respond if the embedded app's origin is not:\n     * - the same origin as the parent or *.arcgis.com (JSAPI)\n     * - in the list of valid child origins (REST-JS)\n     *\n     *\n     * @param parentOrigin origin of the parent frame. Passed into the embedded application as `parentOrigin` query param\n     * @browserOnly\n     */\n    UserSession.fromParent = function (parentOrigin, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        // Declare handler outside of promise scope so we can detach it\n        var handler;\n        // return a promise that will resolve when the handler receives\n        // session information from the correct origin\n        return new Promise(function (resolve, reject) {\n            // create an event handler that just wraps the parentMessageHandler\n            handler = function (event) {\n                // ensure we only listen to events from the parent\n                if (event.source === win.parent && event.data) {\n                    try {\n                        return resolve(UserSession.parentMessageHandler(event));\n                    }\n                    catch (err) {\n                        return reject(err);\n                    }\n                }\n            };\n            // add listener\n            win.addEventListener(\"message\", handler, false);\n            win.parent.postMessage({ type: \"arcgis:auth:requestCredential\" }, parentOrigin);\n        }).then(function (session) {\n            win.removeEventListener(\"message\", handler, false);\n            return session;\n        });\n    };\n    /**\n     * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n     * the ArcGIS Online or ArcGIS Enterprise authorization page.\n     *\n     * @nodeOnly\n     */\n    UserSession.authorize = function (options, response) {\n        if (options.duration) {\n            console.log(\"DEPRECATED: 'duration' is deprecated - use 'expiration' instead\");\n        }\n        var _a = __assign({ portal: \"https://arcgis.com/sharing/rest\", expiration: 20160 }, options), portal = _a.portal, clientId = _a.clientId, expiration = _a.expiration, redirectUri = _a.redirectUri;\n        response.writeHead(301, {\n            Location: portal + \"/oauth2/authorize?client_id=\" + clientId + \"&expiration=\" + (options.duration || expiration) + \"&response_type=code&redirect_uri=\" + encodeURIComponent(redirectUri),\n        });\n        response.end();\n    };\n    /**\n     * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n     * for a `access_token`.\n     *\n     * @nodeOnly\n     */\n    UserSession.exchangeAuthorizationCode = function (options, authorizationCode) {\n        var _a = __assign({\n            portal: \"https://www.arcgis.com/sharing/rest\",\n            refreshTokenTTL: 20160,\n        }, options), portal = _a.portal, clientId = _a.clientId, redirectUri = _a.redirectUri, refreshTokenTTL = _a.refreshTokenTTL;\n        return fetchToken(portal + \"/oauth2/token\", {\n            params: {\n                grant_type: \"authorization_code\",\n                client_id: clientId,\n                redirect_uri: redirectUri,\n                code: authorizationCode,\n            },\n        }).then(function (response) {\n            return new UserSession({\n                clientId: clientId,\n                portal: portal,\n                ssl: response.ssl,\n                redirectUri: redirectUri,\n                refreshToken: response.refreshToken,\n                refreshTokenTTL: refreshTokenTTL,\n                refreshTokenExpires: new Date(Date.now() + (refreshTokenTTL - 1) * 60 * 1000),\n                token: response.token,\n                tokenExpires: response.expires,\n                username: response.username,\n            });\n        });\n    };\n    UserSession.deserialize = function (str) {\n        var options = JSON.parse(str);\n        return new UserSession({\n            clientId: options.clientId,\n            refreshToken: options.refreshToken,\n            refreshTokenExpires: new Date(options.refreshTokenExpires),\n            username: options.username,\n            password: options.password,\n            token: options.token,\n            tokenExpires: new Date(options.tokenExpires),\n            portal: options.portal,\n            ssl: options.ssl,\n            tokenDuration: options.tokenDuration,\n            redirectUri: options.redirectUri,\n            refreshTokenTTL: options.refreshTokenTTL,\n        });\n    };\n    /**\n     * Translates authentication from the format used in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n     *\n     * ```js\n     * UserSession.fromCredential({\n     *   userId: \"jsmith\",\n     *   token: \"secret\"\n     * });\n     * ```\n     *\n     * @returns UserSession\n     */\n    UserSession.fromCredential = function (credential) {\n        // At ArcGIS Online 9.1, credentials no longer include the ssl and expires properties\n        // Here, we provide default values for them to cover this condition\n        var ssl = typeof credential.ssl !== \"undefined\" ? credential.ssl : true;\n        var expires = credential.expires || Date.now() + 7200000; /* 2 hours */\n        return new UserSession({\n            portal: credential.server.includes(\"sharing/rest\")\n                ? credential.server\n                : credential.server + \"/sharing/rest\",\n            ssl: ssl,\n            token: credential.token,\n            username: credential.userId,\n            tokenExpires: new Date(expires),\n        });\n    };\n    /**\n     * Handle the response from the parent\n     * @param event DOM Event\n     */\n    UserSession.parentMessageHandler = function (event) {\n        if (event.data.type === \"arcgis:auth:credential\") {\n            return UserSession.fromCredential(event.data.credential);\n        }\n        if (event.data.type === \"arcgis:auth:error\") {\n            var err = new Error(event.data.error.message);\n            err.name = event.data.error.name;\n            throw err;\n        }\n        else {\n            throw new Error(\"Unknown message type.\");\n        }\n    };\n    /**\n     * Returns authentication in a format useable in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n     *\n     * ```js\n     * esriId.registerToken(session.toCredential());\n     * ```\n     *\n     * @returns ICredential\n     */\n    UserSession.prototype.toCredential = function () {\n        return {\n            expires: this.tokenExpires.getTime(),\n            server: this.portal,\n            ssl: this.ssl,\n            token: this.token,\n            userId: this.username,\n        };\n    };\n    /**\n     * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n     *\n     * ```js\n     * session.getUser()\n     *   .then(response => {\n     *     console.log(response.role); // \"org_admin\"\n     *   })\n     * ```\n     *\n     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n     * @returns A Promise that will resolve with the data from the response.\n     */\n    UserSession.prototype.getUser = function (requestOptions) {\n        var _this = this;\n        if (this._pendingUserRequest) {\n            return this._pendingUserRequest;\n        }\n        else if (this._user) {\n            return Promise.resolve(this._user);\n        }\n        else {\n            var url = this.portal + \"/community/self\";\n            var options = __assign(__assign({ httpMethod: \"GET\", authentication: this }, requestOptions), { rawResponse: false });\n            this._pendingUserRequest = request(url, options).then(function (response) {\n                _this._user = response;\n                _this._pendingUserRequest = null;\n                return response;\n            });\n            return this._pendingUserRequest;\n        }\n    };\n    /**\n     * Returns information about the currently logged in user's [portal](https://developers.arcgis.com/rest/users-groups-and-items/portal-self.htm). Subsequent calls will *not* result in additional web traffic.\n     *\n     * ```js\n     * session.getPortal()\n     *   .then(response => {\n     *     console.log(portal.name); // \"City of ...\"\n     *   })\n     * ```\n     *\n     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n     * @returns A Promise that will resolve with the data from the response.\n     */\n    UserSession.prototype.getPortal = function (requestOptions) {\n        var _this = this;\n        if (this._pendingPortalRequest) {\n            return this._pendingPortalRequest;\n        }\n        else if (this._portalInfo) {\n            return Promise.resolve(this._portalInfo);\n        }\n        else {\n            var url = this.portal + \"/portals/self\";\n            var options = __assign(__assign({ httpMethod: \"GET\", authentication: this }, requestOptions), { rawResponse: false });\n            this._pendingPortalRequest = request(url, options).then(function (response) {\n                _this._portalInfo = response;\n                _this._pendingPortalRequest = null;\n                return response;\n            });\n            return this._pendingPortalRequest;\n        }\n    };\n    /**\n     * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n     *\n     *    * ```js\n     * session.getUsername()\n     *   .then(response => {\n     *     console.log(response); // \"casey_jones\"\n     *   })\n     * ```\n     */\n    UserSession.prototype.getUsername = function () {\n        if (this.username) {\n            return Promise.resolve(this.username);\n        }\n        else if (this._user) {\n            return Promise.resolve(this._user.username);\n        }\n        else {\n            return this.getUser().then(function (user) {\n                return user.username;\n            });\n        }\n    };\n    /**\n     * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n     * the request is to an ArcGIS Online domain `token` will be used. If the request\n     * is to the current `portal` the current `token` will also be used. However if\n     * the request is to an unknown server we will validate the server with a request\n     * to our current `portal`.\n     */\n    UserSession.prototype.getToken = function (url, requestOptions) {\n        if (canUseOnlineToken(this.portal, url)) {\n            return this.getFreshToken(requestOptions);\n        }\n        else if (new RegExp(this.portal, \"i\").test(url)) {\n            return this.getFreshToken(requestOptions);\n        }\n        else {\n            return this.getTokenForServer(url, requestOptions);\n        }\n    };\n    /**\n     * Get application access information for the current user\n     * see `validateAppAccess` function for details\n     *\n     * @param clientId application client id\n     */\n    UserSession.prototype.validateAppAccess = function (clientId) {\n        return this.getToken(this.portal).then(function (token) {\n            return validateAppAccess(token, clientId);\n        });\n    };\n    UserSession.prototype.toJSON = function () {\n        return {\n            clientId: this.clientId,\n            refreshToken: this.refreshToken,\n            refreshTokenExpires: this.refreshTokenExpires,\n            username: this.username,\n            password: this.password,\n            token: this.token,\n            tokenExpires: this.tokenExpires,\n            portal: this.portal,\n            ssl: this.ssl,\n            tokenDuration: this.tokenDuration,\n            redirectUri: this.redirectUri,\n            refreshTokenTTL: this.refreshTokenTTL,\n        };\n    };\n    UserSession.prototype.serialize = function () {\n        return JSON.stringify(this);\n    };\n    /**\n     * For a \"Host\" app that embeds other platform apps via iframes, after authenticating the user\n     * and creating a UserSession, the app can then enable \"post message\" style authentication by calling\n     * this method.\n     *\n     * Internally this adds an event listener on window for the `message` event\n     *\n     * @param validChildOrigins Array of origins that are allowed to request authentication from the host app\n     */\n    UserSession.prototype.enablePostMessageAuth = function (validChildOrigins, win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        this._hostHandler = this.createPostMessageHandler(validChildOrigins);\n        win.addEventListener(\"message\", this._hostHandler, false);\n    };\n    /**\n     * For a \"Host\" app that has embedded other platform apps via iframes, when the host needs\n     * to transition routes, it should call `UserSession.disablePostMessageAuth()` to remove\n     * the event listener and prevent memory leaks\n     */\n    UserSession.prototype.disablePostMessageAuth = function (win) {\n        /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n        if (!win && window) {\n            win = window;\n        }\n        win.removeEventListener(\"message\", this._hostHandler, false);\n    };\n    /**\n     * Manually refreshes the current `token` and `tokenExpires`.\n     */\n    UserSession.prototype.refreshSession = function (requestOptions) {\n        // make sure subsequent calls to getUser() don't returned cached metadata\n        this._user = null;\n        if (this.username && this.password) {\n            return this.refreshWithUsernameAndPassword(requestOptions);\n        }\n        if (this.clientId && this.refreshToken) {\n            return this.refreshWithRefreshToken();\n        }\n        return Promise.reject(new ArcGISAuthError(\"Unable to refresh token.\"));\n    };\n    /**\n     * Determines the root of the ArcGIS Server or Portal for a given URL.\n     *\n     * @param url the URl to determine the root url for.\n     */\n    UserSession.prototype.getServerRootUrl = function (url) {\n        var root = cleanUrl(url).split(/\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/)[0];\n        var _a = root.match(/(https?:\\/\\/)(.+)/), protocol = _a[1], domainAndPath = _a[2];\n        var _b = domainAndPath.split(\"/\"), domain = _b[0], path = _b.slice(1);\n        // only the domain is lowercased because in some cases an org id might be\n        // in the path which cannot be lowercased.\n        return \"\" + protocol + domain.toLowerCase() + \"/\" + path.join(\"/\");\n    };\n    /**\n     * Returns the proper [`credentials`] option for `fetch` for a given domain.\n     * See [trusted server](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-security.htm#ESRI_SECTION1_70CC159B3540440AB325BE5D89DBE94A).\n     * Used internally by underlying request methods to add support for specific security considerations.\n     *\n     * @param url The url of the request\n     * @returns \"include\" or \"same-origin\"\n     */\n    UserSession.prototype.getDomainCredentials = function (url) {\n        if (!this.trustedDomains || !this.trustedDomains.length) {\n            return \"same-origin\";\n        }\n        return this.trustedDomains.some(function (domainWithProtocol) {\n            return url.startsWith(domainWithProtocol);\n        })\n            ? \"include\"\n            : \"same-origin\";\n    };\n    /**\n     * Return a function that closes over the validOrigins array and\n     * can be used as an event handler for the `message` event\n     *\n     * @param validOrigins Array of valid origins\n     */\n    UserSession.prototype.createPostMessageHandler = function (validOrigins) {\n        var _this = this;\n        // return a function that closes over the validOrigins and\n        // has access to the credential\n        return function (event) {\n            // Verify that the origin is valid\n            // Note: do not use regex's here. validOrigins is an array so we're checking that the event's origin\n            // is in the array via exact match. More info about avoiding postMessage xss issues here\n            // https://jlajara.gitlab.io/web/2020/07/17/Dom_XSS_PostMessage_2.html#tipsbypasses-in-postmessage-vulnerabilities\n            var isValidOrigin = validOrigins.indexOf(event.origin) > -1;\n            // JSAPI handles this slightly differently - instead of checking a list, it will respond if\n            // event.origin === window.location.origin || event.origin.endsWith('.arcgis.com')\n            // For Hub, and to enable cross domain debugging with port's in urls, we are opting to\n            // use a list of valid origins\n            // Ensure the message type is something we want to handle\n            var isValidType = event.data.type === \"arcgis:auth:requestCredential\";\n            var isTokenValid = _this.tokenExpires.getTime() > Date.now();\n            if (isValidOrigin && isValidType) {\n                var msg = {};\n                if (isTokenValid) {\n                    var credential = _this.toCredential();\n                    // arcgis:auth:error with {name: \"\", message: \"\"}\n                    // the following line allows us to conform to our spec without changing other depended-on functionality\n                    // https://github.com/Esri/arcgis-rest-js/blob/master/packages/arcgis-rest-auth/post-message-auth-spec.md#arcgisauthcredential\n                    credential.server = credential.server.replace(\"/sharing/rest\", \"\");\n                    msg = { type: \"arcgis:auth:credential\", credential: credential };\n                }\n                else {\n                    // Return an error\n                    msg = {\n                        type: \"arcgis:auth:error\",\n                        error: {\n                            name: \"tokenExpiredError\",\n                            message: \"Session token was expired, and not returned to the child application\",\n                        },\n                    };\n                }\n                event.source.postMessage(msg, event.origin);\n            }\n        };\n    };\n    /**\n     * Validates that a given URL is properly federated with our current `portal`.\n     * Attempts to use the internal `federatedServers` cache first.\n     */\n    UserSession.prototype.getTokenForServer = function (url, requestOptions) {\n        var _this = this;\n        // requests to /rest/services/ and /rest/admin/services/ are both valid\n        // Federated servers may have inconsistent casing, so lowerCase it\n        var root = this.getServerRootUrl(url);\n        var existingToken = this.federatedServers[root];\n        if (existingToken &&\n            existingToken.expires &&\n            existingToken.expires.getTime() > Date.now()) {\n            return Promise.resolve(existingToken.token);\n        }\n        if (this._pendingTokenRequests[root]) {\n            return this._pendingTokenRequests[root];\n        }\n        this._pendingTokenRequests[root] = this.fetchAuthorizedDomains().then(function () {\n            return request(root + \"/rest/info\", {\n                credentials: _this.getDomainCredentials(url),\n            })\n                .then(function (response) {\n                if (response.owningSystemUrl) {\n                    /**\n                     * if this server is not owned by this portal\n                     * bail out with an error since we know we wont\n                     * be able to generate a token\n                     */\n                    if (!isFederated(response.owningSystemUrl, _this.portal)) {\n                        throw new ArcGISAuthError(url + \" is not federated with \" + _this.portal + \".\", \"NOT_FEDERATED\");\n                    }\n                    else {\n                        /**\n                         * if the server is federated, use the relevant token endpoint.\n                         */\n                        return request(response.owningSystemUrl + \"/sharing/rest/info\", requestOptions);\n                    }\n                }\n                else if (response.authInfo &&\n                    _this.federatedServers[root] !== undefined) {\n                    /**\n                     * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n                     * federation, but the root server url is recognized, use its built in token endpoint.\n                     */\n                    return Promise.resolve({\n                        authInfo: response.authInfo,\n                    });\n                }\n                else {\n                    throw new ArcGISAuthError(url + \" is not federated with any portal and is not explicitly trusted.\", \"NOT_FEDERATED\");\n                }\n            })\n                .then(function (response) {\n                return response.authInfo.tokenServicesUrl;\n            })\n                .then(function (tokenServicesUrl) {\n                // an expired token cant be used to generate a new token\n                if (_this.token && _this.tokenExpires.getTime() > Date.now()) {\n                    return generateToken(tokenServicesUrl, {\n                        params: {\n                            token: _this.token,\n                            serverUrl: url,\n                            expiration: _this.tokenDuration,\n                            client: \"referer\",\n                        },\n                    });\n                    // generate an entirely fresh token if necessary\n                }\n                else {\n                    return generateToken(tokenServicesUrl, {\n                        params: {\n                            username: _this.username,\n                            password: _this.password,\n                            expiration: _this.tokenDuration,\n                            client: \"referer\",\n                        },\n                    }).then(function (response) {\n                        _this._token = response.token;\n                        _this._tokenExpires = new Date(response.expires);\n                        return response;\n                    });\n                }\n            })\n                .then(function (response) {\n                _this.federatedServers[root] = {\n                    expires: new Date(response.expires),\n                    token: response.token,\n                };\n                delete _this._pendingTokenRequests[root];\n                return response.token;\n            });\n        });\n        return this._pendingTokenRequests[root];\n    };\n    /**\n     * Returns an unexpired token for the current `portal`.\n     */\n    UserSession.prototype.getFreshToken = function (requestOptions) {\n        var _this = this;\n        if (this.token && !this.tokenExpires) {\n            return Promise.resolve(this.token);\n        }\n        if (this.token &&\n            this.tokenExpires &&\n            this.tokenExpires.getTime() > Date.now()) {\n            return Promise.resolve(this.token);\n        }\n        if (!this._pendingTokenRequests[this.portal]) {\n            this._pendingTokenRequests[this.portal] = this.refreshSession(requestOptions).then(function (session) {\n                _this._pendingTokenRequests[_this.portal] = null;\n                return session.token;\n            });\n        }\n        return this._pendingTokenRequests[this.portal];\n    };\n    /**\n     * Refreshes the current `token` and `tokenExpires` with `username` and\n     * `password`.\n     */\n    UserSession.prototype.refreshWithUsernameAndPassword = function (requestOptions) {\n        var _this = this;\n        var options = __assign({ params: {\n                username: this.username,\n                password: this.password,\n                expiration: this.tokenDuration,\n            } }, requestOptions);\n        return generateToken(this.portal + \"/generateToken\", options).then(function (response) {\n            _this._token = response.token;\n            _this._tokenExpires = new Date(response.expires);\n            return _this;\n        });\n    };\n    /**\n     * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n     */\n    UserSession.prototype.refreshWithRefreshToken = function (requestOptions) {\n        var _this = this;\n        if (this.refreshToken &&\n            this.refreshTokenExpires &&\n            this.refreshTokenExpires.getTime() < Date.now()) {\n            return this.refreshRefreshToken(requestOptions);\n        }\n        var options = __assign({ params: {\n                client_id: this.clientId,\n                refresh_token: this.refreshToken,\n                grant_type: \"refresh_token\",\n            } }, requestOptions);\n        return fetchToken(this.portal + \"/oauth2/token\", options).then(function (response) {\n            _this._token = response.token;\n            _this._tokenExpires = response.expires;\n            return _this;\n        });\n    };\n    /**\n     * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n     * `tokenExpires`.\n     */\n    UserSession.prototype.refreshRefreshToken = function (requestOptions) {\n        var _this = this;\n        var options = __assign({ params: {\n                client_id: this.clientId,\n                refresh_token: this.refreshToken,\n                redirect_uri: this.redirectUri,\n                grant_type: \"exchange_refresh_token\",\n            } }, requestOptions);\n        return fetchToken(this.portal + \"/oauth2/token\", options).then(function (response) {\n            _this._token = response.token;\n            _this._tokenExpires = response.expires;\n            _this._refreshToken = response.refreshToken;\n            _this._refreshTokenExpires = new Date(Date.now() + (_this.refreshTokenTTL - 1) * 60 * 1000);\n            return _this;\n        });\n    };\n    /**\n     * ensures that the authorizedCrossOriginDomains are obtained from the portal and cached\n     * so we can check them later.\n     *\n     * @returns this\n     */\n    UserSession.prototype.fetchAuthorizedDomains = function () {\n        var _this = this;\n        // if this token is for a specific server or we don't have a portal\n        // don't get the portal info because we cant get the authorizedCrossOriginDomains\n        if (this.server || !this.portal) {\n            return Promise.resolve(this);\n        }\n        return this.getPortal().then(function (portalInfo) {\n            /**\n             * Specific domains can be configured as secure.esri.com or https://secure.esri.com this\n             * normalizes to https://secure.esri.com so we can use startsWith later.\n             */\n            if (portalInfo.authorizedCrossOriginDomains &&\n                portalInfo.authorizedCrossOriginDomains.length) {\n                _this.trustedDomains = portalInfo.authorizedCrossOriginDomains\n                    .filter(function (d) { return !d.startsWith(\"http://\"); })\n                    .map(function (d) {\n                    if (d.startsWith(\"https://\")) {\n                        return d;\n                    }\n                    else {\n                        return \"https://\" + d;\n                    }\n                });\n            }\n            return _this;\n        });\n    };\n    return UserSession;\n}());\n\nexport { UserSession as U };\n"],"names":["decodeQueryString","query","replace","split","reduce","acc","entry","_a","param","key","value","decodeURIComponent","decodeParam","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","fetchToken","url","requestOptions","options","rawResponse","request","then","response","r","token","access_token","username","expires","Date","now","expires_in","ssl","refresh_token","refreshToken","generateToken","window","location","host","params","referer","NODEJS_DEFAULT_REFERER_HEADER","arcgisOnlineUrlRegex","isOnline","test","getOnlineEnvironment","subdomain","match","pop","includes","isFederated","owningSystemUrl","portalUrl","normalizedPortalUrl","cleanUrl","normalizeOnlinePortalUrl","normalizedOwningSystemUrl","RegExp","UserSession","clientId","_refreshToken","_refreshTokenExpires","refreshTokenExpires","password","_token","_tokenExpires","tokenExpires","portal","provider","tokenDuration","redirectUri","refreshTokenTTL","server","federatedServers","trustedDomains","root","getServerRootUrl","_pendingTokenRequests","defineProperty","get","enumerable","configurable","console","log","beginOAuth2","win","duration","expiration","popup","popupWindowFeatures","state","locale","encodeURIComponent","encodeQueryString","session","deferred","promise","resolve","reject","Promise","defer","errorString","oauthInfoString","error","JSON","parse","ArcGISAuthError","errorMessage","oauthInfo","open","href","completeOAuth2","completeSignIn","handlerFn","handlerFnName","opener","parent","stringify","undefined","close","e","hash","error_description","parseInt","fromParent","parentOrigin","handler","event","source","data","parentMessageHandler","err","addEventListener","postMessage","type","removeEventListener","authorize","writeHead","Location","end","exchangeAuthorizationCode","authorizationCode","grant_type","client_id","redirect_uri","code","deserialize","str","fromCredential","credential","userId","Error","message","name","toCredential","getTime","getUser","_this","_pendingUserRequest","_user","httpMethod","authentication","getPortal","_pendingPortalRequest","_portalInfo","getUsername","user","getToken","requestUrl","portalIsOnline","requestIsOnline","portalEnv","requestEnv","canUseOnlineToken","getFreshToken","getTokenForServer","validateAppAccess","ro","method","f","toJSON","serialize","enablePostMessageAuth","validChildOrigins","_hostHandler","createPostMessageHandler","disablePostMessageAuth","refreshSession","refreshWithUsernameAndPassword","refreshWithRefreshToken","protocol","_b","domain","path","slice","toLowerCase","join","getDomainCredentials","some","domainWithProtocol","startsWith","validOrigins","isValidOrigin","indexOf","origin","isValidType","isTokenValid","msg","existingToken","fetchAuthorizedDomains","credentials","authInfo","tokenServicesUrl","serverUrl","client","refreshRefreshToken","portalInfo","authorizedCrossOriginDomains","filter","d","map"],"sourceRoot":""}