{"version":3,"file":"static/js/48353.d20d7239.chunk.js","mappings":"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","sources":["../node_modules/@esri/hub-components/dist/esm/arcgis-telemetry-report.entry.js","../node_modules/@esri/hub-components/dist/esm/debounce-e9be81f1.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-0d95d9d4.js';\nimport { D as DebounceDecoratorFactory } from './debounce-e9be81f1.js';\nimport { b as buildSimpleDimensionFilters, C as COMMON_METRICS, g as getTelemetryReport } from './telemetry-reporting-client.esm-45d99ba7.js';\n\nvar COMMON_TELEMETRY;\n(function (COMMON_TELEMETRY) {\n  COMMON_TELEMETRY[\"sessions\"] = \"sessions\";\n  COMMON_TELEMETRY[\"referrers\"] = \"referrers\";\n  COMMON_TELEMETRY['page-views'] = \"page-views\";\n  COMMON_TELEMETRY['session-activity'] = \"session-activity\";\n})(COMMON_TELEMETRY || (COMMON_TELEMETRY = {}));\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ArcgisTelemetryReport = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * provides telemetry config information\n     * @type {ITelemetryContext}\n     * @memberof ArcgisTelemetryReport\n     */\n    this.telemetryContext = {};\n    /**\n     * telemetry dimension(s) by which to aggregate data\n     * @type {string}\n     * @memberof ArcgisTelemetryReport\n     */\n    this.series = [];\n    this.data = [];\n    this.isLoading = true;\n  }\n  onRequestParamsChange() {\n    this.getReportData();\n  }\n  async componentWillLoad() {\n    this.getReportData();\n  }\n  get dataTransformOptions() {\n    return {\n      seriesTransforms: this.seriesTransforms,\n      requestParams: this.requestParams\n    };\n  }\n  get isCustomEvent() {\n    return this.telemetryEvent && typeof this.telemetryEvent !== 'string';\n  }\n  get seriesTransforms() {\n    const seriesTransforms = {};\n    this.series.forEach(dimension => {\n      if (typeof dimension !== 'string') {\n        seriesTransforms[dimension.name] = Object.assign(Object.assign({}, (dimension.title && { title: dimension.title })), (dimension.value && { value: dimension.value }));\n      }\n    });\n    return seriesTransforms;\n  }\n  get dimensionFilters() {\n    let itemDimensionFilters = [];\n    let customDimensionFilters = [];\n    if (this.contentId && this.hostname) {\n      itemDimensionFilters = [\n        { name: \"contentId\", any: [this.contentId] }\n      ];\n    }\n    if (this.isCustomEvent) {\n      customDimensionFilters = buildSimpleDimensionFilters(this.telemetryEvent);\n    }\n    return [\n      ...customDimensionFilters,\n      ...itemDimensionFilters\n    ];\n  }\n  get scope() {\n    if (this.hostname) {\n      return { hostname: this.hostname };\n    }\n    else if (this.contentId) {\n      return { contentId: this.contentId };\n    }\n  }\n  get requestParams() {\n    const dimensions = this.getDimensions(this.telemetryEvent);\n    const metric = this.getMetric(this.telemetryEvent);\n    return Object.assign({ scope: this.scope, startDate: this.startDate, endDate: this.endDate, timeDimension: this.category, orderBy: this.orderBy, limit: this.limit, dimensionFilters: this.dimensionFilters, metrics: [metric] }, (dimensions.length && { dimensions }));\n  }\n  get requestOptions() {\n    var _a;\n    return Object.assign(Object.assign({}, this.context && ((_a = this.context) === null || _a === void 0 ? void 0 : _a.hubRequestOptions)), this.telemetryContext);\n  }\n  getMetric(telemetryEvent) {\n    const telemetryEventToMetricMap = {\n      [COMMON_TELEMETRY.sessions]: COMMON_METRICS.sessions,\n      [COMMON_TELEMETRY.referrers]: COMMON_METRICS['page-views'],\n      [COMMON_TELEMETRY['page-views']]: COMMON_METRICS['page-views'],\n      [COMMON_TELEMETRY['session-activity']]: COMMON_METRICS['session-activity']\n    };\n    return !this.isCustomEvent && telemetryEventToMetricMap[telemetryEvent] || COMMON_METRICS.custom;\n  }\n  getDimensions(telemetryEvent) {\n    const telemetryEventToDimensionsMap = {\n      [COMMON_TELEMETRY.referrers]: 'referrer',\n    };\n    const providedDimensions = this.series.map(entry => {\n      return typeof entry === 'string' ? entry : entry.name;\n    });\n    const commonDimensions = !this.isCustomEvent && telemetryEventToDimensionsMap[telemetryEvent];\n    return commonDimensions ? [commonDimensions, ...providedDimensions] : providedDimensions;\n  }\n  async getReportData() {\n    this.isLoading = true;\n    this.context && getTelemetryReport(this.requestParams, this.requestOptions)\n      .then(response => {\n      this.data = response.data;\n    }).catch((e) => {\n      this.error = e.toString();\n    })\n      .finally(() => {\n      this.isLoading = false;\n    });\n  }\n  render() {\n    const ReportComponent = `arcgis-telemetry-${this.type}`;\n    return (h(Host, { \"data-element\": \"telemetry-report\" }, h(ReportComponent, { data: this.data, isLoading: this.isLoading, options: this.dataTransformOptions, reportTitle: this.reportTitle, subtitle: this.subtitle, titleTooltip: this.titleTooltip })));\n  }\n  get element() { return getElement(this); }\n  static get watchers() { return {\n    \"context\": [\"onRequestParamsChange\"],\n    \"startDate\": [\"onRequestParamsChange\"],\n    \"endDate\": [\"onRequestParamsChange\"],\n    \"telemetryEvent\": [\"onRequestParamsChange\"]\n  }; }\n};\n__decorate([\n  DebounceDecoratorFactory({ timeout: 300 })\n], ArcgisTelemetryReport.prototype, \"onRequestParamsChange\", null);\n\nexport { ArcgisTelemetryReport as arcgis_telemetry_report };\n","/**\n * A util to debounce another function. It will return a function\n * that, as long as it continues to be invoked, will not be triggered\n * until the designated timeout has passed.\n */\nfunction debounce(fn, timeout = 300) {\n  let timeoutId;\n  return function (context, ...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn.apply(context, args), timeout);\n  };\n}\n\nfunction DebounceDecoratorFactory(params) {\n  function DebounceDecorator(_target, propertyKey, descriptor) {\n    const { value: original } = descriptor;\n    const debouncedKey = `${propertyKey.toString()}Debounced`;\n    const value = function (...args) {\n      if (!this[debouncedKey]) {\n        Object.defineProperty(this, debouncedKey, {\n          value: debounce(original, params.timeout),\n        });\n      }\n      this[debouncedKey](this, ...args);\n    };\n    return Object.assign(Object.assign({}, descriptor), { value });\n  }\n  return DebounceDecorator;\n}\n\nexport { DebounceDecoratorFactory as D };\n"],"names":["COMMON_TELEMETRY","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","ArcgisTelemetryReport","hostRef","registerInstance","this","telemetryContext","series","data","isLoading","getReportData","seriesTransforms","requestParams","telemetryEvent","forEach","dimension","name","assign","title","value","itemDimensionFilters","customDimensionFilters","contentId","hostname","any","isCustomEvent","buildSimpleDimensionFilters","dimensions","getDimensions","metric","getMetric","scope","startDate","endDate","timeDimension","category","orderBy","limit","dimensionFilters","metrics","_a","context","hubRequestOptions","telemetryEventToMetricMap","sessions","COMMON_METRICS","referrers","telemetryEventToDimensionsMap","providedDimensions","map","entry","commonDimensions","getTelemetryReport","requestOptions","then","response","catch","e","error","toString","finally","ReportComponent","type","h","Host","options","dataTransformOptions","reportTitle","subtitle","titleTooltip","getElement","DebounceDecoratorFactory","timeout","prototype","debounce","fn","timeoutId","args","clearTimeout","setTimeout","apply","params","_target","propertyKey","descriptor","original","debouncedKey"],"sourceRoot":""}