{"version":3,"file":"static/js/69027.99802b05.chunk.js","mappings":"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","sources":["../node_modules/@esri/hub-components/dist/esm/ArcGISContextManager-4351a238.js","../node_modules/@esri/hub-components/dist/esm/logger-0c7a68de.js"],"sourcesContent":["import { g as getProp } from './get-prop-d82e4fa6.js';\nimport { g as getWithDefault } from './get-with-default-6db049d8.js';\nimport { g as getPortalBaseFromOrgUrl, a as getUser } from './getPortalBaseFromOrgUrl-6a5781aa.js';\nimport { L as Level, a as Logger } from './logger-0c7a68de.js';\nimport { c as cloneObject } from './util-3c40fe6c.js';\nimport { g as getSelf } from './get-portal-06f7947b.js';\n\n/**\n * Cross-walk from a portalUrl to the corresponding Hub API Url\n *\n * If the passed url is not recognized, then this will return `undefined`\n * @param portalUrl\n * @returns\n */\nfunction getHubApiFromPortalUrl(portalUrl) {\n    let result;\n    if (portalUrl.match(/(qaext|\\.mapsqa)\\.arcgis.com/)) {\n        result = \"https://hubqa.arcgis.com\";\n    }\n    else if (portalUrl.match(/(devext|\\.mapsdevext)\\.arcgis.com/)) {\n        result = \"https://hubdev.arcgis.com\";\n    }\n    else if (portalUrl.match(/(www|\\.maps)\\.arcgis.com/)) {\n        result = \"https://hub.arcgis.com\";\n    }\n    return result;\n}\n\n/**\n * Hash of Hub API end points so updates\n * are centralized\n */\nconst hubApiEndpoints = {\n    domains: \"/api/v3/domains\",\n    search: \"/api/v3/datasets\",\n    discussions: \"/api/discussions/v1\",\n};\n/**\n * Abstraction that holds a `UserSession`, along with\n * getters to streamline access to various platform\n * urls, and common constructs like `IRequestOptions`,\n * `IUserRequestOptions` etc.\n *\n * Instances are intended to be immutable, but this is not directly enforced.\n *\n * In most circumstances, this class should be created by\n * the ArcGISContextManager class.\n */\nclass ArcGISContext {\n    /**\n     * Create a new instance of `ArcGISContext`.\n     *\n     * @param opts\n     */\n    constructor(opts) {\n        this._portalUrl = \"https://www.arcgis.com\";\n        this.id = opts.id;\n        this._portalUrl = opts.portalUrl;\n        this._hubUrl = opts.hubUrl;\n        this._systemStatus = opts.systemStatus;\n        if (opts.authentication) {\n            this._authentication = opts.authentication;\n        }\n        if (opts.portalSelf) {\n            this._portalSelf = opts.portalSelf;\n        }\n        if (opts.currentUser) {\n            this._currentUser = opts.currentUser;\n        }\n        if (opts.properties) {\n            this._properties = opts.properties;\n        }\n    }\n    /**\n     * Return the UserSession if authenticated\n     */\n    get session() {\n        return this._authentication;\n    }\n    /**\n     * Return boolean indicating if authenticatio is present\n     */\n    get isAuthenticated() {\n        return !!this._authentication;\n    }\n    /**\n     * Is the users org in the alpha orgs list?\n     * Alpha orgs are passed in via properties.alphaOrgs\n     */\n    get isAlphaOrg() {\n        var _a, _b;\n        let result = false;\n        const orgs = ((_a = this._properties) === null || _a === void 0 ? void 0 : _a.alphaOrgs) || [];\n        const orgId = (_b = this._portalSelf) === null || _b === void 0 ? void 0 : _b.id;\n        if (orgs.length && orgId) {\n            result = orgs.includes(orgId);\n        }\n        return result;\n    }\n    /**\n     * Return `IUserRequestOptions`, which is used for REST-JS\n     * functions which require authentication information.\n     *\n     * If context is not authenticated, this function will throw\n     */\n    get userRequestOptions() {\n        if (this.isAuthenticated) {\n            return {\n                authentication: this._authentication,\n                portal: this.sharingApiUrl,\n            };\n        }\n    }\n    /**\n     * Return `IRequestOptions`, which is used by REST-JS functions\n     * which *may* use authentication information if provided.\n     *\n     * If context is not authenticated, this function just returns\n     * the `portal` property, which informs REST-JS what Sharing API\n     * instance to use (i.e. AGO, Enterprise etc)\n     */\n    get requestOptions() {\n        let ro = {\n            portal: this.sharingApiUrl,\n        };\n        if (this.isAuthenticated) {\n            ro = {\n                authentication: this._authentication,\n                portal: this.sharingApiUrl,\n            };\n        }\n        return ro;\n    }\n    /**\n     * Return a `IHubRequestOptions` object\n     */\n    get hubRequestOptions() {\n        // We may add more logic around what is returned in some corner cases\n        return {\n            authentication: this.session,\n            isPortal: this.isPortal,\n            portalSelf: this.portal,\n            hubApiUrl: this.hubUrl,\n            portal: this.sharingApiUrl,\n        };\n    }\n    /**\n     * Return the portal url i.e. https://www.arcgis.com\n     *\n     * If authenticated @ ArcGIS Online, it will return\n     * the https://org.env.arcgis.com\n     *\n     * If authenticated @ ArcGIS Enterprise, it will return\n     * https://{portalHostname}/{webadaptor}\n     */\n    get portalUrl() {\n        if (this.isAuthenticated) {\n            if (this.isPortal || !this._portalSelf.urlKey) {\n                return `https://${this._portalSelf.portalHostname}`;\n            }\n            else {\n                return `https://${this._portalSelf.urlKey}.${this._portalSelf.customBaseUrl}`;\n            }\n        }\n        else {\n            return this._portalUrl;\n        }\n    }\n    /**\n     * Returns the current user's Hub License\n     */\n    get hubLicense() {\n        if (this.isPortal) {\n            return \"enterprise-sites\";\n        }\n        else {\n            if (this.hubEnabled) {\n                return \"hub-premium\";\n            }\n            else {\n                return \"hub-basic\";\n            }\n        }\n    }\n    /**\n     * Returns the current hub system status information\n     */\n    get systemStatus() {\n        return this._systemStatus;\n    }\n    /**\n     * Returns the url to the sharing api composed from portalUrl\n     * i.e. https://myorg.maps.arcgis.com/sharing/rest\n     */\n    get sharingApiUrl() {\n        return `${this.portalUrl}/sharing/rest`;\n    }\n    /**\n     * Returns the Hub url, based on the portalUrl\n     *\n     * For ArcGIS Enterprise this will return `undefined`\n     */\n    get hubUrl() {\n        return this._hubUrl;\n    }\n    /**\n     * Returns boolean indicating if the backing system\n     * is ArcGIS Enterprise (formerly ArcGIS Portal) or not\n     */\n    get isPortal() {\n        return this._portalSelf\n            ? this._portalSelf.isPortal\n            : this._portalUrl.indexOf(\"arcgis.com\") === -1;\n    }\n    /**\n     * Returns the discussions API URL\n     */\n    get discussionsServiceUrl() {\n        if (this._hubUrl) {\n            return `${this._hubUrl}${hubApiEndpoints.discussions}`;\n        }\n    }\n    /**\n     * Returns the Hub Search API URL\n     */\n    get hubSearchServiceUrl() {\n        if (this._hubUrl) {\n            return `${this._hubUrl}${hubApiEndpoints.search}`;\n        }\n    }\n    /**\n     * Returns Hub Domain Service URL\n     */\n    get domainServiceUrl() {\n        if (this._hubUrl) {\n            return `${this._hubUrl}${hubApiEndpoints.domains}`;\n        }\n    }\n    /**\n     * Returns the Events configuration object from portal/self\n     *\n     * `{serviceId: '3ef..', publicViewId: 'bc3...'}`\n     */\n    get eventsConfig() {\n        if (this._portalSelf) {\n            return getProp(this._portalSelf, \"portalProperties.hub.settings.events\");\n        }\n    }\n    /**\n     * Returns boolean indicating if the current user\n     * belongs to an organization that has licensed\n     * ArcGIS Hub\n     */\n    get hubEnabled() {\n        return getWithDefault(this._portalSelf, \"portalProperties.hub.enabled\", false);\n    }\n    /**\n     * Return the Hub Community Org Id, if defined\n     */\n    get communityOrgId() {\n        if (this._portalSelf) {\n            return getProp(this._portalSelf, \"portalProperties.hub.settings.communityOrg.orgId\");\n        }\n    }\n    /**\n     * Returns the Hub Community Org Hostname, if defined\n     *\n     * i.e. c-org.maps.arcgis.com\n     */\n    get communityOrgHostname() {\n        if (this._portalSelf) {\n            return getProp(this._portalSelf, \"portalProperties.hub.settings.communityOrg.portalHostname\");\n        }\n    }\n    /**\n     * Returns the Hub Community Org url\n     *\n     * i.e. https://c-org.maps.arcgis.com\n     */\n    get communityOrgUrl() {\n        if (this.communityOrgHostname) {\n            return `https://${this.communityOrgHostname}`;\n        }\n    }\n    /**\n     * Returns the hash of helper services from portal self\n     */\n    get helperServices() {\n        if (this._portalSelf) {\n            return this._portalSelf.helperServices;\n        }\n    }\n    /**\n     * Returns the current user as IUser\n     */\n    get currentUser() {\n        return this._currentUser;\n    }\n    /**\n     * Returns the portal object as IPortal\n     */\n    get portal() {\n        return this._portalSelf;\n    }\n    /**\n     * Return the properties hash that was passed in.\n     * Useful for app-specific context such as the active\n     * Site for ArcGIS Hub\n     */\n    get properties() {\n        return this._properties;\n    }\n}\n\n/**\n * The manager exposes context (`IArcGISContext`), which combines a `UserSession` with\n * the `portal/self` and `user/self` responses to provide a central lookup for platform\n * information, api urls, and other useful properties for developers such as IRequestOptions\n * IUserRequestOptions, IHubRequestOptions etc.\n *\n * The context is exposed on gthe `.context` property, and as the authentication changes\n * the `.context` is re-created. This is done to allow web frameworks to watch for\n * changes on that single property, instead of having to leverage observers or events\n * for change detection.\n *\n * Please see the [ArcGISContext Guide](/hub.js/guides/context) for additional information.\n *\n */\nclass ArcGISContextManager {\n    /**\n     * Private constructor. Use `ArcGISContextManager.create(...)` to\n     * instantiate an instance\n     * @param opts\n     */\n    constructor(opts) {\n        this._portalUrl = \"https://www.arcgis.com\";\n        this._logLevel = Level.error;\n        // Having a unique id makes debugging easier\n        this.id = new Date().getTime();\n        if (opts.logLevel) {\n            this._logLevel = opts.logLevel;\n        }\n        Logger.setLogLevel(this._logLevel);\n        Logger.debug(`ArcGISContextManager:ctor: Creating ${this.id}`);\n        if (opts.properties) {\n            this._properties = opts.properties;\n        }\n        if (opts.authentication) {\n            this._authentication = opts.authentication;\n            this._portalUrl = this._authentication.portal.replace(\"/sharing/rest\", \"\");\n            this._hubUrl = getHubApiFromPortalUrl(this._portalUrl);\n        }\n        else if (opts.portalUrl) {\n            this._portalUrl = opts.portalUrl;\n            this._hubUrl = getHubApiFromPortalUrl(this._portalUrl);\n        }\n        else {\n            this._hubUrl = getHubApiFromPortalUrl(this._portalUrl);\n        }\n        if (opts.portal) {\n            this._portalSelf = cloneObject(opts.portal);\n        }\n        if (opts.currentUser) {\n            this._currentUser = cloneObject(opts.currentUser);\n        }\n        if (opts.systemStatus) {\n            this._systemStatus = opts.systemStatus;\n        }\n    }\n    /**\n     * Used to create a new instance of the ArcGISContext class.\n     *\n     * ```js\n     * const ctxMgr = await ArcGISContextManager.create();\n     * ```\n     *\n     * @param opts\n     * @returns\n     */\n    static async create(opts = {}) {\n        const ctx = new ArcGISContextManager(opts);\n        await ctx.initialize();\n        return ctx;\n    }\n    /**\n     * Set the Authentication (UserSession) for the context.\n     * This should be called when a user signs into a running\n     * application.\n     * @param auth\n     */\n    async setAuthentication(auth) {\n        this._authentication = auth;\n        this._portalUrl = auth.portal.replace(\"/sharing/rest\", \"\");\n        await this.initialize();\n    }\n    /**\n     * Set the properties hash and re-create the context\n     * @param properties\n     */\n    setProperties(properties) {\n        this._properties = properties;\n        this._context = new ArcGISContext(this.contextOpts);\n    }\n    /**\n     * Clear the Authentication (UserSession). This should be\n     * called when a user signs out of an application, but\n     * the application continues running\n     */\n    clearAuthentication() {\n        // Reset the portalUrl from the org url to the base url\n        // for ArcGIS Enterprise, we just leave the _portalUrl as-is\n        if (!this._context.isPortal) {\n            this._portalUrl = getPortalBaseFromOrgUrl(this._portalUrl);\n        }\n        // Clear the auth, portalSelf and currentUser props\n        this._authentication = null;\n        this._portalSelf = null;\n        this._currentUser = null;\n        this._context = new ArcGISContext(this.contextOpts);\n    }\n    /**\n     * Return a reference to the current state.\n     * When `.setAuthentication()` or `.clearAuthenentication()` are\n     * called, the state will be re-created. This is done so frameworks\n     * like React or Ember can detect changes.\n     */\n    get context() {\n        return this._context;\n    }\n    /**\n     * If we have a UserSession, fetch portal/self and\n     * store that along with current user\n     */\n    async initialize() {\n        // if we have auth, and don't have portalSelf or currentUser, fetch them\n        if (this._authentication && (!this._portalSelf || !this._currentUser)) {\n            Logger.debug(`ArcGISContextManager-${this.id}: Initializing`);\n            const username = this._authentication.username;\n            const requests = [\n                getSelf({ authentication: this._authentication }),\n                getUser({ username, authentication: this._authentication }),\n            ];\n            try {\n                const [portal, user] = await Promise.all(requests);\n                this._portalSelf = portal;\n                this._currentUser = user;\n                Logger.debug(`ArcGISContextManager-${this.id}: received portalSelf and currentUser`);\n            }\n            catch (ex) {\n                const msg = `ArcGISContextManager could not fetch portal & user for \"${this._authentication.username}\" using ${this._authentication.portal}.`;\n                Logger.error(msg);\n                // tslint:disable-next-line:no-console\n                console.error(msg);\n                throw ex;\n            }\n        }\n        // get system status\n        if (!this._systemStatus) {\n            this._systemStatus = await getSystemStatus(this._portalUrl);\n        }\n        Logger.debug(`ArcGISContextManager-${this.id}: updating context`);\n        // update the context\n        this._context = new ArcGISContext(this.contextOpts);\n    }\n    /**\n     * Getter to streamline the creation of updated Context instances\n     */\n    get contextOpts() {\n        const contextOpts = {\n            id: this.id,\n            portalUrl: this._portalUrl,\n            hubUrl: this._hubUrl,\n            properties: this._properties,\n            systemStatus: this._systemStatus,\n        };\n        if (this._authentication) {\n            contextOpts.authentication = this._authentication;\n        }\n        if (this._portalSelf) {\n            contextOpts.portalSelf = this._portalSelf;\n        }\n        if (this._currentUser) {\n            contextOpts.currentUser = this._currentUser;\n        }\n        return contextOpts;\n    }\n}\n/**\n * Temporary fake implementation based on isPortal\n * which we have during the initialization\n * @param hubApiUrl\n */\nfunction getSystemStatus(portalUrl) {\n    let status = HUB_STATUS;\n    const isPortal = portalUrl.indexOf(\"arcgis.com\") === -1;\n    // When we move to fetching the system status from the API\n    // we can use\n    // const hubApiUrl = getHubApiFromPortalUrl(portalUrl);\n    if (isPortal) {\n        status = ENTERPRISE_SITES_STATUS;\n    }\n    return Promise.resolve(status);\n}\nconst ENTERPRISE_SITES_STATUS = {\n    discussions: \"not-available\",\n    events: \"not-available\",\n    initiatives: \"not-available\",\n    items: \"online\",\n    metrics: \"not-available\",\n    notifications: \"not-available\",\n    pages: \"online\",\n    projects: \"not-available\",\n    search: \"online\",\n    sites: \"online\",\n};\nconst HUB_STATUS = {\n    discussions: \"online\",\n    events: \"online\",\n    initiatives: \"online\",\n    items: \"online\",\n    metrics: \"online\",\n    notifications: \"online\",\n    pages: \"online\",\n    projects: \"online\",\n    search: \"online\",\n    sites: \"online\",\n};\n\nexport { ArcGISContextManager as A };\n","/* tslint:disable no-console */\n/**\n * Enum for Logger Levels\n */\nvar Level;\n(function (Level) {\n    Level[Level[\"all\"] = 0] = \"all\";\n    Level[Level[\"debug\"] = 1] = \"debug\";\n    Level[Level[\"info\"] = 2] = \"info\";\n    Level[Level[\"warn\"] = 3] = \"warn\";\n    Level[Level[\"error\"] = 4] = \"error\";\n    Level[Level[\"off\"] = 5] = \"off\";\n})(Level || (Level = {}));\n/**\n * ```js\n * import { Logger, Level } from '@esri/hub-common'\n * ```\n * Functions share the console interface\n * ```js\n * Logger.log('My Message');\n * Logger.warn('Watch out!', { threat: 'Charizard' });\n * // etc, etc\n * ```\n * Available logging levels are specified in the Level enum. The hierarchy is as follows:\n * ```\n * off > error > warn > info > debug > all\n * ```\n * Logger only sends messages whose level is greater than or equal to the global log level\n * ```js\n * // Global level is 'warn'\n * Logger.info('This message won't log');\n * Logger.error('But this one will!');\n * ```\n * Logger's default level is 'off', so set desired level before use\n * ```js\n * Logger.setLogLevel(Level.all);\n * ```\n */\nclass Logger {\n    /**\n     * Sets the global log level\n     * @param {Level} level\n     */\n    static setLogLevel(level) {\n        this.logLevel = level;\n    }\n    /**\n     * Logs to debug if level is enabled\n     * @param {string} message\n     * @param {...*} objects additional objects to log (optional rest parameter)\n     */\n    static log(message, ...objects) {\n        if (this.isLevelPermitted(Level.debug)) {\n            console.log(message, ...objects);\n        }\n    }\n    /**\n     * Logs to debug if level is enabled\n     * @param {string} message\n     * @param {...*} objects additional objects to log (optional rest parameter)\n     */\n    static debug(message, ...objects) {\n        if (this.isLevelPermitted(Level.debug)) {\n            console.debug(message, ...objects);\n        }\n    }\n    /**\n     * Logs to info if level is enabled\n     * @param {string} message\n     * @param {...*} objects additional objects to log (optional rest parameter)\n     */\n    static info(message, ...objects) {\n        if (this.isLevelPermitted(Level.info)) {\n            console.info(message, ...objects);\n        }\n    }\n    /**\n     * Logs to warn if level is enabled\n     * @param {string} message\n     * @param {...*} objects additional objects to log (optional rest parameter)\n     */\n    static warn(message, ...objects) {\n        if (this.isLevelPermitted(Level.warn)) {\n            console.warn(message, ...objects);\n        }\n    }\n    /**\n     * Logs to error if level is enabled\n     * @param {string} message\n     * @param {...*} objects additional objects to log (optional rest parameter)\n     */\n    static error(message, ...objects) {\n        if (this.isLevelPermitted(Level.error)) {\n            console.error(message, ...objects);\n        }\n    }\n    static isLevelPermitted(level) {\n        return this.logLevel <= level;\n    }\n}\nLogger.logLevel = Level.off;\n\nexport { Level as L, Logger as a };\n"],"names":["getHubApiFromPortalUrl","portalUrl","result","match","hubApiEndpoints","ArcGISContext","opts","this","_portalUrl","id","_hubUrl","hubUrl","_systemStatus","systemStatus","authentication","_authentication","portalSelf","_portalSelf","currentUser","_currentUser","properties","_properties","_a","_b","orgs","alphaOrgs","orgId","length","includes","isAuthenticated","portal","sharingApiUrl","ro","session","isPortal","hubApiUrl","urlKey","portalHostname","customBaseUrl","hubEnabled","indexOf","getProp","getWithDefault","communityOrgHostname","helperServices","ArcGISContextManager","_logLevel","Level","Date","getTime","logLevel","Logger","replace","cloneObject","auth","initialize","_context","contextOpts","getPortalBaseFromOrgUrl","username","requests","getSelf","getUser","Promise","all","user","msg","console","error","getSystemStatus","ctx","status","HUB_STATUS","ENTERPRISE_SITES_STATUS","resolve","discussions","events","initiatives","items","metrics","notifications","pages","projects","search","sites","level","message","isLevelPermitted","debug","objects","log","info","warn","off"],"sourceRoot":""}