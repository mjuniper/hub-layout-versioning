{"version":3,"file":"static/js/66162.f38c60cf.chunk.js","mappings":"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","sources":["../.yalc/@esri/hub-components/dist/esm/arcgis-telemetry-report.entry.js","../.yalc/@esri/hub-components/dist/esm/debounce-89fe9847.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-0d95d9d4.js';\nimport { d as debounce } from './debounce-89fe9847.js';\nimport { b as buildSimpleDimensionFilters, C as COMMON_METRICS, g as getTelemetryReport } from './telemetry-reporting-client.esm-45d99ba7.js';\n\nvar COMMON_TELEMETRY;\n(function (COMMON_TELEMETRY) {\n  COMMON_TELEMETRY[\"sessions\"] = \"sessions\";\n  COMMON_TELEMETRY[\"referrers\"] = \"referrers\";\n  COMMON_TELEMETRY['page-views'] = \"page-views\";\n  COMMON_TELEMETRY['session-activity'] = \"session-activity\";\n})(COMMON_TELEMETRY || (COMMON_TELEMETRY = {}));\n\nconst ArcgisTelemetryReport = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * provides telemetry config information\n     * @type {ITelemetryContext}\n     * @memberof ArcgisTelemetryReport\n     */\n    this.telemetryContext = {};\n    /**\n     * telemetry dimension(s) by which to aggregate data\n     * @type {string}\n     * @memberof ArcgisTelemetryReport\n     */\n    this.series = [];\n    this.data = [];\n    this.isLoading = true;\n    this._debouncedGetReportData = debounce(this.getReportData);\n  }\n  onRequestParamsChange() {\n    this._debouncedGetReportData();\n  }\n  async componentWillLoad() {\n    this.getReportData();\n  }\n  get dataTransformOptions() {\n    return {\n      seriesTransforms: this.seriesTransforms,\n      requestParams: this.requestParams\n    };\n  }\n  get isCustomEvent() {\n    return this.telemetryEvent && typeof this.telemetryEvent !== 'string';\n  }\n  get seriesTransforms() {\n    const seriesTransforms = {};\n    this.series.forEach(dimension => {\n      if (typeof dimension !== 'string') {\n        seriesTransforms[dimension.name] = Object.assign(Object.assign({}, (dimension.title && { title: dimension.title })), (dimension.value && { value: dimension.value }));\n      }\n    });\n    return seriesTransforms;\n  }\n  get dimensionFilters() {\n    let itemDimensionFilters = [];\n    let customDimensionFilters = [];\n    if (this.contentId && this.hostname) {\n      itemDimensionFilters = [\n        { name: \"contentId\", any: [this.contentId] }\n      ];\n    }\n    if (this.isCustomEvent) {\n      customDimensionFilters = buildSimpleDimensionFilters(this.telemetryEvent);\n    }\n    return [\n      ...customDimensionFilters,\n      ...itemDimensionFilters\n    ];\n  }\n  get scope() {\n    if (this.hostname) {\n      return { hostname: this.hostname };\n    }\n    // TODO: add conditional to scope by contentId once https://devtopia.esri.com/dc/hub/issues/4294 is completed\n  }\n  get requestParams() {\n    const dimensions = this.getDimensions(this.telemetryEvent);\n    const metric = this.getMetric(this.telemetryEvent);\n    return Object.assign({ scope: this.scope, startDate: this.startDate, endDate: this.endDate, timeDimension: this.category, orderBy: this.orderBy, limit: this.limit, dimensionFilters: this.dimensionFilters, metrics: [metric] }, (dimensions.length && { dimensions }));\n  }\n  get requestOptions() {\n    var _a;\n    return Object.assign(Object.assign({}, this.context && ((_a = this.context) === null || _a === void 0 ? void 0 : _a.hubRequestOptions)), this.telemetryContext);\n  }\n  getMetric(telemetryEvent) {\n    const telemetryEventToMetricMap = {\n      [COMMON_TELEMETRY.sessions]: COMMON_METRICS.sessions,\n      [COMMON_TELEMETRY.referrers]: COMMON_METRICS['page-views'],\n      [COMMON_TELEMETRY['page-views']]: COMMON_METRICS['page-views'],\n      [COMMON_TELEMETRY['session-activity']]: COMMON_METRICS['session-activity']\n    };\n    return !this.isCustomEvent && telemetryEventToMetricMap[telemetryEvent] || COMMON_METRICS.custom;\n  }\n  getDimensions(telemetryEvent) {\n    const telemetryEventToDimensionsMap = {\n      [COMMON_TELEMETRY.referrers]: 'referrer',\n    };\n    const providedDimensions = this.series.map(entry => {\n      return typeof entry === 'string' ? entry : entry.name;\n    });\n    const commonDimensions = !this.isCustomEvent && telemetryEventToDimensionsMap[telemetryEvent];\n    return commonDimensions ? [commonDimensions, ...providedDimensions] : providedDimensions;\n  }\n  async getReportData() {\n    this.isLoading = true;\n    this.context && getTelemetryReport(this.requestParams, this.requestOptions)\n      .then(response => {\n      this.data = response.data;\n    }).catch((e) => {\n      this.error = e.toString();\n    })\n      .finally(() => {\n      this.isLoading = false;\n    });\n  }\n  render() {\n    const ReportComponent = `arcgis-telemetry-${this.type}`;\n    return (h(Host, { \"data-element\": \"telemetry-report\" }, h(ReportComponent, { data: this.data, isLoading: this.isLoading, options: this.dataTransformOptions, reportTitle: this.reportTitle, subtitle: this.subtitle, titleTooltip: this.titleTooltip })));\n  }\n  get element() { return getElement(this); }\n  static get watchers() { return {\n    \"context\": [\"onRequestParamsChange\"],\n    \"startDate\": [\"onRequestParamsChange\"],\n    \"endDate\": [\"onRequestParamsChange\"],\n    \"telemetryEvent\": [\"onRequestParamsChange\"]\n  }; }\n};\n\nexport { ArcgisTelemetryReport as arcgis_telemetry_report };\n","/**\n * A util to debounce another function. It will return a function\n * that, as long as it continues to be invoked, will not be triggered\n * until the designated timeout has passed.\n */\nfunction debounce(fn, timeout = 300) {\n  let timeoutId;\n  return function (context, ...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn.apply(context, args), timeout);\n  };\n}\n\nexport { debounce as d };\n"],"names":["COMMON_TELEMETRY","ArcgisTelemetryReport","hostRef","registerInstance","this","telemetryContext","series","data","isLoading","_debouncedGetReportData","debounce","getReportData","seriesTransforms","requestParams","telemetryEvent","forEach","dimension","name","Object","assign","title","value","itemDimensionFilters","customDimensionFilters","contentId","hostname","any","isCustomEvent","buildSimpleDimensionFilters","dimensions","getDimensions","metric","getMetric","scope","startDate","endDate","timeDimension","category","orderBy","limit","dimensionFilters","metrics","length","_a","context","hubRequestOptions","telemetryEventToMetricMap","sessions","COMMON_METRICS","referrers","telemetryEventToDimensionsMap","providedDimensions","map","entry","commonDimensions","getTelemetryReport","requestOptions","then","response","catch","e","error","toString","finally","ReportComponent","type","h","Host","options","dataTransformOptions","reportTitle","subtitle","titleTooltip","getElement","fn","timeoutId","timeout","args","clearTimeout","setTimeout","apply"],"sourceRoot":""}