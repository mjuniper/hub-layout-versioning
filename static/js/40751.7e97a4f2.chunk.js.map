{"version":3,"file":"static/js/40751.7e97a4f2.chunk.js","mappings":"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","sources":["../node_modules/@esri/hub-components/dist/esm/arcgis-countdown.entry.js","../node_modules/@esri/hub-components/dist/esm/shareable-91b49717.js"],"sourcesContent":["import { r as registerInstance, h, g as getElement } from './index-0d95d9d4.js';\nimport { S as Shareable } from './shareable-91b49717.js';\nimport { i as intlManager } from './intl-manager-821aea3b.js';\nimport './index-4e91769f.js';\n\nconst CSS = {\n  header: \"header\",\n  title: \"title\",\n  countdown: \"countdown\",\n};\n\nconst arcgisCountdownCss = \":host{display:block}.countdown{display:flex}.countdown>div{display:flex;flex-direction:column;align-items:center;padding-right:1rem}.counter{font-size:var(--calcite-font-size-3);line-height:2rem}.unit{font-size:var(--calcite-font-size-1);line-height:1.5rem}\";\n\nconst ArcgisCountdown = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n    * Whether the card should render a share button\n    */\n    this.shareable = false;\n    this.shareableByValue = false;\n    this.shareableByReference = false;\n    this.shareableOnHover = false;\n  }\n  onCountdownDateChange(date) {\n    this.intervalId && this.cleanupCountdown(this.intervalId);\n    this.initializeCountdown(date);\n  }\n  async componentWillLoad() {\n    this.intl = await intlManager.loadIntlForComponent(this.element);\n  }\n  async componentDidLoad() {\n    this.countdownDate && this.initializeCountdown(this.countdownDate);\n  }\n  disconnectedCallback() {\n    this.cleanupCountdown(this.intervalId);\n  }\n  /**\n   * function to initialize the countdown timer\n   * and call the update function on a set interval\n   * (i.e. every 1 second)\n   *\n   * @param {string} countdownDate\n   */\n  initializeCountdown(countdownDate) {\n    this.updateCountdown(countdownDate);\n    this.intervalId = setInterval(this.updateCountdown.bind(this), 1000, countdownDate);\n  }\n  /**\n   * function to update the rendered countdown.\n   * Once the countdown has reached 0, the continuous\n   * interval is removed\n   *\n   * @param {string} countdownDate\n   */\n  updateCountdown(countdownDate) {\n    const t = this.getTimeRemaining(countdownDate);\n    this.days = t.days.toString();\n    this.hours = ('0' + t.hours).slice(-2);\n    this.minutes = ('0' + t.minutes).slice(-2);\n    this.seconds = ('0' + t.seconds).slice(-2);\n    if (t.total <= 0) {\n      this.cleanupCountdown(this.intervalId);\n    }\n  }\n  /**\n   * given a date string, this function returns the total and\n   * broken down time (days, hours, minutes, seconds) until\n   * the date is reached\n   *\n   * @param {string} countdownDate\n   * @returns {ITimeRemaining}\n   */\n  getTimeRemaining(countdownDate) {\n    // we need to set the time to 00:00:00.000 since we are only dealing with countdowns to a specific date\n    const formattedCountdownDate = `${new Date(countdownDate).toISOString().split('T').shift()}T00:00:00.000`;\n    const total = Date.parse(formattedCountdownDate) - Date.parse(new Date().toString());\n    const seconds = Math.floor((total / 1000) % 60);\n    const minutes = Math.floor((total / 1000 / 60) % 60);\n    const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n    const days = Math.floor(total / (1000 * 60 * 60 * 24));\n    return { total, days, hours, minutes, seconds };\n  }\n  /**\n   * function to cleanup an existing countdown by removing\n   * its continuous interval\n   *\n   * @param id countdown interval identifier\n   */\n  cleanupCountdown(id) {\n    clearInterval(id);\n  }\n  renderHeader(title) {\n    return h(\"div\", { class: CSS.header, slot: \"title\" }, title && h(\"h1\", { class: CSS.title }, title));\n  }\n  renderCountdown() {\n    return ['days', 'hours', 'minutes', 'seconds'].map(counter => {\n      return h(\"div\", null, h(\"span\", { class: `${counter} counter` }, this[counter]), h(\"div\", { class: \"unit\" }, this.intl.t(counter)));\n    });\n  }\n  renderError() {\n    return h(\"calcite-notice\", { active: true, color: \"red\", scale: \"m\", width: \"auto\" }, h(\"div\", { slot: \"title\" }, this.intl.t('countdownDateMissingError')));\n  }\n  render() {\n    return (this.countdownDate\n      ? h(Shareable, { context: this, showShareUi: true }, h(\"calcite-card\", null, this.renderHeader(this.cardTitle), h(\"div\", { class: CSS.countdown }, this.renderCountdown())))\n      : this.renderError());\n  }\n  static get assetsDirs() { return [\"locales\"]; }\n  get element() { return getElement(this); }\n  static get watchers() { return {\n    \"countdownDate\": [\"onCountdownDateChange\"]\n  }; }\n};\nArcgisCountdown.style = arcgisCountdownCss;\n\nexport { ArcgisCountdown as arcgis_countdown };\n","import { h } from './index-0d95d9d4.js';\n\n// export a functional component - this allows us to do <Sharing context={this}>...inner<Sharing>\nconst Shareable = ({ context, showShareUi }, children) => {\n  return h(\"arcgis-shareable-card\", { referenceElement: context.element, shareable: context.shareable, shareableByReference: context.shareableByReference, shareableByValue: context.shareableByValue, shareableOnHover: context.shareableOnHover, showShareUi: showShareUi }, children);\n};\n\nexport { Shareable as S };\n"],"names":["CSS","ArcgisCountdown","hostRef","registerInstance","this","shareable","shareableByValue","shareableByReference","shareableOnHover","date","intervalId","cleanupCountdown","initializeCountdown","intlManager","element","intl","countdownDate","updateCountdown","setInterval","bind","t","getTimeRemaining","days","toString","hours","slice","minutes","seconds","total","formattedCountdownDate","Date","toISOString","split","shift","parse","Math","floor","id","clearInterval","title","h","class","slot","map","counter","active","color","scale","width","Shareable","context","showShareUi","renderHeader","cardTitle","renderCountdown","renderError","getElement","style","children","referenceElement"],"sourceRoot":""}