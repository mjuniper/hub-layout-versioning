{"version":3,"file":"static/js/29315.1922150a.chunk.js","mappings":"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","sources":["../.yalc/@esri/hub-components/dist/esm/discussions-0e185b12.js","../.yalc/@esri/hub-components/dist/esm/get-859a2960.js","../.yalc/@esri/hub-components/dist/esm/update-fec93fc5.js"],"sourcesContent":["import { a as getUser } from './getPortalBaseFromOrgUrl-6a5781aa.js';\nimport { g as getGroup, a as getGroupUsers } from './get-859a2960.js';\nimport { a as getPortal } from './get-portal-06f7947b.js';\nimport { g as getFeature } from './query-15c2c6ed.js';\nimport { f as fetchContent } from './fetch-eff7ab83.js';\nimport { R as RemoteServerError$1, b as buildUrl } from './request-be948455.js';\nimport { p as parseDatasetId } from './slugs-150ad0db.js';\nimport { d as getLayerIdFromUrl } from './compose-cc2f466a.js';\nimport { g as getItem } from './get-f2cd18e7.js';\nimport { u as updateItem } from './update-fec93fc5.js';\nimport { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { r as request$1 } from './request-c15cc2af.js';\n\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { updateGroup } from '@esri/arcgis-rest-portal';\n * //\n * updateGroup({\n *   group: { id: \"fgr344\", title: \"new\" }\n * })\n *   .then(response)\n * ```\n * Update the properties of a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-group.htm) for more information.\n *\n * @param requestOptions - Options for the request, including the group\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nfunction updateGroup(requestOptions) {\n    var url = getPortalUrl(requestOptions) + \"/community/groups/\" + requestOptions.group.id + \"/update\";\n    requestOptions.params = __assign(__assign({}, requestOptions.params), requestOptions.group);\n    return request$1(url, requestOptions);\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest$2(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nclass RemoteServerError extends RemoteServerError$1 {\n    constructor(message, url, status, error) {\n        super(message, url, status);\n        this.error = error;\n    }\n}\n/**\n * returns Promise that resolves token to use in Discussions API requests\n *\n * @export\n * @param {IHubRequestOptions} options\n * @return {*}  {Promise<string>}\n */\nfunction authenticateRequest(options) {\n    const { token, authentication } = options;\n    let tokenPromise = () => {\n        return Promise.resolve(token);\n    };\n    if (authentication) {\n        tokenPromise = authentication.getToken.bind(authentication, authentication.portal);\n    }\n    return tokenPromise();\n}\n/**\n * parses IHubRequestOptions and makes request against Discussions API\n *\n * @export\n * @template T\n * @param {string} route\n * @param {IHubRequestOptions} options\n * @param {string} [token]\n * @return {*}  {Promise<T>}\n */\nfunction apiRequest(route, options, token) {\n    const headers = new Headers(options.headers);\n    headers.append(\"Content-Type\", \"application/json\");\n    if (token) {\n        headers.append(\"Authorization\", `Bearer ${token}`);\n    }\n    const opts = {\n        headers,\n        method: options.httpMethod || \"GET\",\n        mode: options.mode,\n        cache: options.cache,\n        credentials: options.credentials,\n    };\n    const apiBase = buildUrl({\n        // TODO: we _want_ to use getHubApiUrl(),\n        // but have to deal w/ the fact that this package overwrites IHubRequestOptions\n        host: options.hubApiUrl || \"https://hub.arcgis.com\",\n        path: \"/api/discussions/v1\",\n    });\n    if (options.params) {\n        if (options.httpMethod === \"GET\") {\n            const queryParams = new URLSearchParams(options.params).toString();\n            route += `?${queryParams}`;\n        }\n        else {\n            opts.body = JSON.stringify(options.params);\n        }\n    }\n    const url = [apiBase.replace(/\\/$/, \"\"), route.replace(/^\\//, \"\")].join(\"/\");\n    return fetch(url, opts).then((res) => {\n        if (res.ok) {\n            return res.json();\n        }\n        else {\n            const { statusText, status } = res;\n            return res.json().then((err) => {\n                throw new RemoteServerError(statusText, url, status, JSON.stringify(err.message));\n            });\n        }\n    });\n}\n\n/**\n * method that authenticates and makes requests to Discussions API\n *\n * @export\n * @template T\n * @param {string} url\n * @param {IHubRequestOptions} options\n * @return {*}  {Promise<T>}\n */\n// NOTE: feasibly this could be replaced with @esi/hub-common hubApiRequest,\n// if that method didn't prepend `/api/v3` to the supplied path. Additionally,\n// there is the difference that hubApiRequest sets Authorization header without `Bearer`\n// https://github.com/Esri/hub.js/blob/f35b1a0a868916bd07e1dfd84cb084bc2c876267/packages/common/src/request.ts#L62\nfunction request(url, options) {\n    return authenticateRequest(options).then(token => {\n        return apiRequest(url, options, token);\n    });\n}\n\n/**\n * search posts\n *\n * @export\n * @param {ISearchPostsOptions} options\n * @return {*}  {Promise<IPagedResponse<IPost>>}\n */\nfunction searchPosts(options) {\n    const url = `/posts`;\n    options.httpMethod = \"GET\";\n    return request(url, options);\n}\n/**\n * create post\n *\n * @export\n * @param {ICreatePostOptions} options\n * @return {*}  {Promise<IPost>}\n */\nfunction createPost(options) {\n    const url = `/posts`;\n    return request(url, Object.assign({ httpMethod: \"POST\" }, getCreateUpdateRequestOptions(options)));\n}\n/**\n * create reply to post\n *\n * @export\n * @param {ICreateReplyOptions} options\n * @return {*}  {Promise<IPost>}\n */\nfunction createReply(options) {\n    const url = `/posts/${options.postId}/reply`;\n    return request(url, Object.assign({ httpMethod: \"POST\" }, getCreateUpdateRequestOptions(options)));\n}\n/**\n * fetch post\n *\n * @export\n * @param {IFetchPostOptions} options\n * @return {*}  {Promise<IPost>}\n */\nfunction fetchPost(options) {\n    const url = `/posts/${options.postId}`;\n    options.httpMethod = \"GET\";\n    return request(url, options);\n}\n/**\n * remove post\n *\n * @export\n * @param {IRemovePostOptions} options\n * @return {*}  {Promise<IRemovePostResponse>}\n */\nfunction removePost(options) {\n    const url = `/posts/${options.postId}`;\n    options.httpMethod = \"DELETE\";\n    return request(url, options);\n}\n/**\n * update post\n * NOTE: this method currently only update post.title and post.body\n *\n * @export\n * @param {IUpdatePostOptions} options\n * @return {*}  {Promise<IPost>}\n */\nfunction updatePost(options) {\n    const url = `/posts/${options.postId}`;\n    return request(url, Object.assign({ httpMethod: \"PATCH\" }, getCreateUpdateRequestOptions(options)));\n}\n/**\n * Builds the necessary request options for post/reply create/update requests\n * @param mentionUrl\n */\nfunction getCreateUpdateRequestOptions(options) {\n    const { mentionUrl } = options, requestOptions = __rest$2(options, [\"mentionUrl\"]);\n    if (mentionUrl) {\n        requestOptions.headers = Object.assign(Object.assign({}, requestOptions.headers), { \"mention-url\": mentionUrl });\n    }\n    return requestOptions;\n}\n\n/**\n * search channels\n *\n * @export\n * @param {ISearchChannelsOptions} options\n * @return {*}  {Promise<IPagedResponse<IChannel>>}\n */\nfunction searchChannels(options) {\n    options.httpMethod = \"GET\";\n    return request(`/channels`, options);\n}\n/**\n * fetch channel\n *\n * @export\n * @param {IFetchChannelOptions} options\n * @return {*}  {Promise<IChannel>}\n */\nfunction fetchChannel(options) {\n    options.httpMethod = \"GET\";\n    return request(`/channels/${options.channelId}`, options);\n}\n/**\n * update channel\n * NOTE: only updates channel settings properties (softDelete, allowedReactions, etc). A Channel's\n * access and groups cannot be updated.\n *\n * @export\n * @param {IUpdateChannelOptions} options\n * @return {*}  {Promise<IChannel>}\n */\nfunction updateChannel(options) {\n    options.httpMethod = \"PATCH\";\n    return request(`/channels/${options.channelId}`, options);\n}\n/**\n * get channel opt out status\n *\n * @export\n * @param {IFetchChannelNotificationOptOutOptions} options\n * @return {*}\n */\nfunction fetchChannelNotifcationOptOut(options) {\n    options.httpMethod = \"GET\";\n    return request(`/channels/${options.channelId}/notifications/opt-out`, options);\n}\n/**\n * opt out of channel notifs\n *\n * @export\n * @param {ICreateChannelNotificationOptOutOptions} options\n * @return {*}\n */\nfunction createChannelNotificationOptOut(options) {\n    options.httpMethod = \"POST\";\n    return request(`/channels/${options.channelId}/notifications/opt-out`, options);\n}\n/**\n * opt in to channel notifs\n *\n * @export\n * @param {IRemoveChannelNotificationOptOutOptions} options\n * @return {*}\n */\nfunction removeChannelNotificationOptOut(options) {\n    options.httpMethod = \"DELETE\";\n    return request(`/channels/${options.channelId}/notifications/opt-out`, options);\n}\n/**\n * remove all posts in a channel\n *\n * @export\n * @param {IRemoveChannelActivityOptions} options\n * @return {*}\n */\nfunction removeChannelActivity(options) {\n    options.httpMethod = \"DELETE\";\n    return request(`/channels/${options.channelId}/activity`, options);\n}\n\n/**\n * sort orders\n *\n * @export\n * @enum {string}\n */\nvar SortOrder;\n(function (SortOrder) {\n    SortOrder[\"ASC\"] = \"ASC\";\n    SortOrder[\"DESC\"] = \"DESC\";\n})(SortOrder || (SortOrder = {}));\n/**\n * reactions to posts\n *\n * @export\n * @enum {string}\n */\nvar PostReaction;\n(function (PostReaction) {\n    PostReaction[\"THUMBS_UP\"] = \"thumbs_up\";\n    PostReaction[\"THUMBS_DOWN\"] = \"thumbs_down\";\n    PostReaction[\"THINKING\"] = \"thinking\";\n    PostReaction[\"HEART\"] = \"heart\";\n    PostReaction[\"ONE_HUNDRED\"] = \"one_hundred\";\n    PostReaction[\"SAD\"] = \"sad\";\n    PostReaction[\"LAUGH\"] = \"laugh\";\n    PostReaction[\"SURPRISED\"] = \"surprised\";\n})(PostReaction || (PostReaction = {}));\n/**\n * platform sharing access values\n *\n * @export\n * @enum {string}\n */\nvar SharingAccess;\n(function (SharingAccess) {\n    SharingAccess[\"PUBLIC\"] = \"public\";\n    SharingAccess[\"ORG\"] = \"org\";\n    SharingAccess[\"PRIVATE\"] = \"private\";\n})(SharingAccess || (SharingAccess = {}));\n/**\n * possible statuses of a post\n *\n * @export\n * @enum {string}\n */\nvar PostStatus;\n(function (PostStatus) {\n    PostStatus[\"PENDING\"] = \"pending\";\n    PostStatus[\"APPROVED\"] = \"approved\";\n    PostStatus[\"REJECTED\"] = \"rejected\";\n    PostStatus[\"DELETED\"] = \"deleted\";\n    PostStatus[\"HIDDEN\"] = \"hidden\";\n})(PostStatus || (PostStatus = {}));\n/**\n * possible discussionn content types, i.e. a post can be about an item, dataset, or group\n *\n * @export\n * @enum {string}\n */\nvar DiscussionType;\n(function (DiscussionType) {\n    DiscussionType[\"GROUP\"] = \"group\";\n    DiscussionType[\"CONTENT\"] = \"content\";\n})(DiscussionType || (DiscussionType = {}));\n/**\n * source of a post, i.e. app context\n *\n * @export\n * @enum {string}\n */\nvar DiscussionSource;\n(function (DiscussionSource) {\n    DiscussionSource[\"HUB\"] = \"hub\";\n    DiscussionSource[\"AGO\"] = \"ago\";\n    DiscussionSource[\"URBAN\"] = \"urban\";\n})(DiscussionSource || (DiscussionSource = {}));\n/**\n * relations of post entity\n *\n * @export\n * @enum {string}\n */\nvar PostRelation;\n(function (PostRelation) {\n    PostRelation[\"REPLIES\"] = \"replies\";\n    PostRelation[\"REACTIONS\"] = \"reactions\";\n    PostRelation[\"PARENT\"] = \"parent\";\n    PostRelation[\"CHANNEL\"] = \"channel\";\n})(PostRelation || (PostRelation = {}));\n/**\n * relations of channel entity\n *\n * @export\n * @enum {string}\n */\nvar ChannelRelation;\n(function (ChannelRelation) {\n    ChannelRelation[\"SETTINGS\"] = \"settings\";\n})(ChannelRelation || (ChannelRelation = {}));\n/**\n * relations of reaction entity\n *\n * @export\n * @enum {string}\n */\nvar ReactionRelation;\n(function (ReactionRelation) {\n    ReactionRelation[\"POST\"] = \"post\";\n})(ReactionRelation || (ReactionRelation = {}));\n/**\n * filters of channel entity\n *\n * @export\n * @enum {string}\n */\nvar ChannelFilter;\n(function (ChannelFilter) {\n    ChannelFilter[\"HAS_USER_POSTS\"] = \"has_user_posts\";\n})(ChannelFilter || (ChannelFilter = {}));\n// sorting\n/**\n * Common sorting fields\n */\nvar CommonSort;\n(function (CommonSort) {\n    CommonSort[\"CREATED_AT\"] = \"createdAt\";\n    CommonSort[\"CREATOR\"] = \"creator\";\n    CommonSort[\"EDITOR\"] = \"editor\";\n    CommonSort[\"ID\"] = \"id\";\n    CommonSort[\"UPDATED_AT\"] = \"updatedAt\";\n})(CommonSort || (CommonSort = {}));\n/**\n * Channel sorting fields\n *\n * @enum {string}\n */\nvar ChannelSort;\n(function (ChannelSort) {\n    ChannelSort[\"ACCESS\"] = \"access\";\n    ChannelSort[\"CREATED_AT\"] = \"createdAt\";\n    ChannelSort[\"CREATOR\"] = \"creator\";\n    ChannelSort[\"EDITOR\"] = \"editor\";\n    ChannelSort[\"ID\"] = \"id\";\n    ChannelSort[\"LAST_ACTIVITY\"] = \"last_activity\";\n    ChannelSort[\"UPDATED_AT\"] = \"updatedAt\";\n})(ChannelSort || (ChannelSort = {}));\n/**\n * Post sorting fields\n *\n * @enum {string}\n */\nvar PostSort;\n(function (PostSort) {\n    PostSort[\"BODY\"] = \"body\";\n    PostSort[\"CHANNEL_ID\"] = \"channelId\";\n    PostSort[\"CREATED_AT\"] = \"createdAt\";\n    PostSort[\"CREATOR\"] = \"creator\";\n    PostSort[\"DISCUSSION\"] = \"discussion\";\n    PostSort[\"EDITOR\"] = \"editor\";\n    PostSort[\"ID\"] = \"id\";\n    PostSort[\"PARENT_ID\"] = \"parentId\";\n    PostSort[\"STATUS\"] = \"status\";\n    PostSort[\"TITLE\"] = \"title\";\n    PostSort[\"UPDATED_AT\"] = \"updatedAt\";\n})(PostSort || (PostSort = {}));\n/**\n * Role types\n *\n * @export\n * @enum {string}\n */\nvar Role;\n(function (Role) {\n    Role[\"READ\"] = \"read\";\n    Role[\"WRITE\"] = \"write\";\n    Role[\"READWRITE\"] = \"readWrite\";\n    Role[\"MODERATE\"] = \"moderate\";\n    Role[\"MANAGE\"] = \"manage\";\n    Role[\"OWNER\"] = \"owner\";\n})(Role || (Role = {}));\n\n/**\n * Utility that returns reducer function that filters a user's groups\n * by membership type and produces an array of group id's\n *\n *\n * @export\n * @param {GroupMembership[]} membershipTypes\n * @return {*}  {((memo: string[], group: IGroup) => string[])}\n */\nfunction reduceByGroupMembership(membershipTypes) {\n    return function (memo, group) {\n        if (membershipTypes.indexOf(group.userMembership.memberType) > -1) {\n            memo.push(group.id);\n        }\n        return memo;\n    };\n}\n/**\n * Utility that checks if a user is a portal org admin (default role)\n *\n * @export\n * @param {IUser} user\n * @return {*}  {boolean}\n */\n// NOTE: this is not the same as @esri/arcgis-rest-portal isOrgAdmin,\n// which first resolves `user` from `IUserRequestOptions` to make this determination\n// https://github.com/Esri/arcgis-rest-js/blob/7ab072184f89dcb35367518101ee4abeb5a9d112/packages/arcgis-rest-portal/src/sharing/helpers.ts#L45\nfunction isOrgAdmin(user) {\n    return user.role === \"org_admin\" && !user.roleId;\n}\n\nconst CANNOT_DISCUSS = \"cannotDiscuss\";\nconst MENTION_ATTRIBUTE = \"data-mention\";\n\nfunction intersectGroups(membershipTypes, strict) {\n    return (user, channel) => {\n        const { groups: sharedGroups } = channel;\n        const { groups: userGroups } = user;\n        const eligibleUserGroups = userGroups.reduce(reduceByGroupMembership(membershipTypes), []);\n        const method = strict ? \"every\" : \"some\";\n        return sharedGroups[method]((group) => eligibleUserGroups.indexOf(group) > -1);\n    };\n}\nfunction isChannelOrgAdmin(channel, user) {\n    return isOrgAdmin(user) && channel.orgs.indexOf(user.orgId) > -1;\n}\n/**\n * Utility to determine whether User can modify channel settings and posts belonging to Channel\n *\n * @export\n * @param {IChannel} channel\n * @param {IUser} user\n * @return {*}  {boolean}\n */\nfunction canModifyChannel(channel, user) {\n    if (channel.creator === user.username) {\n        return true;\n    }\n    if (channel.access === \"private\") {\n        // ensure user is owner/admin of at least one group\n        return intersectGroups([\"owner\", \"admin\"])(user, channel);\n    }\n    // if org or public channel, must be org admin\n    return isChannelOrgAdmin(channel, user);\n}\n\n/**\n * Utility that parses a discussion URI string into its component parts\n *\n * @export\n * @param {string} discussion A discussion URI\n * @return {string}\n */\nfunction parseDiscussionURI(discussion) {\n    let url;\n    try {\n        url = new URL(discussion);\n    }\n    catch (e) {\n        throw new Error(`Invalid URI: ${discussion}`);\n    }\n    const source = url.protocol.replace(\":\", \"\");\n    const [, pathname] = discussion.split(\"://\");\n    const [type, identifier] = pathname.split(\"/\");\n    let id;\n    let layer;\n    if (identifier) {\n        const { itemId, layerId } = parseDatasetId(identifier);\n        [id, layer] = [itemId, layerId];\n    }\n    const searchParams = new URLSearchParams(url.search.replace(\"?\", \"\"));\n    const features = (searchParams.has(\"id\") && searchParams.get(\"id\").split(\",\")) || null;\n    const attribute = (searchParams.has(\"attribute\") && searchParams.get(\"attribute\")) || null;\n    return {\n        source,\n        type,\n        id: id || null,\n        layer: layer || null,\n        features,\n        attribute,\n    };\n}\n/**\n * Utility to determine if a given IGroup, IItem or IHubContent\n * is discussable.\n * @export\n * @param {IGroup|IItem|IHubContent} The subject to evaluate\n * @return {boolean}\n */\nfunction isDiscussable(subject) {\n    var _a;\n    return !((_a = subject.typeKeywords) !== null && _a !== void 0 ? _a : []).includes(CANNOT_DISCUSS);\n}\n/**\n * Determines if the given user has sufficient privileges to modify a post's editable attributes\n * @param post An IPost object\n * @param channel An IChannel object\n * @param user An IUser object\n * @returns true if the user can modify the post\n */\nfunction canModifyPost(post, user) {\n    return post.creator === user.username;\n}\n/**\n * Determines if the given user has sufficient privileges to delete the given post\n * @param post An IPost object\n * @param channel An IChannel object\n * @param user An IUser object\n * @returns true if the user can delete the post\n */\nfunction canDeletePost(post, channel, user) {\n    return canModifyPost(post, user) || canModifyChannel(channel, user);\n}\nconst MENTION_ATTRIBUTE_AND_VALUE_PATTERN = new RegExp(`${MENTION_ATTRIBUTE}=('|\")(\\\\w)+('|\")`, \"g\");\nconst MENTION_ATTRIBUTE_PATTERN = new RegExp(`${MENTION_ATTRIBUTE}=`, \"g\");\nconst NON_WORDS_PATTERN = new RegExp(\"[^\\\\w]\", \"g\");\n/**\n * Parses mentioned users\n * @param text A string to parse mentioned users from\n * @returns A unique collection of usernames parsed from the provided text\n */\nfunction parseMentionedUsers(text = \"\") {\n    const toReplaced = (input, pattern) => input.replace(pattern, \"\");\n    const toMentionedUsers = (acc, match) => {\n        const username = [MENTION_ATTRIBUTE_PATTERN, NON_WORDS_PATTERN].reduce(toReplaced, match);\n        return acc.indexOf(username) < 0 ? [...acc, username] : acc;\n    };\n    const matches = text.match(MENTION_ATTRIBUTE_AND_VALUE_PATTERN) || [];\n    return matches.reduce(toMentionedUsers, []);\n}\n\n/**\n * Get a team by id\n * @param {string} id group id\n * @param {IRequestOptions} hubRequestOptions\n * @returns {Promise<IGroup>}\n */\nfunction getTeamById(id, hubRequestOptions) {\n    return getGroup(id, hubRequestOptions);\n}\n\n/**\n * The cache\n */\nconst _cache = new Map();\n/**\n * A utility method to augment a method with caching behavior\n *\n * @param fn The function to augment\n * @param params An ICacheParams object\n * @returns The cache decorator function\n */\nfunction cache(fn, params = {}) {\n  const { scope = 'default', // defaults to `default` cache scope\n  getKey = (...[first]) => first, // defaults to first method argument\n  ttl = 0 // defaults to indefinite caching,\n   } = params;\n  if (!scope || typeof scope !== 'string') {\n    throw new TypeError('must provide a valid cache scope');\n  }\n  if (ttl && (typeof ttl !== 'number' || ttl < 0)) {\n    throw new TypeError('ttl must be a number greater than or equal to zero');\n  }\n  if (typeof getKey !== 'function') {\n    throw new TypeError('getKey must be a function');\n  }\n  /**\n   * A function that wraps a functions implementation\n   * with caching behavior.\n   *\n   * @remarks\n   *\n   * We could utilize the [Cache Web API](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to do request-level caching, but it\n   * requires event assignment and garbage collection which would be more\n   * appropriately handled in component lifecycle methods. Stencil does not\n   * currently support class-level decorators or class inheritiance, but\n   * [Stencil.js issue #2921](https://github.com/ionic-team/stencil/pull/2921) proposes adding a `Mixin` decorator that would\n   * allow similar compositional patterns. If the `Mixin` decorator comes to\n   * fruition, we can revisit this client caching strategy.\n   *\n   * @param args An array of method arguments\n   * @returns A cached result\n   */\n  return function (...rawArgs) {\n    let args;\n    try {\n      const [lastArg, ...restArgsReversed] = [...rawArgs].reverse();\n      const [key, ...restKeys] = Object.keys(lastArg);\n      const isCacheArg = key === 'bust' && !restKeys.length;\n      if (!isCacheArg) {\n        throw new Error('No cache arg provided');\n      }\n      args = restArgsReversed.reverse();\n    }\n    catch (e) {\n      args = rawArgs;\n    }\n    const { context = this } = params;\n    let scopeMap = _cache.get(scope);\n    // when the scope doesn't already exist\n    if (!scopeMap) {\n      // create it\n      scopeMap = new Map();\n      _cache.set(scope, scopeMap);\n    }\n    // derive the cache key\n    const key = getKey.apply(context, args);\n    if (!key || typeof key !== 'string') {\n      throw new Error('getKey must return a string');\n    }\n    // check for hits in the cache if bust param not received\n    let cacheResult = rawArgs.length === args.length\n      ? scopeMap.get(key)\n      : undefined;\n    const now = Date.now();\n    // if no hits in the cache for the key OR the ttl is > 0\n    // and the ttl has expired\n    if (!cacheResult || (ttl && now > cacheResult.created + ttl)) {\n      // create a new cache result\n      cacheResult = {\n        created: now,\n        result: fn.apply(context, args)\n      };\n      scopeMap.set(key, cacheResult);\n    }\n    return cacheResult.result;\n  };\n}\n\n/**\n * A function to fetch a cached user record. If no hits\n * in the cache, it will request the user via XHR\n * @param username A username\n * @returns a promise that resolves a user\n */\nconst fetchMemberFromCache = cache((username, hubRequestOptions) => \n// note: it's considered bad practice to call from the REST API directly, but getMembers() is insufficient for our needs.\ngetUser(Object.assign({ username }, hubRequestOptions)), { scope: 'users' });\n\nvar __rest$1 = (undefined && undefined.__rest) || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n    t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n        t[p[i]] = s[p[i]];\n    }\n  return t;\n};\n/**\n * A function to fetch a cached group record. If no hits\n * in the cache, it will request the group via XHR\n * @param id A group id\n * @param hubRequestOptions An IHubRequestOptions object\n * @returns a promise that resolves a group\n */\nconst fetchTeamFromCache = cache(getTeamById, {\n  scope: 'teams',\n  ttl: 5 * 1000\n});\n/**\n * @param id A group id\n * @param requestOptions an IHubRequestOptions object\n * @returns a promise that resolves an IGroupUsersResult object\n */\nconst fetchTeamMembersFromCache = cache(getGroupUsers, { scope: 'teamMembers' });\n/**\n * A function to search group members, excluding the current user\n *\n * AGO API does not return results whose username matches the `name` parameter value,\n * so we must obtain the results by performing n+ queries for each\n * result of the getGroupUsers request. we cache to improve performance\n * @param options An ISearchGroupOtherUsersOptions object\n */\nasync function searchOtherTeamMembers(options) {\n  const { id, currentUser, query } = options, hubRequestOptions = __rest$1(options, [\"id\", \"currentUser\", \"query\"]);\n  const { owner, admins, users: members } = await fetchTeamMembersFromCache(id, hubRequestOptions);\n  const byUniqueNotCurrentUser = (username, idx, arr) => username !== currentUser.username && arr.indexOf(username) === idx;\n  const uniqueMembers = [owner, ...admins, ...members].filter(byUniqueNotCurrentUser);\n  const users = await Promise.all(uniqueMembers.map(username => fetchMemberFromCache(username, hubRequestOptions)));\n  const byUsernameOrFullName = (user) => user.username.includes(query) || user.fullName.includes(query);\n  return users.filter(byUsernameOrFullName);\n}\n\n/**\n * A function to fetch a cached organization record. If no hits\n * in the cache, it will request the organization via XHR\n * @param orgId An organization ID\n * @returns a promise that resolves an organization\n */\nconst fetchPortalFromCache = cache((orgId, hubRequestOptions) => \n// note: it's considered bad practice to call from the REST API directly, but hub.js functions are insufficient for our needs.\ngetPortal(orgId, hubRequestOptions), { scope: 'orgs' });\n\n/* @preserve\n* @terraformer/arcgis - v2.0.7 - MIT\n* Copyright (c) 2012-2021 Environmental Systems Research Institute, Inc.\n* Thu Jul 22 2021 13:58:30 GMT-0700 (Pacific Daylight Time)\n*/\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nvar edgeIntersectsEdge = function edgeIntersectsEdge(a1, a2, b1, b2) {\n  var uaT = (b2[0] - b1[0]) * (a1[1] - b1[1]) - (b2[1] - b1[1]) * (a1[0] - b1[0]);\n  var ubT = (a2[0] - a1[0]) * (a1[1] - b1[1]) - (a2[1] - a1[1]) * (a1[0] - b1[0]);\n  var uB = (b2[1] - b1[1]) * (a2[0] - a1[0]) - (b2[0] - b1[0]) * (a2[1] - a1[1]);\n\n  if (uB !== 0) {\n    var ua = uaT / uB;\n    var ub = ubT / uB;\n\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\nvar coordinatesContainPoint = function coordinatesContainPoint(coordinates, point) {\n  var contains = false;\n\n  for (var i = -1, l = coordinates.length, j = l - 1; ++i < l; j = i) {\n    if ((coordinates[i][1] <= point[1] && point[1] < coordinates[j][1] || coordinates[j][1] <= point[1] && point[1] < coordinates[i][1]) && point[0] < (coordinates[j][0] - coordinates[i][0]) * (point[1] - coordinates[i][1]) / (coordinates[j][1] - coordinates[i][1]) + coordinates[i][0]) {\n      contains = !contains;\n    }\n  }\n\n  return contains;\n};\nvar pointsEqual = function pointsEqual(a, b) {\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\nvar arrayIntersectsArray = function arrayIntersectsArray(a, b) {\n  for (var i = 0; i < a.length - 1; i++) {\n    for (var j = 0; j < b.length - 1; j++) {\n      if (edgeIntersectsEdge(a[i], a[i + 1], b[j], b[j + 1])) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nvar closeRing = function closeRing(coordinates) {\n  if (!pointsEqual(coordinates[0], coordinates[coordinates.length - 1])) {\n    coordinates.push(coordinates[0]);\n  }\n\n  return coordinates;\n}; // determine if polygon ring coordinates are clockwise. clockwise signifies outer ring, counter-clockwise an inner ring\n// or hole. this logic was found at http://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-\n// points-are-in-clockwise-order\n\nvar ringIsClockwise = function ringIsClockwise(ringToTest) {\n  var total = 0;\n  var i = 0;\n  var rLength = ringToTest.length;\n  var pt1 = ringToTest[i];\n  var pt2;\n\n  for (i; i < rLength - 1; i++) {\n    pt2 = ringToTest[i + 1];\n    total += (pt2[0] - pt1[0]) * (pt2[1] + pt1[1]);\n    pt1 = pt2;\n  }\n\n  return total >= 0;\n}; // This function ensures that rings are oriented in the right directions\n// from http://jsperf.com/cloning-an-object/2\n\nvar shallowClone = function shallowClone(obj) {\n  var target = {};\n\n  for (var i in obj) {\n    // both arcgis attributes and geojson props are just hardcoded keys\n    if (obj.hasOwnProperty(i)) {\n      // eslint-disable-line no-prototype-builtins\n      target[i] = obj[i];\n    }\n  }\n\n  return target;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nvar coordinatesContainCoordinates = function coordinatesContainCoordinates(outer, inner) {\n  var intersects = arrayIntersectsArray(outer, inner);\n  var contains = coordinatesContainPoint(outer, inner[0]);\n\n  if (!intersects && contains) {\n    return true;\n  }\n\n  return false;\n}; // do any polygons in this array contain any other polygons in this array?\n// used for checking for holes in arcgis rings\n\n\nvar convertRingsToGeoJSON = function convertRingsToGeoJSON(rings) {\n  var outerRings = [];\n  var holes = [];\n  var x; // iterator\n\n  var outerRing; // current outer ring being evaluated\n\n  var hole; // current hole being evaluated\n  // for each ring\n\n  for (var r = 0; r < rings.length; r++) {\n    var ring = closeRing(rings[r].slice(0));\n\n    if (ring.length < 4) {\n      continue;\n    } // is this ring an outer ring? is it clockwise?\n\n\n    if (ringIsClockwise(ring)) {\n      var polygon = [ring.slice().reverse()]; // wind outer rings counterclockwise for RFC 7946 compliance\n\n      outerRings.push(polygon); // push to outer rings\n    } else {\n      holes.push(ring.slice().reverse()); // wind inner rings clockwise for RFC 7946 compliance\n    }\n  }\n\n  var uncontainedHoles = []; // while there are holes left...\n\n  while (holes.length) {\n    // pop a hole off out stack\n    hole = holes.pop(); // loop over all outer rings and see if they contain our hole.\n\n    var contained = false;\n\n    for (x = outerRings.length - 1; x >= 0; x--) {\n      outerRing = outerRings[x][0];\n\n      if (coordinatesContainCoordinates(outerRing, hole)) {\n        // the hole is contained push it into our polygon\n        outerRings[x].push(hole);\n        contained = true;\n        break;\n      }\n    } // ring is not contained in any outer ring\n    // sometimes this happens https://github.com/Esri/esri-leaflet/issues/320\n\n\n    if (!contained) {\n      uncontainedHoles.push(hole);\n    }\n  } // if we couldn't match any holes using contains we can try intersects...\n\n\n  while (uncontainedHoles.length) {\n    // pop a hole off out stack\n    hole = uncontainedHoles.pop(); // loop over all outer rings and see if any intersect our hole.\n\n    var intersects = false;\n\n    for (x = outerRings.length - 1; x >= 0; x--) {\n      outerRing = outerRings[x][0];\n\n      if (arrayIntersectsArray(outerRing, hole)) {\n        // the hole is contained push it into our polygon\n        outerRings[x].push(hole);\n        intersects = true;\n        break;\n      }\n    }\n\n    if (!intersects) {\n      outerRings.push([hole.reverse()]);\n    }\n  }\n\n  if (outerRings.length === 1) {\n    return {\n      type: 'Polygon',\n      coordinates: outerRings[0]\n    };\n  } else {\n    return {\n      type: 'MultiPolygon',\n      coordinates: outerRings\n    };\n  }\n};\n\nvar getId = function getId(attributes, idAttribute) {\n  var keys = idAttribute ? [idAttribute, 'OBJECTID', 'FID'] : ['OBJECTID', 'FID'];\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    if (key in attributes && (typeof attributes[key] === 'string' || typeof attributes[key] === 'number')) {\n      return attributes[key];\n    }\n  }\n\n  throw Error('No valid id attribute found');\n};\n\nvar arcgisToGeoJSON = function arcgisToGeoJSON(arcgis, idAttribute) {\n  var geojson = {};\n\n  if (arcgis.features) {\n    geojson.type = 'FeatureCollection';\n    geojson.features = [];\n\n    for (var i = 0; i < arcgis.features.length; i++) {\n      geojson.features.push(arcgisToGeoJSON(arcgis.features[i], idAttribute));\n    }\n  }\n\n  if (typeof arcgis.x === 'number' && typeof arcgis.y === 'number') {\n    geojson.type = 'Point';\n    geojson.coordinates = [arcgis.x, arcgis.y];\n\n    if (typeof arcgis.z === 'number') {\n      geojson.coordinates.push(arcgis.z);\n    }\n  }\n\n  if (arcgis.points) {\n    geojson.type = 'MultiPoint';\n    geojson.coordinates = arcgis.points.slice(0);\n  }\n\n  if (arcgis.paths) {\n    if (arcgis.paths.length === 1) {\n      geojson.type = 'LineString';\n      geojson.coordinates = arcgis.paths[0].slice(0);\n    } else {\n      geojson.type = 'MultiLineString';\n      geojson.coordinates = arcgis.paths.slice(0);\n    }\n  }\n\n  if (arcgis.rings) {\n    geojson = convertRingsToGeoJSON(arcgis.rings.slice(0));\n  }\n\n  if (typeof arcgis.xmin === 'number' && typeof arcgis.ymin === 'number' && typeof arcgis.xmax === 'number' && typeof arcgis.ymax === 'number') {\n    geojson.type = 'Polygon';\n    geojson.coordinates = [[[arcgis.xmax, arcgis.ymax], [arcgis.xmin, arcgis.ymax], [arcgis.xmin, arcgis.ymin], [arcgis.xmax, arcgis.ymin], [arcgis.xmax, arcgis.ymax]]];\n  }\n\n  if (arcgis.geometry || arcgis.attributes) {\n    geojson.type = 'Feature';\n    geojson.geometry = arcgis.geometry ? arcgisToGeoJSON(arcgis.geometry) : null;\n    geojson.properties = arcgis.attributes ? shallowClone(arcgis.attributes) : null;\n\n    if (arcgis.attributes) {\n      try {\n        geojson.id = getId(arcgis.attributes, idAttribute);\n      } catch (err) {// don't set an id\n      }\n    }\n  } // if no valid geometry was encountered\n\n\n  if (JSON.stringify(geojson.geometry) === JSON.stringify({})) {\n    geojson.geometry = null;\n  }\n\n  if (arcgis.spatialReference && arcgis.spatialReference.wkid && arcgis.spatialReference.wkid !== 4326) {\n    console.warn('Object converted in non-standard crs - ' + JSON.stringify(arcgis.spatialReference));\n  }\n\n  return geojson;\n};\n\n/* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n// outer rings are clockwise, holes are counterclockwise\n// used for converting GeoJSON Polygons to ArcGIS Polygons\n\nvar orientRings = function orientRings(poly) {\n  var output = [];\n  var polygon = poly.slice(0);\n  var outerRing = closeRing(polygon.shift().slice(0));\n\n  if (outerRing.length >= 4) {\n    if (!ringIsClockwise(outerRing)) {\n      outerRing.reverse();\n    }\n\n    output.push(outerRing);\n\n    for (var i = 0; i < polygon.length; i++) {\n      var hole = closeRing(polygon[i].slice(0));\n\n      if (hole.length >= 4) {\n        if (ringIsClockwise(hole)) {\n          hole.reverse();\n        }\n\n        output.push(hole);\n      }\n    }\n  }\n\n  return output;\n}; // This function flattens holes in multipolygons to one array of polygons\n// used for converting GeoJSON Polygons to ArcGIS Polygons\n\n\nvar flattenMultiPolygonRings = function flattenMultiPolygonRings(rings) {\n  var output = [];\n\n  for (var i = 0; i < rings.length; i++) {\n    var polygon = orientRings(rings[i]);\n\n    for (var x = polygon.length - 1; x >= 0; x--) {\n      var ring = polygon[x].slice(0);\n      output.push(ring);\n    }\n  }\n\n  return output;\n};\n\nvar geojsonToArcGIS = function geojsonToArcGIS(geojson, idAttribute) {\n  idAttribute = idAttribute || 'OBJECTID';\n  var spatialReference = {\n    wkid: 4326\n  };\n  var result = {};\n  var i;\n\n  switch (geojson.type) {\n    case 'Point':\n      result.x = geojson.coordinates[0];\n      result.y = geojson.coordinates[1];\n\n      if (geojson.coordinates[2]) {\n        result.z = geojson.coordinates[2];\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'MultiPoint':\n      result.points = geojson.coordinates.slice(0);\n\n      if (geojson.coordinates[0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'LineString':\n      result.paths = [geojson.coordinates.slice(0)];\n\n      if (geojson.coordinates[0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'MultiLineString':\n      result.paths = geojson.coordinates.slice(0);\n\n      if (geojson.coordinates[0][0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'Polygon':\n      result.rings = orientRings(geojson.coordinates.slice(0));\n\n      if (geojson.coordinates[0][0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'MultiPolygon':\n      result.rings = flattenMultiPolygonRings(geojson.coordinates.slice(0));\n\n      if (geojson.coordinates[0][0][0][2]) {\n        result.hasZ = true;\n      }\n\n      result.spatialReference = spatialReference;\n      break;\n\n    case 'Feature':\n      if (geojson.geometry) {\n        result.geometry = geojsonToArcGIS(geojson.geometry, idAttribute);\n      }\n\n      result.attributes = geojson.properties ? shallowClone(geojson.properties) : {};\n\n      if (geojson.id) {\n        result.attributes[idAttribute] = geojson.id;\n      }\n\n      break;\n\n    case 'FeatureCollection':\n      result = [];\n\n      for (i = 0; i < geojson.features.length; i++) {\n        result.push(geojsonToArcGIS(geojson.features[i], idAttribute));\n      }\n\n      break;\n\n    case 'GeometryCollection':\n      result = [];\n\n      for (i = 0; i < geojson.geometries.length; i++) {\n        result.push(geojsonToArcGIS(geojson.geometries[i], idAttribute));\n      }\n\n      break;\n  }\n\n  return result;\n};\n\n// TODO: split fns, with their param interfaces, into separate files for fn.\n// TODO: move remaining, common interfaces into components/arcgis-hub-discussions/types.ts\n// TODO: move constants into components/arcgis-hub-discussions/constants.ts\n// TODO: delete this file\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n    t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n        t[p[i]] = s[p[i]];\n    }\n  return t;\n};\n/**\n * Max post and reply title length\n */\nconst MAX_TITLE_LENGTH = 50;\n/**\n * Max post and reply body length\n */\nconst MAX_BODY_LENGTH = 512;\n/**\n * Warning post and reply body lengh\n */\nconst WARNING_BODY_LENGTH = MAX_BODY_LENGTH - 37;\n/**\n * Enriches a post or reply details\n * @param options An Object of options, extends IHubRequestOptions\n * @param options.post An IPost object\n * @returns a promise that resolves an IPostDetails\n */\nasync function enrichPostDetails(options) {\n  var _a;\n  var _b;\n  const { postDetails, includeReplyCount } = options, hubRequestOptions = __rest(options, [\"postDetails\", \"includeReplyCount\"]);\n  if (!postDetails) {\n    throw new Error('Must provide postDetails object');\n  }\n  let { postId, post } = postDetails;\n  let creator = null;\n  let organization = null;\n  let mentionedUsers = [];\n  if (!post) {\n    try {\n      let replies;\n      const params = includeReplyCount\n        ? { relations: [PostRelation.REPLIES] }\n        : {};\n      // eslint-disable-next-line prefer-const\n      (_a = await fetchPost(Object.assign({ postId,\n        params }, hubRequestOptions)), { replies } = _a, post = __rest(_a, [\"replies\"]));\n      postId = post.id;\n      if (replies) {\n        post.replyCount = replies.total;\n      }\n    }\n    catch (err) {\n      console.warn(`Failed to fetch post ${postId}`);\n      post = null;\n    }\n  }\n  if (post) {\n    if (includeReplyCount && post.replyCount === undefined) {\n      try {\n        const { total } = await searchPosts(Object.assign({ params: {\n            start: 1,\n            num: 1,\n            parents: post.id\n          } }, hubRequestOptions));\n        post.replyCount = total;\n      }\n      catch (e) {\n        console.warn(`Failed to fetch reply count for post ${post.id}`);\n        post.replyCount = 0;\n      }\n    }\n    try {\n      creator = await fetchMemberFromCache(post.creator, hubRequestOptions);\n    }\n    catch (e) {\n      creator = null;\n      console.warn(`Failed to fetch user info for ${post.creator}`);\n    }\n    if (creator === null || creator === void 0 ? void 0 : creator.orgId) {\n      try {\n        organization = await fetchPortalFromCache(creator.orgId, hubRequestOptions);\n      }\n      catch (e) {\n        organization = null;\n        console.warn(`Failed to fetch user org for ${creator.username}`);\n      }\n    }\n    const usernames = parseMentionedUsers(post.body);\n    if (usernames.length) {\n      try {\n        mentionedUsers = await Promise.all(usernames.map(async (username) => {\n          let userDetails;\n          try {\n            const user = await fetchMemberFromCache(username, hubRequestOptions);\n            let organization = null;\n            if (user === null || user === void 0 ? void 0 : user.orgId) {\n              organization = await fetchPortalFromCache(user.orgId, hubRequestOptions);\n            }\n            userDetails = { username, user, organization };\n          }\n          catch (e) {\n            userDetails = null;\n          }\n          return userDetails;\n        }));\n      }\n      catch (e) {\n        mentionedUsers = [];\n        console.warn(`Failed to fetch mentioned users for ${post.id}`);\n      }\n      mentionedUsers = mentionedUsers.filter(Boolean);\n    }\n  }\n  return {\n    post,\n    postId: postId || post.id,\n    creatorDetails: {\n      username: (_b = creator === null || creator === void 0 ? void 0 : creator.username) !== null && _b !== void 0 ? _b : post === null || post === void 0 ? void 0 : post.creator,\n      user: creator,\n      organization\n    },\n    mentionedUsers\n  };\n}\nconst fetchAndTransformFeature = cache((url, id) => getFeature({ url, id })\n  .then(arcgisToGeoJSON)\n  .catch((e) => {\n  console.warn(`Failed to fetch related feature ${id}`, e.message);\n  return null;\n}), {\n  scope: 'relatedFeatures',\n  getKey(_url, id) { return id.toString(); }\n});\n/**\n * Fetches related feature data\n * @param url\n * @param relatedFeatureIds\n * @returns a Feature array\n */\nasync function fetchRelatedFeatures(url, relatedFeatureIds) {\n  let results = [];\n  if (Number(getLayerIdFromUrl(url)) >= 0) {\n    results = await Promise.all(relatedFeatureIds.map(id => fetchAndTransformFeature(url, id)));\n    results.forEach((feature, index) => {\n      if (feature) {\n        feature.id = relatedFeatureIds[index];\n      }\n    });\n  }\n  return results.filter(Boolean);\n}\n/**\n * Fetches details for a channel\n * @param options An Object of options, extends IHubRequestOptions\n * @param options.channel An optional IChannel object\n * @param options.channelId An optional IChannel object\n * @param options.user An optional IUser object, if provided will fetch most recent post by that user\n * @returns a promise that resolves an IChannelDetails object\n */\nasync function enrichChannelDetails(options) {\n  const { channelDetails, user } = options, hubRequestOptions = __rest(options, [\"channelDetails\", \"user\"]);\n  if (!channelDetails) {\n    throw new Error('Must provide a chanelDetails object');\n  }\n  let { channelId, channel } = channelDetails;\n  if (!channel) {\n    try {\n      channel = await fetchChannel(Object.assign({ channelId }, hubRequestOptions));\n      channelId = channel.id;\n    }\n    catch (err) {\n      console.warn(`Failed to fetch channel ${channelId}`);\n    }\n  }\n  let groups = [];\n  let latestUserPost;\n  if (channel) {\n    const groupsPromise = Promise.all(channel.groups.map(groupId => fetchTeamFromCache(groupId, hubRequestOptions).catch(() => null)));\n    let latestUserPostPromise;\n    let latestUserPostResult;\n    if (user) {\n      latestUserPostPromise = searchPosts(Object.assign({ params: {\n          start: 1,\n          num: 1,\n          sortBy: PostSort.CREATED_AT,\n          sortOrder: SortOrder.DESC,\n          channels: channel.id,\n          creator: user.username\n        } }, hubRequestOptions));\n    }\n    ([groups, latestUserPostResult] = await Promise.all([groupsPromise, latestUserPostPromise]));\n    if (latestUserPostResult) {\n      ({ items: [latestUserPost] } = latestUserPostResult);\n    }\n  }\n  return {\n    channel,\n    groups: groups.filter(Boolean),\n    channelId,\n    latestUserPost\n  };\n}\n/**\n * Transforms the given post to an IPostDetails\n * @param post\n */\nconst toPostDetails = (post) => ({\n  postId: post.id,\n  post\n});\n/**\n * Searches posts and replies\n * @param options An Object of options, extends IHubRequestOptions\n * @param options.discussion An optional discussion URI\n * @param options.parents An optional array of parent post ID's\n * @param options.num An optional number of results\n * @param options.start The search start position\n * @param options.sortOrder The search search order\n * @param options.sortBy The search sort field\n * @returns A promise that resolves an IPagedResponse of type IPostAggregate\n */\nasync function searchPostAggregates(options) {\n  const { discussion, start, sortOrder, sortBy, parents = [], num = 10, geometry } = options, hubRequestOptions = __rest(options, [\"discussion\", \"start\", \"sortOrder\", \"sortBy\", \"parents\", \"num\", \"geometry\"]);\n  const _a = await searchPosts(Object.assign({ params: Object.assign(Object.assign(Object.assign({ discussion,\n      num }, ((parents === null || parents === void 0 ? void 0 : parents.length) && { parents })), { relations: [\n        ...((parents === null || parents === void 0 ? void 0 : parents.length) ? [PostRelation.REPLIES] : [PostRelation.PARENT, PostRelation.REPLIES]),\n        PostRelation.CHANNEL\n      ], sortBy,\n      sortOrder,\n      start }), (geometry && { geometry })) }, hubRequestOptions)), { items: posts } = _a, results = __rest(_a, [\"items\"]);\n  const toPostAggregateDetails = (rawPost) => {\n    const { channel } = rawPost, post = __rest(rawPost, [\"channel\"]);\n    const isReply = Boolean(post.parent);\n    const postDetails = toPostDetails(post);\n    return {\n      postDetails: isReply ? toPostDetails(post.parent) : postDetails,\n      replyDetails: isReply ? postDetails : null,\n      channelDetails: {\n        channelId: channel.id,\n        channel\n      }\n    };\n  };\n  const items = posts.map(toPostAggregateDetails);\n  return Object.assign(Object.assign({}, results), { items });\n}\n/**\n * Cache fetchContent call\n */\nconst fetchContentFromCache = cache(fetchContent, { scope: 'content' });\n/**\n * Fetches discussion subject details\n * @param options An Object of options, extends IHubRequestOptions\n * @param options.discussion An optional discussion URI string\n * @returns A promise that resolves a IDiscussionDetails object\n */\nasync function fetchSubjectDetails(options) {\n  var _a;\n  const { bust, discussion, locationId } = options, hubRequestOptions = __rest(options, [\"bust\", \"discussion\", \"locationId\"]);\n  let results = {\n    discussion,\n    reference: null,\n    displayField: null,\n    source: null,\n    type: null,\n    id: null,\n    layer: null,\n    features: null,\n    attribute: null\n  };\n  if (discussion) {\n    const discussionParams = parseDiscussionURI(discussion);\n    const fn = discussionParams.type === DiscussionType.GROUP\n      ? fetchTeamFromCache\n      : fetchContentFromCache;\n    const reference = await fn(discussionParams.id, hubRequestOptions, { bust });\n    const displayField = {\n      key: (_a = reference === null || reference === void 0 ? void 0 : reference.layer) === null || _a === void 0 ? void 0 : _a.displayField,\n      isValid: hasValidDisplayField(reference)\n    };\n    if (locationId && displayField.isValid) {\n      try {\n        const { properties } = await fetchAndTransformFeature(reference.url, locationId);\n        const displayFieldValue = properties[reference.layer.displayField];\n        displayField.value = displayFieldValue;\n      }\n      catch (error) {\n        console.error('Failed to load location:', error.message);\n      }\n    }\n    results = Object.assign({ discussion,\n      reference,\n      displayField }, discussionParams);\n  }\n  return results;\n}\n/**\n * Converts IPost to GeoJSON Feature Collection\n * @param posts An IPost object\n * @returns GeoJSON Feature Collection\n */\nfunction postsToFeatureCollection(posts) {\n  const hasGeometryOrFeatures = (post) => {\n    return Boolean(post.geometry || pluckDiscussionFeatureIds(post.discussion));\n  };\n  return {\n    type: 'FeatureCollection',\n    features: posts.filter(hasGeometryOrFeatures).map(postToFeatures).flat(),\n  };\n}\nfunction postToFeatures(post) {\n  const emptyPoint = {\n    type: 'Point',\n    coordinates: []\n  };\n  const { geometry } = post, rest = __rest(post, [\"geometry\"]);\n  const features = [];\n  if ((geometry === null || geometry === void 0 ? void 0 : geometry.type) === 'GeometryCollection') {\n    geometry.geometries.forEach((geometry, index) => {\n      features.push({\n        type: 'Feature',\n        geometry: geometry || emptyPoint,\n        properties: Object.assign(Object.assign({}, rest), { '__index__': index })\n      });\n    });\n  }\n  else {\n    features.push({\n      type: 'Feature',\n      geometry: geometry || emptyPoint,\n      properties: rest,\n    });\n  }\n  return features;\n}\nfunction featuresToGeometryCollection(features) {\n  const geometries = features\n    .map(feature => feature.geometry)\n    .filter((geometry) => Boolean(geometry.coordinates.length));\n  return geometries.length\n    ? { type: 'GeometryCollection', geometries }\n    : null;\n}\n/**\n * Create discussion URI given existing discussion URI and additional spatial identifiers\n * @param discussion The original discussion URI\n * @param layerId\n * @param featureId\n * @returns Discussions URI assocaited with an individual feature\n */\nfunction augmentDiscussionURIWithFeature(discussion, layerId, featureIds) {\n  const { source, type, id, features } = parseDiscussionURI(discussion);\n  let URI = `${source}://${type}/${id}_${layerId}`;\n  const originalFeatureIds = features || [];\n  const ids = Array.from(new Set([\n    ...originalFeatureIds,\n    ...featureIds\n  ]));\n  if (ids.length) {\n    URI += `?id=${ids.join(',')}`;\n  }\n  return URI;\n}\n/**\n * If discussion is associated with a feature, it will return the ID of the first feature\n * @param discussion Discussion URI\n * @returns ID of first feature for discussion\n */\nfunction pluckDiscussionFeatureIds(discussion) {\n  if (!discussion) {\n    return;\n  }\n  const { features } = parseDiscussionURI(discussion);\n  if (features) {\n    return features;\n  }\n}\n/**\n * Determines if IHubContent layer displayField id valid.  A valid displayField\n * should not be empty or identical the objectId field.\n * @param content IHubContent\n * @returns True if IHubContent layer has valid displayField\n */\nconst hasValidDisplayField = (content) => {\n  if (!content.layer) {\n    return false;\n  }\n  const { layer: { displayField, fields } } = content;\n  const { name: oidFieldName } = fields.find(({ type }) => type === 'esriFieldTypeOID');\n  return Boolean(displayField) && displayField !== oidFieldName;\n};\n/**\n * Fetches a collection of channel details for channels in which\n * the currently authenticated user has submitted one or more posts\n * to, sorted by most recent activity. Fetches the most recent post\n * created by the user within the channel\n * @param options An Object of options, extends IHubRequestOptions\n * @param options.user An IUser Object\n * @returns a promise that resolves an Array of IPagedResponse<IChannelDetails>\n */\nasync function fetchRecentChannelDetails(options) {\n  const { user } = options, hubRequestOptions = __rest(options, [\"user\"]);\n  const _a = await searchChannels(Object.assign({ params: {\n      num: 4,\n      filterBy: ChannelFilter.HAS_USER_POSTS,\n      sortBy: ChannelSort.LAST_ACTIVITY,\n      sortOrder: SortOrder.DESC\n    } }, hubRequestOptions)), { items: channels } = _a, results = __rest(_a, [\"items\"]);\n  const items = await Promise.all(channels.map(async (channel) => enrichChannelDetails(Object.assign({ channelDetails: {\n      channelId: channel.id,\n      channel\n    }, user }, hubRequestOptions))));\n  const hasDiscussableGroups = (channelDetails) => Boolean(channelDetails.groups.length) && isDiscussable(channelDetails.groups[0]);\n  return Object.assign(Object.assign({}, results), { items: items.filter(hasDiscussableGroups) });\n}\n/**\n * Fetches a collection of reply details\n * @param options\n * @returns A promise that resolves a paged search response of IPostDetails representing replies\n */\nasync function searchReplies(options) {\n  const { parents, start } = options, hubRequestOptions = __rest(options, [\"parents\", \"start\"]);\n  const _a = await searchPosts(Object.assign({ params: {\n      parents,\n      num: 10,\n      start,\n      sortOrder: SortOrder.DESC,\n      sortBy: PostSort.UPDATED_AT\n    } }, hubRequestOptions)), { items: replies } = _a, results = __rest(_a, [\"items\"]);\n  const items = replies.map(toPostDetails);\n  return Object.assign(Object.assign({}, results), { items });\n}\n/**\n * Takes a Geometry object and returns the type as a simple string\n * @param Geometry\n * @returns string\n */\nfunction convertGeometryTypeToTelemetryString({ type }) {\n  if (type === \"Point\" || type === \"MultiPoint\") {\n    return 'point';\n  }\n  else if (type === \"LineString\" || type === \"MultiLineString\") {\n    return 'line';\n  }\n  else if (type === \"Polygon\" || type === \"MultiPolygon\") {\n    return 'polygon';\n  }\n}\n/**\n * Updates the discussability of a subject (IHubContent or IGroup)\n * TODO: hoist to Hub.js\n * @param options An IUpdateDiscussableOptions object\n * @returns Promise that resolves IHubContent or IGroup\n */\nasync function updateDiscussable(options) {\n  const { subject, discussable } = options, requestOptions = __rest(options, [\"subject\", \"discussable\"]);\n  const type = subject.isInvitationOnly === undefined ? 'content' : 'group';\n  let fetchFn;\n  let updateFn;\n  let updateKey;\n  if (type === 'content') {\n    fetchFn = getItem;\n    updateFn = updateItem;\n    updateKey = 'item';\n  }\n  else {\n    fetchFn = getGroup;\n    updateFn = updateGroup;\n    updateKey = 'group';\n  }\n  const { typeKeywords: existingTypeKeywords } = await fetchFn(subject.id, requestOptions);\n  const typeKeywords = discussable\n    ? existingTypeKeywords.filter(typeword => typeword !== CANNOT_DISCUSS)\n    : [...existingTypeKeywords, CANNOT_DISCUSS];\n  const { success } = await updateFn(Object.assign({ [updateKey]: {\n      id: subject.id,\n      owner: subject.owner,\n      typeKeywords,\n    } }, requestOptions));\n  if (!success) {\n    throw new Error('Failed to update discussion settings');\n  }\n  return Object.assign(Object.assign({}, subject), { typeKeywords });\n}\n\nexport { fetchTeamFromCache as A, searchChannels as B, SharingAccess as C, DiscussionType as D, augmentDiscussionURIWithFeature as E, featuresToGeometryCollection as F, createPost as G, fetchChannel as H, updatePost as I, MAX_BODY_LENGTH as J, createReply as K, pluckDiscussionFeatureIds as L, MAX_TITLE_LENGTH as M, fetchRelatedFeatures as N, PostSort as P, SortOrder as S, WARNING_BODY_LENGTH as W, removeChannelNotificationOptOut as a, searchPostAggregates as b, createChannelNotificationOptOut as c, postToFeatures as d, enrichChannelDetails as e, fetchChannelNotifcationOptOut as f, arcgisToGeoJSON as g, fetchSubjectDetails as h, parseDiscussionURI as i, geojsonToArcGIS as j, convertGeometryTypeToTelemetryString as k, isDiscussable as l, updateChannel as m, enrichPostDetails as n, searchReplies as o, postsToFeatureCollection as p, cache as q, removeChannelActivity as r, searchPosts as s, parseMentionedUsers as t, updateDiscussable as u, removePost as v, canModifyPost as w, canDeletePost as x, searchOtherTeamMembers as y, fetchRecentChannelDetails as z };\n","import { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { r as request } from './request-c15cc2af.js';\nimport { a as appendCustomParams } from './append-custom-params-fd9b7e72.js';\n\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { getGroup } from \"@esri/arcgis-rest-portal\";\n * //\n * getGroup(\"fxb988\") // id\n *   .then(response)\n * ```\n * Fetch a group using its id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group.htm) for more information.\n *\n * @param id - Group Id\n * @param requestOptions  - Options for the request\n * @returns  A Promise that will resolve with the data from the response.\n */\nfunction getGroup(id, requestOptions) {\n    var url = getPortalUrl(requestOptions) + \"/community/groups/\" + id;\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options);\n}\n/**\n * Get the usernames of the admins and members. Does not return actual 'User' objects. Those must be\n * retrieved via separate calls to the User's API.\n * @param id - Group Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with arrays of the group admin usernames and the member usernames\n */\nfunction getGroupUsers(id, requestOptions) {\n    var url = getPortalUrl(requestOptions) + \"/community/groups/\" + id + \"/users\";\n    // default to a GET request\n    var options = __assign({ httpMethod: \"GET\" }, requestOptions);\n    return request(url, options);\n}\n/**\n * ```js\n * import { searchGroupUsers } from \"@esri/arcgis-rest-portal\";\n * //\n * searchGroupUsers('abc123')\n *   .then(response)\n * ```\n * Search the users in a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group-users-list.htm) for more information.\n *\n * @param id - The group id\n * @param searchOptions - Options for the request, including paging parameters.\n * @returns A Promise that will resolve with the data from the response.\n */\nfunction searchGroupUsers(id, searchOptions) {\n    var url = getPortalUrl(searchOptions) + \"/community/groups/\" + id + \"/userlist\";\n    var options = appendCustomParams(searchOptions || {}, [\"name\", \"num\", \"start\", \"sortField\", \"sortOrder\", \"joined\", \"memberType\"], {\n        httpMethod: \"GET\"\n    });\n    return request(url, options);\n}\n\nexport { getGroupUsers as a, getGroup as g, searchGroupUsers as s };\n","import { _ as __assign } from './tslib.es6-3669ad41.js';\nimport { g as getPortalUrl } from './get-portal-url-423a76f5.js';\nimport { d as determineOwner, s as serializeItem, i as isBBox, b as bboxToString } from './get-f2cd18e7.js';\nimport { r as request } from './request-c15cc2af.js';\n\n/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * ```js\n * import { updateItem } from \"@esri/arcgis-rest-portal\";\n * //\n * updateItem({\n *   item: {\n *     id: \"3ef\",\n *     description: \"A three hour tour\"\n *   },\n *   authentication\n * })\n *   .then(response)\n * ```\n * Update an Item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that updates an item.\n */\nfunction updateItem(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = requestOptions.folderId\n            ? getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/\" + requestOptions.folderId + \"/items/\" + requestOptions.item.id + \"/update\"\n            : getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.item.id + \"/update\";\n        // serialize the item into something Portal will accept\n        requestOptions.params = __assign(__assign({}, requestOptions.params), serializeItem(requestOptions.item));\n        // convert extent, if present, into a string from bbox\n        // processParams was previously doing this sort of work,\n        // however now we need to let array of arrays through\n        // Thus for extents we need to move this logic here\n        if (requestOptions.params.extent && isBBox(requestOptions.params.extent)) {\n            requestOptions.params.extent = bboxToString(requestOptions.params.extent);\n        }\n        return request(url, requestOptions);\n    });\n}\n/**\n * ```js\n * import { updateItemResource } from \"@esri/arcgis-rest-portal\";\n * //\n * updateItemResource({\n *   id: '3ef',\n *   resource: file,\n *   name: 'bigkahuna.jpg',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Update a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that updates an item resource.\n */\nfunction updateItemResource(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.id + \"/updateResources\";\n        // mix in user supplied params\n        requestOptions.params = __assign({ file: requestOptions.resource, fileName: requestOptions.name, resourcesPrefix: requestOptions.prefix, text: requestOptions.content }, requestOptions.params);\n        // only override the access specified previously if 'private' is passed explicitly\n        if (typeof requestOptions.private !== \"undefined\") {\n            requestOptions.params.access = requestOptions.private\n                ? \"private\"\n                : \"inherit\";\n        }\n        return request(url, requestOptions);\n    });\n}\n/**\n * ```js\n * import { moveItem } from \"@esri/arcgis-rest-portal\";\n * //\n * moveItem({\n *   itemId: \"3ef\",\n *   folderId: \"7c5\",\n *   authentication: userSession\n * })\n * ```\n * Move an item to a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/move-item.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with owner and folder details once the move has been completed\n */\nfunction moveItem(requestOptions) {\n    return determineOwner(requestOptions).then(function (owner) {\n        var url = getPortalUrl(requestOptions) + \"/content/users/\" + owner + \"/items/\" + requestOptions.itemId + \"/move\";\n        var folderId = requestOptions.folderId;\n        if (!folderId) {\n            folderId = \"/\";\n        }\n        requestOptions.params = __assign({ folder: folderId }, requestOptions.params);\n        return request(url, requestOptions);\n    });\n}\n\nexport { updateItemResource as a, moveItem as m, updateItem as u };\n"],"names":["updateGroup","requestOptions","url","getPortalUrl","group","id","params","__assign","request$1","SortOrder","PostReaction","SharingAccess","PostStatus","DiscussionType","DiscussionSource","PostRelation","ChannelRelation","ReactionRelation","ChannelFilter","CommonSort","ChannelSort","PostSort","Role","RemoteServerError","message","status","error","RemoteServerError$1","request","options","token","authentication","tokenPromise","Promise","resolve","getToken","bind","portal","authenticateRequest","then","route","headers","Headers","append","opts","method","httpMethod","mode","cache","credentials","apiBase","buildUrl","host","hubApiUrl","path","queryParams","URLSearchParams","toString","body","JSON","stringify","replace","join","fetch","res","ok","json","statusText","err","apiRequest","searchPosts","createPost","Object","assign","getCreateUpdateRequestOptions","createReply","postId","fetchPost","removePost","updatePost","mentionUrl","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest$2","searchChannels","fetchChannel","channelId","updateChannel","fetchChannelNotifcationOptOut","createChannelNotificationOptOut","removeChannelNotificationOptOut","removeChannelActivity","CANNOT_DISCUSS","MENTION_ATTRIBUTE","parseDiscussionURI","discussion","URL","Error","layer","source","protocol","split","type","identifier","parseDatasetId","itemId","layerId","searchParams","search","features","has","get","attribute","isDiscussable","subject","_a","typeKeywords","includes","canModifyPost","post","user","creator","username","canDeletePost","channel","access","membershipTypes","sharedGroups","groups","eligibleUserGroups","reduce","memo","userMembership","memberType","push","reduceByGroupMembership","strict","role","roleId","isOrgAdmin","orgs","orgId","isChannelOrgAdmin","canModifyChannel","MENTION_ATTRIBUTE_AND_VALUE_PATTERN","RegExp","MENTION_ATTRIBUTE_PATTERN","NON_WORDS_PATTERN","parseMentionedUsers","text","toReplaced","input","pattern","toMentionedUsers","acc","match","matches","_cache","Map","fn","scope","getKey","first","ttl","TypeError","args","rawArgs","reverse","lastArg","restArgsReversed","keys","key","restKeys","isCacheArg","context","this","scopeMap","set","apply","cacheResult","undefined","now","Date","created","result","fetchMemberFromCache","hubRequestOptions","getUser","__rest$1","fetchTeamFromCache","getGroup","fetchTeamMembersFromCache","getGroupUsers","searchOtherTeamMembers","currentUser","query","owner","admins","members","users","byUniqueNotCurrentUser","idx","arr","uniqueMembers","filter","all","map","byUsernameOrFullName","fullName","fetchPortalFromCache","getPortal","edgeIntersectsEdge","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","arrayIntersectsArray","a","b","j","closeRing","coordinates","pointsEqual","ringIsClockwise","ringToTest","pt2","total","rLength","pt1","shallowClone","obj","target","coordinatesContainCoordinates","outer","inner","intersects","contains","point","l","coordinatesContainPoint","arcgisToGeoJSON","arcgis","idAttribute","geojson","x","y","z","points","slice","paths","rings","outerRing","hole","outerRings","holes","r","ring","polygon","uncontainedHoles","pop","contained","convertRingsToGeoJSON","xmin","ymin","xmax","ymax","geometry","attributes","properties","getId","spatialReference","wkid","console","warn","orientRings","poly","output","shift","geojsonToArcGIS","hasZ","flattenMultiPolygonRings","geometries","__rest","MAX_TITLE_LENGTH","MAX_BODY_LENGTH","WARNING_BODY_LENGTH","enrichPostDetails","postDetails","includeReplyCount","organization","mentionedUsers","relations","REPLIES","replies","replyCount","start","num","parents","usernames","userDetails","Boolean","creatorDetails","_b","fetchAndTransformFeature","getFeature","catch","_url","fetchRelatedFeatures","relatedFeatureIds","results","Number","getLayerIdFromUrl","forEach","feature","index","enrichChannelDetails","channelDetails","groupsPromise","groupId","latestUserPostPromise","sortBy","CREATED_AT","sortOrder","DESC","channels","latestUserPostResult","items","latestUserPost","toPostDetails","searchPostAggregates","PARENT","CHANNEL","posts","toPostAggregateDetails","rawPost","isReply","parent","replyDetails","fetchContentFromCache","fetchContent","fetchSubjectDetails","bust","locationId","reference","displayField","discussionParams","GROUP","isValid","hasValidDisplayField","displayFieldValue","value","postsToFeatureCollection","pluckDiscussionFeatureIds","postToFeatures","flat","emptyPoint","rest","featuresToGeometryCollection","augmentDiscussionURIWithFeature","featureIds","URI","originalFeatureIds","ids","Array","from","Set","content","oidFieldName","fields","find","name","fetchRecentChannelDetails","filterBy","HAS_USER_POSTS","LAST_ACTIVITY","hasDiscussableGroups","searchReplies","UPDATED_AT","convertGeometryTypeToTelemetryString","updateDiscussable","discussable","isInvitationOnly","fetchFn","getItem","updateFn","updateItem","updateKey","existingTypeKeywords","typeword","success","searchGroupUsers","searchOptions","appendCustomParams","determineOwner","folderId","item","serializeItem","extent","isBBox","bboxToString","updateItemResource","file","resource","fileName","resourcesPrefix","prefix","private","moveItem","folder"],"sourceRoot":""}